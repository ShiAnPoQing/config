==============================================================================
Lua 模块: vim.version                                          *vim.version*

`vim.version` 模块提供符合 https://semver.org 规范的版本和范围比较函数。插件和插件管理器可用以检测当前系统可用工具和依赖。

示例: >lua
    local v = vim.version.parse(vim.fn.system({'tmux', '-V'}), {strict=false})
    if vim.version.gt(v, {3, 2, 0}) then
      -- ...
    end
<

*vim.version()* 返回当前 Nvim 进程的版本。

版本范围规范                                             *version-range*

版本“范围规范”定义了可用 |vim.version.range()| 检查的语义版本范围。

支持的范围规范如下表。注意：带后缀的版本（1.2.3-rc1）不匹配。 >
    1.2.3             即 1.2.3
    =1.2.3            即 1.2.3
    >1.2.3            大于 1.2.3
    <1.2.3            小于 1.2.3
    >=1.2.3           至少 1.2.3
    ~1.2.3            >=1.2.3 <1.3.0       “接近 1.2.3”
    ^1.2.3            >=1.2.3 <2.0.0       “兼容 1.2.3”
    ^0.2.3            >=0.2.3 <0.3.0       （0.x.x 特殊）
    ^0.0.1            =0.0.1               （0.0.x 特殊）
    ^1.2              >=1.2.0 <2.0.0       （如 ^1.2.0）
    ~1.2              >=1.2.0 <1.3.0       （如 ~1.2.0）
    ^1                >=1.0.0 <2.0.0       “兼容 1”
    ~1                同上                 “接近 1”
    1.x               同上
    1.*               同上
    1                 同上
    *                 任意版本
    x                 同上

    1.2.3 - 2.3.4     >=1.2.3 <=2.3.4

    右侧缺失：缺失部分视为 x（2.3 => 2.3.x）。
    1.2.3 - 2.3       >=1.2.3 <2.4.0
    1.2.3 - 2         >=1.2.3 <3.0.0

    左侧缺失：缺失部分视为 0（1.2 => 1.2.0）。
    1.2 - 2.3.0       1.2.0 - 2.3.0
<
vim.version.cmp({v1}, {v2})                                *vim.version.cmp()*
    解析并比较两个版本对象（|vim.version.parse()| 的结果，或直接用 `{major, minor, patch}` 元组，如 `{1, 0, 3}`）。

    示例: >lua
        if vim.version.cmp({1,0,3}, {0,2,1}) == 0 then
          -- ...
        end
        local v1 = vim.version.parse('1.0.3-pre')
        local v2 = vim.version.parse('0.2.1')
        if vim.version.cmp(v1, v2) == 0 then
          -- ...
        end
<

    注意: ~
      • 按 semver，比较两个等价版本时会忽略构建元数据。

    属性: ~
        自 0.9.0 起

    参数: ~
      • {v1}  (`vim.Version|number[]|string`) 版本对象
      • {v2}  (`vim.Version|number[]|string`) 要与 v1 比较的版本

    返回: ~
        (`integer`) v1 < v2 返回 -1，v1 == v2 返回 0，v1 > v2 返回 1

vim.version.eq({v1}, {v2})                                  *vim.version.eq()*
    若给定版本相等则返回 `true`。用法见 |vim.version.cmp()|。

    属性: ~
        自 0.9.0 起

    参数: ~
      • {v1}  (`vim.Version|number[]|string`)
      • {v2}  (`vim.Version|number[]|string`)

    返回: ~
        (`boolean`)

vim.version.ge({v1}, {v2})                                  *vim.version.ge()*
    若 v1 >= v2 返回 `true`。用法见 |vim.version.cmp()|。

    属性: ~
        自 0.10.0 起

    参数: ~
      • {v1}  (`vim.Version|number[]|string`)
      • {v2}  (`vim.Version|number[]|string`)

    返回: ~
        (`boolean`)

vim.version.gt({v1}, {v2})                                  *vim.version.gt()*
    若 v1 > v2 返回 `true`。用法见 |vim.version.cmp()|。

    属性: ~
        自 0.9.0 起

    参数: ~
      • {v1}  (`vim.Version|number[]|string`)
      • {v2}  (`vim.Version|number[]|string`)

    返回: ~
        (`boolean`)

vim.version.last({versions})                              *vim.version.last()*
    TODO: 泛化此函数，移到 func.lua

    参数: ~
      • {versions}  (`vim.Version[]`)

    返回: ~
        (`vim.Version?`)

vim.version.le({v1}, {v2})                                  *vim.version.le()*
    若 v1 <= v2 返回 `true`。用法见 |vim.version.cmp()|。

    属性: ~
        自 0.10.0 起

    参数: ~
      • {v1}  (`vim.Version|number[]|string`)
      • {v2}  (`vim.Version|number[]|string`)

    返回: ~
        (`boolean`)

vim.version.lt({v1}, {v2})                                  *vim.version.lt()*
    若 v1 < v2 返回 `true`。用法见 |vim.version.cmp()|。

    属性: ~
        自 0.9.0 起

    参数: ~
      • {v1}  (`vim.Version|number[]|string`)
      • {v2}  (`vim.Version|number[]|string`)

    返回: ~
        (`boolean`)

vim.version.parse({version}, {opts})                     *vim.version.parse()*
    解析语义版本字符串，返回可与其它 `vim.version` 函数配合使用的版本对象。例如 "1.0.1-rc1+build.2" 返回: >
        { major = 1, minor = 0, patch = 1, prerelease = "rc1", build = "build.2" }
<

    属性: ~
        自 0.9.0 起

    参数: ~
      • {version}  (`string`) 要解析的版本字符串
      • {opts}     (`table?`) 可选关键字参数:
                   • strict (boolean): 默认 false。若为 true，输入不符合 semver v2.0.0 时不做强制转换。为 false 时，`parse()` 会尝试将 "1.0"、"0-x"、"tmux 3.2a" 等转换为有效版本。

    返回: ~
        (`vim.Version?`) 解析后的版本对象，输入无效时为 nil

    另见: ~
      • https://semver.org/spec/v2.0.0.html

vim.version.range({spec})                                *vim.version.range()*
    解析 semver |version-range| “规范”，返回范围对象: >
        {
          from: Version
          to: Version
          has(v: string|Version)
        }
<

    `:has()` 检查版本是否在范围内（包含 from，不包含 to）。

    示例: >lua
        local r = vim.version.range('1.0.0 - 2.0.0')
        print(r:has('1.9.9'))       -- true
        print(r:has('2.0.0'))       -- false
        print(r:has(vim.version())) -- 检查当前 Nvim 版本
<

    或用 cmp(), le(), lt(), ge(), gt(), eq() 直接与 .to/.from 比较: >lua
        local r = vim.version.range('1.0.0 - 2.0.0') -- >=1.0, <2.0
        print(vim.version.ge({1,0,3}, r.from) and vim.version.lt({1,0,3}, r.to))
<

    属性: ~
        自 0.9.0 起

    参数: ~
      • {spec}  (`string`) 版本范围“规范”

    返回: ~
        (`table?`) 包含以下字段的表:
        • {from} (`vim.Version`)
        • {to}? (`vim.Version`)
        • {has} (`fun(self: vim.VersionRange, version: string|vim.Version)`)

    另见: ~
      • https://github.com/npm/node-semver#ranges

vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
