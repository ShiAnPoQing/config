*index.txt*     Nvim

		  VIM 参考手册    作者 Bram Moolenaar

								*index*
此文件包含每种模式下所有命令的列表，附有标签和简短描述。列表按ASCII值排序。

提示：当寻找某些功能时，使用搜索命令。例如，要查找删除某物，使用："/delete"。

选项概览请参见 |option-list|。
内置函数概览请参见 |functions|。
Vim变量列表请参见 |vim-variable|。

                                      输入 |gO| 查看目录。

==============================================================================
1. 插入模式						*insert-index*

标签		字符		插入模式下的动作	~
------------------------------------------------------------------------------ ~
|i_CTRL-@|	CTRL-@		插入先前插入的文本并停止插入
|i_CTRL-A|	CTRL-A		插入先前插入的文本
|i_CTRL-C|	CTRL-C		退出插入模式，不检查缩写
|i_CTRL-D|	CTRL-D		删除当前行的一个缩进宽度
|i_CTRL-E|	CTRL-E		插入光标下的字符
		CTRL-F		未使用（但默认在'cinkeys'中用于重新缩进当前行）
|i_CTRL-G_j|	CTRL-G CTRL-J	向下移动一行，到插入开始的列
|i_CTRL-G_j|	CTRL-G j	向下移动一行，到插入开始的列
|i_CTRL-G_j|	CTRL-G <Down>	向下移动一行，到插入开始的列
|i_CTRL-G_k|	CTRL-G CTRL-K	向上移动一行，到插入开始的列
|i_CTRL-G_k|	CTRL-G k	向上移动一行，到插入开始的列
|i_CTRL-G_k|	CTRL-G <Up>	向上移动一行，到插入开始的列
|i_CTRL-G_u|	CTRL-G u	开始新的可撤销编辑
|i_CTRL-G_U|	CTRL-G U	下次光标移动时不打断撤销
|i_<BS>|	<BS>		删除光标前的字符
|i_digraph|	{char1}<BS>{char2}
				输入双字符（仅在设置'digraph'选项时）
|i_CTRL-H|	CTRL-H		同<BS>
|i_<Tab>|	<Tab>		插入<Tab>字符
|i_CTRL-I|	CTRL-I		同<Tab>
|i_<NL>|	<NL>		同<CR>
|i_CTRL-J|	CTRL-J		同<CR>
|i_CTRL-K|	CTRL-K {char1} {char2}
				输入双字符
|i_<CR>|	<CR>		开始新行
|i_CTRL-M|	CTRL-M		同<CR>
|i_CTRL-N|	CTRL-N		查找光标前关键字的下一个匹配项
|i_CTRL-O|	CTRL-O		执行单个命令并返回插入模式
|i_CTRL-P|	CTRL-P		查找光标前关键字的上一个匹配项
|i_CTRL-Q|	CTRL-Q		同CTRL-V，除非用于终端控制流
|i_CTRL-SHIFT-Q|  CTRL-SHIFT-Q {char}
				像CTRL-Q，除非|tui-modifyOtherKeys|激活
|i_CTRL-R|	CTRL-R {register}
				插入寄存器的内容
|i_CTRL-R_CTRL-R| CTRL-R CTRL-R {register}
				字面插入寄存器的内容
|i_CTRL-R_CTRL-O| CTRL-R CTRL-O {register}
				字面插入寄存器的内容且不自动缩进
|i_CTRL-R_CTRL-P| CTRL-R CTRL-P {register}
				字面插入寄存器的内容并修正缩进。
		CTRL-S		未使用或用于终端控制流
|i_CTRL-T|	CTRL-T		在当前行插入一个缩进宽度
|i_CTRL-U|	CTRL-U		删除当前行中输入的所有字符
|i_CTRL-V|	CTRL-V {char}	字面插入下一个非数字字符
|i_CTRL-SHIFT-V|  CTRL-SHIFT-V {char}
				像CTRL-V，除非|tui-modifyOtherKeys|激活
|i_CTRL-V_digit| CTRL-V {number} 插入三位十进制数作为单个字节。
|i_CTRL-W|	CTRL-W		删除光标前的单词
|i_CTRL-X|	CTRL-X {mode}	进入CTRL-X子模式，参见|i_CTRL-X_index|
|i_CTRL-Y|	CTRL-Y		插入光标上的字符
|i_<Esc>|	<Esc>		结束插入模式
|i_CTRL-[|	CTRL-[		同<Esc>
|i_CTRL-\_CTRL-N| CTRL-\ CTRL-N	进入普通模式
|i_CTRL-\_CTRL-G| CTRL-\ CTRL-G	进入普通模式
		CTRL-\ a - z	保留用于扩展
		CTRL-\ others	未使用
|i_CTRL-]|	CTRL-]		触发缩写
|i_CTRL-^|	CTRL-^		切换使用|:lmap|映射
|i_CTRL-_|	CTRL-_		当设置'allowrevins'时：切换'revins'

		<Space>到'~'	未使用，除非'0'和'^'后跟CTRL-D

|i_0_CTRL-D|	0 CTRL-D	删除当前行的所有缩进
|i_^_CTRL-D|	^ CTRL-D	删除当前行的所有缩进，在下一行恢复

|i_<Del>|	<Del>		删除光标下的字符

		元字符（0x80到0xff，128到255）
				未使用

|i_<Left>|	<Left>		光标左移一个字符
|i_<S-Left>|	<S-Left>	光标左移一个单词
|i_<C-Left>|	<C-Left>	光标左移一个单词
|i_<Right>|	<Right>		光标右移一个字符
|i_<S-Right>|	<S-Right>	光标右移一个单词
|i_<C-Right>|	<C-Right>	光标右移一个单词
|i_<Up>|	<Up>		光标上移一行
|i_<S-Up>|	<S-Up>		同<PageUp>
|i_<Down>|	<Down>		光标下移一行
|i_<S-Down>|	<S-Down>	同<PageDown>
|i_<Home>|	<Home>		光标移至行首
|i_<C-Home>|	<C-Home>	光标移至文件开头
|i_<End>|	<End>		光标移至行尾
|i_<C-End>|	<C-End>		光标移至文件末尾
|i_<PageUp>|	<PageUp>	向后翻一屏
|i_<PageDown>|	<PageDown>	向前翻一屏
|i_<F1>|	<F1>		同<Help>
|i_<Help>|	<Help>		停止插入模式并显示帮助窗口
|i_<Insert>|	<Insert>	切换插入/替换模式
|i_<LeftMouse>|	<LeftMouse>	光标移至鼠标点击处
|i_<ScrollWheelDown>|	<ScrollWheelDown>	窗口下移三行
|i_<S-ScrollWheelDown>|	<S-ScrollWheelDown>	窗口下移一页
|i_<ScrollWheelUp>|	<ScrollWheelUp>		窗口上移三行
|i_<S-ScrollWheelUp>|	<S-ScrollWheelUp>	窗口上移一页
|i_<ScrollWheelLeft>|	<ScrollWheelLeft>	窗口左移六列
|i_<S-ScrollWheelLeft>|	<S-ScrollWheelLeft>	窗口左移一页
|i_<ScrollWheelRight>|	<ScrollWheelRight>	窗口右移六列
|i_<S-ScrollWheelRight>| <S-ScrollWheelRight>	窗口右移一页

CTRL-X子模式下的命令				*i_CTRL-X_index*

|i_CTRL-X_CTRL-D|	CTRL-X CTRL-D	完成定义的标识符
|i_CTRL-X_CTRL-E|	CTRL-X CTRL-E	向上滚动
|i_CTRL-X_CTRL-F|	CTRL-X CTRL-F	完成文件名
|i_CTRL-X_CTRL-I|	CTRL-X CTRL-I	完成标识符
|i_CTRL-X_CTRL-K|	CTRL-X CTRL-K	从字典中完成标识符
|i_CTRL-X_CTRL-L|	CTRL-X CTRL-L	完成整行
|i_CTRL-X_CTRL-N|	CTRL-X CTRL-N	下一个完成
|i_CTRL-X_CTRL-O|	CTRL-X CTRL-O	全能完成
|i_CTRL-X_CTRL-P|	CTRL-X CTRL-P	上一个完成
|i_CTRL-X_CTRL-S|	CTRL-X CTRL-S	拼写建议
|i_CTRL-X_CTRL-T|	CTRL-X CTRL-T	从词库中完成标识符
|i_CTRL-X_CTRL-Y|	CTRL-X CTRL-Y	向下滚动
|i_CTRL-X_CTRL-U|	CTRL-X CTRL-U	使用'completefunc'完成
|i_CTRL-X_CTRL-V|	CTRL-X CTRL-V	像在:命令行中完成
|i_CTRL-X_CTRL-Z|	CTRL-X CTRL-Z	停止完成，保持文本不变
|i_CTRL-X_CTRL-]|	CTRL-X CTRL-]	完成标签
|i_CTRL-X_s|		CTRL-X s	拼写建议

完成模式下的命令（参见|popupmenu-keys|）

|complete_CTRL-E| CTRL-E	停止完成并返回原始文本
|complete_CTRL-Y| CTRL-Y	接受选定匹配并停止完成
		CTRL-L		从当前匹配中插入一个字符
		<CR>		插入当前选定的匹配
		<BS>		删除一个字符并重新搜索
		CTRL-H		同<BS>
		<Up>		选择上一个匹配
		<Down>		选择下一个匹配
		<PageUp>	选择向后几个条目的匹配
		<PageDown>	选择向前几个条目的匹配
		其他		停止完成并插入输入的字符

==============================================================================
2. 普通模式						*normal-index*

CHAR	 任何非空字符
WORD	 一串非空字符
N	 在命令前输入的数字
{motion} 光标移动命令
Nmove	 用{motion}移动的文本
SECTION	 可能以'}'而不是'{'开头的节

注意：1 = 光标移动命令；2 = 可撤销/重做

标签		字符	      注意 普通模式下的动作	~
------------------------------------------------------------------------------ ~
		CTRL-@		   未使用
|CTRL-A|	CTRL-A		2  在光标处/之后的数字上加N
|CTRL-B|	CTRL-B		1  向后滚动N屏
|CTRL-C|	CTRL-C		   中断当前（搜索）命令
|CTRL-D|	CTRL-D		   向下滚动N行（默认：半屏）
|CTRL-E|	CTRL-E		   向上滚动N行（N行额外）
|CTRL-F|	CTRL-F		1  向前滚动N屏
|CTRL-G|	CTRL-G		   显示当前文件名和位置
|<BS>|		<BS>		1  同"h"
|CTRL-H|	CTRL-H		1  同"h"
|<Tab>|		<Tab>		1  转到跳转列表中N个更新的条目
|CTRL-I|	CTRL-I		1  同<Tab>
|<NL>|		<NL>		1  同"j"
|<S-NL>|	<S-NL>		1  同CTRL-F
|CTRL-J|	CTRL-J		1  同"j"
		CTRL-K		   未使用
|CTRL-L|	CTRL-L		   重绘屏幕
|<CR>|		<CR>		1  光标移至下N行的第一个CHAR
|<S-CR>|	<S-CR>		1  同CTRL-F
|CTRL-M|	CTRL-M		1  同<CR>
|CTRL-N|	CTRL-N		1  同"j"
|CTRL-O|	CTRL-O		1  转到跳转列表中N个较旧的条目
|CTRL-P|	CTRL-P		1  同"k"
		CTRL-Q		   未使用，或用于终端控制流
|CTRL-R|	CTRL-R		2  重做用'u'撤销的更改
		CTRL-S		   未使用，或用于终端控制流
|CTRL-T|	CTRL-T		   跳转到标签列表中N个较旧的标签
|CTRL-U|	CTRL-U		   向上滚动N行（默认：半屏）
|CTRL-V|	CTRL-V		   启动块可视模式
|CTRL-W|	CTRL-W {char}	   窗口命令，参见|CTRL-W|
|CTRL-X|	CTRL-X		2  在光标处/之后的数字上减N
|CTRL-Y|	CTRL-Y		   向下滚动N行
|CTRL-Z|	CTRL-Z		   挂起程序（或启动新shell）
		CTRL-[ <Esc>	   未使用
|CTRL-\_CTRL-N|	CTRL-\ CTRL-N	   进入普通模式（无操作）
|CTRL-\_CTRL-G|	CTRL-\ CTRL-G	   进入普通模式（无操作）
		CTRL-\ a - z	   保留用于扩展
		CTRL-\ others	   未使用
|CTRL-]|	CTRL-]		   :ta到光标下的标识符
|CTRL-^|	CTRL-^		   编辑第N个备用文件（等同于":e #N"）
|CTRL-<Tab>|	CTRL-<Tab>	   同`g<Tab>`：转到最后访问的标签页
		CTRL-_		   未使用

|<Space>|	<Space>		1  同"l"
|!|		!{motion}{filter}
				2  通过{filter}命令过滤Nmove文本
|!!|		!!{filter}	2  通过{filter}命令过滤N行
|quote|		"{register}	   使用{register}进行下次删除、复制或粘贴
				   （{.%#:}仅用于粘贴）
|#|		#		1  向后搜索光标下标识符的第N次出现
|$|		$		1  光标移至第N个下一行的末尾
|%|		%		1  在本行查找下一个（花括号/方括号）并转到其匹配项，或转到匹配的注释括号，或转到匹配的预处理指令。
|N%|		{count}%	1  转到文件的N百分比
|&|		&		2  重复上次:s
|'|		'{a-zA-Z0-9}	1  光标移至标记{a-zA-Z0-9}所在行的第一个CHAR
|''|		''		1  光标移至标记所在行的第一个CHAR
				   光标在最近跳转之前的位置。
|'(|		'(		1  光标移至当前句子开头行的第一个字符
|')|		')		1  光标移至当前句子结尾行的第一个字符
|'<|		'<		1  光标移至当前缓冲区中高亮区域开始/开始的行的第一个字符。
|'>|		'>		1  光标移至当前缓冲区中高亮区域结束/结束的行的第一个字符。
|'[|		'[		1  光标移至最后操作文本或粘贴文本开始行的第一个字符
|']|		']		1  光标移至最后操作文本或粘贴文本结束行的第一个字符
|'{|		'{		1  光标移至当前段落开头行的第一个字符
|'}|		'}		1  光标移至当前段落结尾行的第一个字符
|(|		(		1  光标向后移动N个句子
|)|		)		1  光标向前移动N个句子
|star|		*		1  向前搜索光标下标识符的第N次出现
|+|		+		1  同<CR>
|<S-Plus>|	<S-+>		1  同CTRL-F
|,|		,		1  反方向重复最近的f, t, F或T N次
|-|		-		1  光标移至上N行的第一个字符
|<S-Minus>|	<S-->		1  同CTRL-B
|.|		.		2  用N替换计数重复上次更改
|/|		/{pattern}<CR>	1  向前搜索{pattern}的第N次出现
|/<CR>|		/<CR>		1  向前搜索上次搜索的{pattern}
|0|		0		1  光标移至行首第一个字符
|count|		1		   在命令前加上计数
|count|		2			"
|count|		3			"
|count|		4			"
|count|		5			"
|count|		6			"
|count|		7			"
|count|		8			"
|count|		9			"
|:|		:		1  开始输入Ex命令
|N:|		{count}:	   开始输入Ex命令，范围从当前行到下N-1行
|;|		;		1  重复最近的f, t, F或T N次
|<|		<{motion}	2  将Nmove行左移一个'shiftwidth'
|<<|		<<		2  将N行左移一个'shiftwidth'
|=|		={motion}	2  通过"indent"过滤Nmove行
|==|		==		2  通过"indent"过滤N行
|>|		>{motion}	2  将Nmove行右移一个'shiftwidth'
|>>|		>>		2  将N行右移一个'shiftwidth'
|?|		?{pattern}<CR>	1  向后搜索{pattern}的第N次出现
|?<CR>|		?<CR>		1  向后搜索上次搜索的{pattern}
|@|		@{a-z}		2  执行寄存器{a-z}的内容N次
|@:|		@:		   重复上次":"命令N次
|@@|		@@		2  重复上次@{a-z} N次
|A|		A		2  在行尾追加文本N次
|B|		B		1  光标向后移动N个单词
|C|		["x]C		2  从光标位置更改到行尾，并再更改N-1行[到寄存器x]；"c$"的同义词
|D|		["x]D		2  删除光标下的字符直到行尾，并再删除N-1行[到寄存器x]；"d$"的同义词
|E|		E		1  光标向前移动到单词N的结尾
|F|		F{char}		1  光标移至左侧第N次出现的{char}
|G|		G		1  光标移至第N行，默认最后一行
|H|		H		1  光标移至屏幕顶部第N行
|I|		I		2  在行首第一个字符前插入文本N次
|J|		J		2  合并N行；默认是2
|K|		K		   用'keywordprg'查找光标下的关键字
|L|		L		1  光标移至屏幕底部第N行
|M|		M		1  光标移至屏幕中间行
|N|		N		1  反方向重复最近的'/'或'?' N次
|O|		O		2  在光标上方开始新行并插入文本，重复N次
|P|		["x]P		2  在光标前粘贴[来自寄存器x]的文本N次
|R|		R		2  进入替换模式：覆盖现有字符，重复输入的文本N-1次
|S|		["x]S		2  删除N行[到寄存器x]并开始插入；"cc"的同义词。
|T|		T{char}		1  光标移至左侧第N次出现的{char}之后
|U|		U		2  撤销一行上的所有最新更改
|V|		V		   启动行可视模式
|W|		W		1  光标向前移动N个单词
|X|		["x]X		2  删除光标前的N个字符[到寄存器x]
|Y|		["x]Y		   复制N行[到寄存器x]；"yy"的同义词
				   注意：默认映射为"y$"。|default-mappings|
|ZZ|		ZZ		   如果缓冲区已更改则写入并关闭窗口
|ZQ|		ZQ		   不写入关闭窗口
|[|		[{char}		   方括号命令（参见|[|下文）
		\		   未使用
|]|		]{char}		   方括号命令（参见|]|下文）
|^|		^		1  光标移至行首第一个字符
|_|		_		1  光标移至下N-1行的第一个字符
|`|		`{a-zA-Z0-9}	1  光标移至标记{a-zA-Z0-9}
|`(|		`(		1  光标移至当前句子开头
|`)|		`)		1  光标移至当前句子结尾
|`<|		`<		1  光标移至高亮区域开始
|`>|		`>		1  光标移至高亮区域结束
|`[|		`[		1  光标移至最后操作文本或粘贴文本开始
|`]|		`]		1  光标移至最后操作文本或粘贴文本结束
|``|		"``"		1  光标移至最近跳转之前的位置
|`{|		`{		1  光标移至当前段落开头
|`}|		`}		1  光标移至当前段落结尾
|a|		a		2  在光标后追加文本N次
|b|		b		1  光标向后移动N个单词
|c|		["x]c{motion}	2  删除Nmove文本[到寄存器x]并开始插入
|cc|		["x]cc		2  删除N行[到寄存器x]并开始插入
|d|		["x]d{motion}	2  删除Nmove文本[到寄存器x]
|dd|		["x]dd		2  删除N行[到寄存器x]
|do|		do		2  同":diffget"
|dp|		dp		2  同":diffput"
|e|		e		1  光标向前移动到单词N的结尾
|f|		f{char}		1  光标移至右侧第N次出现的{char}
|g|		g{char}		   扩展命令，参见|g|下文
|h|		h		1  光标向左移动N个字符
|i|		i		2  在光标前插入文本N次
|j|		j		1  光标向下移动N行
|k|		k		1  光标向上移动N行
|l|		l		1  光标向右移动N个字符
|m|		m{A-Za-z}	   在光标位置设置标记{A-Za-z}
|n|		n		1  重复最近的'/'或'?' N次
|o|		o		2  在光标下方开始新行并插入文本，重复N次
|p|		["x]p		2  在光标后粘贴[来自寄存器x]的文本N次
|q|		q{0-9a-zA-Z"}	   记录输入的字符到命名寄存器{0-9a-zA-Z"}（大写追加）
|q|		q		   （录制时）停止录制
|Q|		Q		2  重放最后录制的寄存器
|q:|		q:		   在命令行窗口编辑:命令行
|q/|		q/		   在命令行窗口编辑/命令行
|q?|		q?		   在命令行窗口编辑?命令行
|r|		r{char}		2  用{char}替换N个字符
|s|		["x]s		2  （替换）删除N个字符[到寄存器x]并开始插入
|t|		t{char}		1  光标移至右侧第N次出现的{char}之前
|u|		u		2  撤销更改
|v|		v		   启动字符可视模式
|w|		w		1  光标向前移动N个单词
|x|		["x]x		2  删除光标下和之后的N个字符[到寄存器x]
|y|		["x]y{motion}	   复制Nmove文本[到寄存器x]
|yy|		["x]yy		   复制N行[到寄存器x]
|z|		z{char}		   以'z'开头的命令，参见|z|下文
|{|		{		1  光标向后移动N个段落
|bar|		|		1  光标移至第N列
|}|		}		1  光标向前移动N个段落
|~|		~		2  'tildeop'关闭：切换光标下N个字符的大小写并将光标右移N个字符
|~|		~{motion}	   'tildeop'打开：切换Nmove文本的大小写
|<C-End>|	<C-End>		1  同"G"
|<C-Home>|	<C-Home>	1  同"gg"
|<C-Left>|	<C-Left>	1  同"b"
|<C-LeftMouse>|	<C-LeftMouse>	   ":ta"到鼠标点击处的关键字
|<C-Right>|	<C-Right>	1  同"w"
|<C-RightMouse>| <C-RightMouse>	   同"CTRL-T"
|<C-Tab>|	<C-Tab>		   同"g<Tab>"
|<Del>|		["x]<Del>	2  同"x"
|N<Del>|	{count}<Del>	   从{count}中移除最后一个数字
|<Down>|	<Down>		1  同"j"
|<End>|		<End>		1  同"$"
|<F1>|		<F1>		   同<Help>
|<Help>|	<Help>		   打开帮助窗口
|<Home>|	<Home>		1  同"0"
|<Insert>|	<Insert>	2  同"i"
|<Left>|	<Left>		1  同"h"
|<LeftMouse>|	<LeftMouse>	1  将光标移至鼠标点击位置
|<MiddleMouse>|	<MiddleMouse>	2  同"gP"在鼠标点击位置
|<PageDown>|	<PageDown>	   同CTRL-F
|<PageUp>|	<PageUp>	   同CTRL-B
|<Right>|	<Right>		1  同"l"
|<RightMouse>|	<RightMouse>	   启动可视模式，将光标移至鼠标点击位置
|<S-Down>|	<S-Down>	1  同CTRL-F
|<S-Left>|	<S-Left>	1  同"b"
|<S-LeftMouse>|	<S-LeftMouse>	   同"*"在鼠标点击位置
|<S-Right>|	<S-Right>	1  同"w"
|<S-RightMouse>| <S-RightMouse>	   同"#"在鼠标点击位置
|<S-Up>|	<S-Up>		1  同CTRL-B
|<Undo>|	<Undo>		2  同"u"
|<Up>|		<Up>		1  同"k"
*<ScrollWheelDown>*	<ScrollWheelDown>	窗口下移三行
*<S-ScrollWheelDown>*	<S-ScrollWheelDown>	窗口下移一页
*<ScrollWheelUp>*	<ScrollWheelUp>		窗口上移三行
*<S-ScrollWheelUp>*	<S-ScrollWheelUp>	窗口上移一页
*<ScrollWheelLeft>*	<ScrollWheelLeft>	窗口左移六列
*<S-ScrollWheelLeft>*	<S-ScrollWheelLeft>	窗口左移一页
*<ScrollWheelRight>*	<ScrollWheelRight>	窗口右移六列
*<S-ScrollWheelRight>*	<S-ScrollWheelRight>	窗口右移一页

==============================================================================
2.1 文本对象						*objects*

这些可以在操作符之后或在可视模式中使用以选择对象。

标签		命令		   操作符挂起和可视模式下的动作	~
------------------------------------------------------------------------------ ~
|v_aquote|	a"		   双引号字符串
|v_a'|		a'		   单引号字符串
|v_a(|		a(		   同ab
|v_a)|		a)		   同ab
|v_a<|		a<		   "a <>"从'<'到匹配的'>'
|v_a>|		a>		   同a<
|v_aB|		aB		   "a Block"从`[{`到`]}`（带括号）
|v_aW|		aW		   "a WORD"（带空格）
|v_a[|		a[		   "a []"从'['到匹配的']'
|v_a]|		a]		   同a[
|v_a`|		a`		   反引号中的字符串
|v_ab|		ab		   "a block"从"[("到"])"（带大括号）
|v_ap|		ap		   "a paragraph"（带空格）
|v_as|		as		   "a sentence"（带空格）
|v_at|		at		   "a tag block"（带空格）
|v_aw|		aw		   "a word"（带空格）
|v_a{|		a{		   同aB
|v_a}|		a}		   同aB
|v_iquote|	i"		   不带引号的双引号字符串
|v_i'|		i'		   不带引号的单引号字符串
|v_i(|		i(		   同ib
|v_i)|		i)		   同ib
|v_i<|		i<		   "inner <>"从'<'到匹配的'>'
|v_i>|		i>		   同i<
|v_iB|		iB		   "inner Block"从`[{`和`]}`
|v_iW|		iW		   "inner WORD"
|v_i[|		i[		   "内[]"，从'['到匹配的']'
|v_i]|		i]		   同i[
|v_i`|		i`		   反引号中的字符串，不含反引号
|v_ib|		ib		   "内块"，从"[("到"])"
|v_ip|		ip		   "内段落"
|v_is|		is		   "内句子"
|v_it|		it		   "内标签块"
|v_iw|		iw		   "内单词"
|v_i{|		i{		   同iB
|v_i}|		i}		   同iB

==============================================================================
2.2 窗口命令						*CTRL-W*

标签		命令		   普通模式下的动作	~
------------------------------------------------------------------------------ ~
|CTRL-W_CTRL-B|	CTRL-W CTRL-B	   同"CTRL-W b"
|CTRL-W_CTRL-C|	CTRL-W CTRL-C	   同"CTRL-W c"
|CTRL-W_CTRL-D|	CTRL-W CTRL-D	   同"CTRL-W d"
|CTRL-W_CTRL-F|	CTRL-W CTRL-F	   同"CTRL-W f"
		CTRL-W CTRL-G	   同"CTRL-W g .."
|CTRL-W_CTRL-H|	CTRL-W CTRL-H	   同"CTRL-W h"
|CTRL-W_CTRL-I|	CTRL-W CTRL-I	   同"CTRL-W i"
|CTRL-W_CTRL-J|	CTRL-W CTRL-J	   同"CTRL-W j"
|CTRL-W_CTRL-K|	CTRL-W CTRL-K	   同"CTRL-W k"
|CTRL-W_CTRL-L|	CTRL-W CTRL-L	   同"CTRL-W l"
|CTRL-W_CTRL-N|	CTRL-W CTRL-N	   同"CTRL-W n"
|CTRL-W_CTRL-O|	CTRL-W CTRL-O	   同"CTRL-W o"
|CTRL-W_CTRL-P|	CTRL-W CTRL-P	   同"CTRL-W p"
|CTRL-W_CTRL-Q|	CTRL-W CTRL-Q	   同"CTRL-W q"
|CTRL-W_CTRL-R|	CTRL-W CTRL-R	   同"CTRL-W r"
|CTRL-W_CTRL-S|	CTRL-W CTRL-S	   同"CTRL-W s"
|CTRL-W_CTRL-T|	CTRL-W CTRL-T	   同"CTRL-W t"
|CTRL-W_CTRL-V|	CTRL-W CTRL-V	   同"CTRL-W v"
|CTRL-W_CTRL-W|	CTRL-W CTRL-W	   同"CTRL-W w"
|CTRL-W_CTRL-X|	CTRL-W CTRL-X	   同"CTRL-W x"
|CTRL-W_CTRL-Z|	CTRL-W CTRL-Z	   同"CTRL-W z"
|CTRL-W_CTRL-]|	CTRL-W CTRL-]	   同"CTRL-W ]"
|CTRL-W_CTRL-^|	CTRL-W CTRL-^	   同"CTRL-W ^"
|CTRL-W_CTRL-_|	CTRL-W CTRL-_	   同"CTRL-W _"
|CTRL-W_+|	CTRL-W +	   增加当前窗口高度N行
|CTRL-W_-|	CTRL-W -	   减少当前窗口高度N行
|CTRL-W_<|	CTRL-W <	   减少当前窗口宽度N列
|CTRL-W_=|	CTRL-W =	   使所有窗口高度和宽度相同
|CTRL-W_>|	CTRL-W >	   增加当前窗口宽度N列
|CTRL-W_H|	CTRL-W H	   将当前窗口移至最左侧
|CTRL-W_J|	CTRL-W J	   将当前窗口移至最底部
|CTRL-W_K|	CTRL-W K	   将当前窗口移至最顶部
|CTRL-W_L|	CTRL-W L	   将当前窗口移至最右侧
|CTRL-W_P|	CTRL-W P	   转到预览窗口
|CTRL-W_R|	CTRL-W R	   向上旋转窗口N次
|CTRL-W_S|	CTRL-W S	   同"CTRL-W s"
|CTRL-W_T|	CTRL-W T	   将当前窗口移至新标签页
|CTRL-W_W|	CTRL-W W	   转到N个前一个窗口（循环）
|CTRL-W_]|	CTRL-W ]	   分割窗口并跳转到光标下的标签
|CTRL-W_^|	CTRL-W ^	   分割当前窗口并编辑备用文件N
|CTRL-W__|	CTRL-W _	   将当前窗口高度设置为N（默认：非常高）
|CTRL-W_b|	CTRL-W b	   转到底部窗口
|CTRL-W_c|	CTRL-W c	   关闭当前窗口（如|:close|）
|CTRL-W_d|	CTRL-W d	   分割窗口并跳转到光标下的定义
|CTRL-W_f|	CTRL-W f	   分割窗口并编辑光标下的文件名
|CTRL-W_F|	CTRL-W F	   分割窗口并编辑光标下的文件名并跳转到文件名后的行号。
|CTRL-W_g_CTRL-]| CTRL-W g CTRL-]  分割窗口并对光标下的标签执行|:tjump|
|CTRL-W_g]|	CTRL-W g ]	   分割窗口并对光标下的标签执行|:tselect|
|CTRL-W_g}|	CTRL-W g }	   对光标下的标签执行|:ptjump|
|CTRL-W_gf|	CTRL-W g f	   在新标签页中编辑光标下的文件名
|CTRL-W_gF|	CTRL-W g F	   在新标签页中编辑光标下的文件名并跳转到文件名后的行号。
|CTRL-W_gt|	CTRL-W g t	   同`gt`：转到下一个标签页
|CTRL-W_gT|	CTRL-W g T	   同`gT`：转到上一个标签页
|CTRL-W_g<Tab>|	CTRL-W g <Tab>	   同|g<Tab>|：转到最后访问的标签页
|CTRL-W_h|	CTRL-W h	   转到第N个左侧窗口（停在第一个窗口）
|CTRL-W_i|	CTRL-W i	   分割窗口并跳转到光标下标识符的声明
|CTRL-W_j|	CTRL-W j	   向下移动N个窗口（停在最后一个窗口）
|CTRL-W_k|	CTRL-W k	   向上移动N个窗口（停在第一个窗口）
|CTRL-W_l|	CTRL-W l	   转到第N个右侧窗口（停在最后一个窗口）
|CTRL-W_n|	CTRL-W n	   打开新窗口，高N行
|CTRL-W_o|	CTRL-W o	   关闭除当前窗口外的所有窗口（如|:only|）
|CTRL-W_p|	CTRL-W p	   转到上一个（最后访问的）窗口
|CTRL-W_q|	CTRL-W q	   退出当前窗口（如|:quit|）
|CTRL-W_r|	CTRL-W r	   向下旋转窗口N次
|CTRL-W_s|	CTRL-W s	   将当前窗口分为两部分，新窗口高N行
|CTRL-W_t|	CTRL-W t	   转到顶部窗口
|CTRL-W_v|	CTRL-W v	   垂直分割当前窗口，新窗口宽N列
|CTRL-W_w|	CTRL-W w	   转到N个下一个窗口（循环）
|CTRL-W_x|	CTRL-W x	   交换当前窗口与窗口N（默认：下一个窗口）
|CTRL-W_z|	CTRL-W z	   关闭预览窗口
|CTRL-W_bar|	CTRL-W |	   将窗口宽度设置为N列
|CTRL-W_}|	CTRL-W }	   在预览窗口中显示光标下的标签
|CTRL-W_<Down>|	CTRL-W <Down>	   同"CTRL-W j"
|CTRL-W_<Up>|	CTRL-W <Up>	   同"CTRL-W k"
|CTRL-W_<Left>|	CTRL-W <Left>	   同"CTRL-W h"
|CTRL-W_<Right>| CTRL-W <Right>	   同"CTRL-W l"

==============================================================================
2.3 方括号命令					*[* *]*

标签		字符	      注意 普通模式下的动作	~
------------------------------------------------------------------------------ ~
|[_CTRL-D|	[ CTRL-D	   跳转到当前和包含文件中匹配光标下单词的第一个#define，开始在当前文件开头搜索
|[_CTRL-I|	[ CTRL-I	   跳转到当前和包含文件中包含光标下单词的第一行，开始在当前文件开头搜索
|[#|		[#		1  光标移至N个前一个未匹配的#if, #else或#ifdef
|['|		['		1  光标移至上一个小写标记，位于第一个非空白处
|[(|		[(		1  光标N次向后移动到未匹配的'('
|[star|		[*		1  同"[/"
|[`|		[`		1  光标移至上一个小写标记
|[/|		[/		1  光标移至N个前一个C注释的开始
|[D|		[D		   列出当前和包含文件中匹配光标下单词的所有#define，开始在当前文件开头搜索
|[I|		[I		   列出当前和包含文件中包含光标下单词的所有行，开始在当前文件开头搜索
|[P|		[P		2  同"[p"
|[[|		[[		1  光标N个节向后移动
|[]|		[]		1  光标N个SECTION向后移动
|[c|		[c		1  光标N次向后移动到更改的开始
|[d|		[d		   显示当前和包含文件中匹配光标下单词的第一个#define，开始在当前文件开头搜索
|[f|		[f		   同"gf"
|[i|		[i		   显示当前和包含文件中包含光标下单词的第一行，开始在当前文件开头搜索
|[m|		[m		1  光标N次向后移动到成员函数的开始
|[p|		[p		2  类似"P"，但调整缩进到当前行
|[s|		[s		1  移动到上一个拼写错误的单词
|[z|		[z		1  移动到打开折叠的开始
|[{|		[{		1  光标N次向后移动到未匹配的'{'
|[<MiddleMouse>| [<MiddleMouse>	2  同"[p"

|]_CTRL-D|	] CTRL-D	   跳转到当前和包含文件中匹配光标下单词的第一个#define，开始在光标位置搜索
|]_CTRL-I|	] CTRL-I	   跳转到当前和包含文件中包含光标下单词的第一行，开始在光标位置搜索
|]#|		]#		1  光标移至N个下一个未匹配的#endif或#else
|]'|		]'		1  光标移至下一个小写标记，位于第一个非空白处
|])|		])		1  光标N次向前移动到未匹配的')'
|]star|		]*		1  同"]/"
|]`|		]`		1  光标移至下一个小写标记
|]/|		]/		1  光标移至N个下一个C注释的结尾
|]D|		]D		   列出当前和包含文件中匹配光标下单词的所有#define，开始在光标位置搜索
|]I|		]I		   列出当前和包含文件中包含光标下单词的所有行，开始在光标位置搜索
|]P|		]P		2  同"[p"
|][|		][		1  光标N个SECTION向前移动
|]]|		]]		1  光标N个节向前移动
|]c|		]c		1  光标N次向前移动到更改的开始
|]d|		]d		   显示当前和包含文件中匹配光标下单词的第一个#define，开始在光标位置搜索
|]f|		]f		   同"gf"
|]i|		]i		   显示当前和包含文件中包含光标下单词的第一行，开始在光标位置搜索
|]m|		]m		1  光标N次向前移动到成员函数的结尾
|]p|		]p		2  类似"p"，但调整缩进到当前行
|]s|		]s		1  移动到下一个拼写错误的单词
|]z|		]z		1  移动到打开折叠的结尾
|]}|		]}		1  光标N次向前移动到未匹配的'}'
|]<MiddleMouse>| ]<MiddleMouse>	2  同"]p"

==============================================================================
2.4 以'g'开头的命令						*g*

标签		字符	      注意 普通模式下的动作	~
------------------------------------------------------------------------------ ~
|g_CTRL-G|	g CTRL-G	   显示当前光标位置的信息
|g_CTRL-H|	g CTRL-H	   启动选择块模式
|g_CTRL-]|	g CTRL-]	   |:tjump|到光标下的标签
|g#|		g#		1  类似"#"，但不使用"\<"和"\>"
|g$|		g$		1  当'wrap'关闭时，移至屏幕上当前行的最右字符；当'wrap'打开时，移至当前屏幕行的最右字符
|g&|		g&		2  在所有行上重复上次的":s"
|g'|		g'{mark}	1  类似|'|但不更改跳转列表
|g`|		g`{mark}	1  类似|`|但不更改跳转列表
|gstar|		g*		1  类似"*"，但不使用"\<"和"\>"
|g+|		g+		   移至较新的文本状态N次
|g,|		g,		1  移至更改列表中较新的位置N次
|g-|		g-		   移至较旧的文本状态N次
|g0|		g0		1  当'wrap'关闭时，移至屏幕上当前行的最左字符；当'wrap'打开时，移至当前屏幕行的最左字符
|g8|		g8		   打印光标下UTF-8字符使用的字节的十六进制值
|g;|		g;		1  移至更改列表中较旧的位置N次
|g<|		g<		   显示上一个命令输出
|g?|		g?		2  Rot13编码操作符
|g?g?|		g??		2  Rot13编码当前行
|g?g?|		g?g?		2  Rot13编码当前行
|gD|		gD		1  移至当前文件中光标下单词的定义
|gE|		gE		1  向后移动到上一个WORD的结尾
|gH|		gH		   启动选择行模式
|gI|		gI		2  类似"I"，但总是从第1列开始
|gJ|		gJ		2  合并行而不插入空格
|gN|		gN	      1,2  查找上一个使用的搜索模式的匹配项并以可视方式选择它
|gP|		["x]gP		2  在光标前粘贴[来自寄存器x]的文本N次，光标停在其后
|gQ|		gQ		   切换到"Ex"模式进行Vim编辑
|gR|		gR		2  进入虚拟替换模式
|gT|		gT		   转到上一个标签页
|gU|		gU{motion}	2  将Nmove文本转换为大写
|gV|		gV		   执行映射或菜单时不重新选择上一个可视区域
|g]|		g]		   对光标下的标签执行:tselect
|g^|		g^		1  当'wrap'关闭时，转到当前行在屏幕上最左侧的非空白字符；当'wrap'打开时，转到当前屏幕行最左侧的非空白字符
|g_|		g_		1  光标移动到向下N-1行的最后一个字符
|ga|		ga		打印光标下字符的ASCII值
|gd|		gd		1  转到当前函数中光标下单词的定义
|ge|		ge		1  向后转到前一个单词的末尾
|gf|		gf		开始编辑光标下的文件名
|gF|		gF		开始编辑光标下的文件名并跳转到文件名后的行号
|gg|		gg		1  光标移动到第N行，默认为第一行
|gh|		gh		开始选择模式
|gi|		gi		2  类似于"i"，但首先移动到|'^|标记
|gj|		gj		1  类似于"j"，但当'wrap'打开时向下移动N个屏幕行
|gk|		gk		1  类似于"k"，但当'wrap'打开时向上移动N个屏幕行
|gm|		gm		1  转到屏幕行中间的字符
|gM|		gM		1  转到文本行中间的字符
|gn|		gn	      1,2  使用最后使用的搜索模式查找下一个匹配项并可视选择它
|go|		go		1  光标移动到缓冲区中的第N个字节
|gp|		["x]gp		2  将文本[从寄存器x]放在光标后N次，将光标留在其后
|gq|		gq{motion}	2  格式化Nmove文本
|gr|		gr{char}	2  用{char}虚拟替换N个字符
|gs|		gs		休眠N秒（默认为1）
|gt|		gt		转到下一个标签页
|gu|		gu{motion}	2  将Nmove文本转换为小写
|gv|		gv		重新选择之前可视区域
|gw|		gw{motion}	2  格式化Nmove文本并保持光标位置
|gx|		gx		执行光标下文件路径的应用程序
|g@|		g@{motion}	调用'operatorfunc'
|g~|		g~{motion}	2  交换Nmove文本的大小写
|g<Down>|	g<Down>		1  与"gj"相同
|g<End>|	g<End>		1  与"g$"相同
|g<Home>|	g<Home>		1  与"g0"相同
|g<LeftMouse>|	g<LeftMouse>	与<C-LeftMouse>相同
		g<MiddleMouse>	与<C-MiddleMouse>相同
|g<RightMouse>|	g<RightMouse>	与<C-RightMouse>相同
|g<Tab>|	g<Tab>		转到最后访问的标签页
|g<Up>|		g<Up>		1  与"gk"相同

==============================================================================
2.5 以'z'开头的命令						*z*

标签		字符	     备注 普通模式下的动作	~
------------------------------------------------------------------------------ ~
|z<CR>|		z<CR>		重绘，光标行到窗口顶部，光标在第一个非空白处
|zN<CR>|	z{height}<CR>	重绘，使窗口{height}行高
|z+|		z+		光标在第N行（默认为窗口下方的行），否则与"z<CR>"相同
|z-|		z-		重绘，光标行在窗口底部，光标在第一个非空白处
|z.|		z.		重绘，光标行到窗口中心，光标在第一个非空白处
|z=|		z=		给出拼写建议
|zA|		zA		递归打开关闭的折叠或关闭打开的折叠
|zC|		zC		递归关闭折叠
|zD|		zD		递归删除折叠
|zE|		zE		消除所有折叠
|zF|		zF		为N行创建折叠
|zG|		zG		临时将单词标记为正确拼写
|zH|		zH		当'wrap'关闭时向右滚动半个屏幕宽度
|zL|		zL		当'wrap'关闭时向左滚动半个屏幕宽度
|zM|		zM		将'foldlevel'设置为零
|zN|		zN		设置'foldenable'
|zO|		zO		递归打开折叠
|zR|		zR		将'foldlevel'设置为最深的折叠
|zW|		zW		临时将单词标记为错误拼写
|zX|		zX		重新应用'foldlevel'
|z^|		z^		光标在第N行（默认为窗口上方的行），否则与"z-"相同
|za|		za		打开关闭的折叠，关闭打开的折叠
|zb|		zb		重绘，光标行在窗口底部
|zc|		zc		关闭折叠
|zd|		zd		删除折叠
|ze|		ze		当'wrap'关闭时水平滚动，使光标位于屏幕末端（右侧）
|zf|		zf{motion}	为Nmove文本创建折叠
|zg|		zg		永久将单词标记为正确拼写
|zh|		zh		当'wrap'关闭时向右滚动N个字符
|zi|		zi		切换'foldenable'
|zj|		zj		1  移动到下一个折叠的开始
|zk|		zk		1  移动到上一个折叠的末尾
|zl|		zl		当'wrap'关闭时向左滚动N个字符
|zm|		zm		从'foldlevel'中减去1
|zn|		zn		重置'foldenable'
|zo|		zo		打开折叠
|zp|		zp		以块模式粘贴，不带尾随空格
|zP|		zP		以块模式粘贴，不带尾随空格
|zr|		zr		将'foldlevel'加1
|zs|		zs		当'wrap'关闭时水平滚动，使光标位于屏幕开始（左侧）
|zt|		zt		重绘，光标行在窗口顶部
|zuw|		zuw		撤销|zw|
|zug|		zug		撤销|zg|
|zuW|		zuW		撤销|zW|
|zuG|		zuG		撤销|zG|
|zv|		zv		打开足够的折叠以查看光标行
|zw|		zw		永久将单词标记为错误拼写
|zx|		zx		重新应用'foldlevel'并执行"zv"
|zy|		zy		拉取不带尾随空格
|zz|		zz		重绘，光标行在窗口中心
|z<Left>|	z<Left>		与"zh"相同
|z<Right>|	z<Right>	与"zl"相同

==============================================================================
2.6 操作符待决模式			*operator-pending-index*

这些可以在操作符之后使用，但在输入{motion}之前。

标签		字符		操作符待决模式下的动作	~
------------------------------------------------------------------------------ ~
|o_v|		v		强制操作符以字符方式工作
|o_V|		V		强制操作符以行方式工作
|o_CTRL-V|	CTRL-V		强制操作符以块方式工作

==============================================================================
3. 可视模式						*visual-index*

可视模式中的大多数命令与普通模式相同。这里列出的是不同的命令。

标签		命令	     备注 可视模式下的动作	~
------------------------------------------------------------------------------ ~
|v_CTRL-\_CTRL-N| CTRL-\ CTRL-N	停止可视模式
|v_CTRL-\_CTRL-G| CTRL-\ CTRL-G	进入普通模式
|v_CTRL-A|	CTRL-A		2  在高亮文本中的数字上加N
|v_CTRL-C|	CTRL-C		停止可视模式
------------------------------------------------------------------------------ ~
|v_CTRL-\_CTRL-N| CTRL-\ CTRL-N	   stop Visual mode
|v_CTRL-\_CTRL-G| CTRL-\ CTRL-G	   go to Normal mode
|v_CTRL-A|	CTRL-A		2  add N to number in highlighted text
|v_CTRL-C|	CTRL-C		   stop Visual mode
||v_CTRL-G|	CTRL-G		   在可视模式和选择模式之间切换
|v_<BS>|	<BS>		2  选择模式：删除高亮区域
|v_CTRL-H|	CTRL-H		2  同<BS>
|v_CTRL-O|	CTRL-O		   从选择模式切换到可视模式执行一个命令
|v_CTRL-V|	CTRL-V		   使可视模式变为块状或停止可视模式
|v_CTRL-X|	CTRL-X		2  从高亮文本中的数字中减去N
|v_<Esc>|	<Esc>		   停止可视模式
|v_CTRL-]|	CTRL-]		   跳转到高亮标签
|v_!|		!{filter}	2  通过外部命令{filter}过滤高亮行
|v_:|		:		   以高亮行作为范围开始命令行
|v_<|		<		2  将高亮行左移一个'shiftwidth'
|v_=|		=		2  通过'equalprg'选项给定的外部程序过滤高亮行
|v_>|		>		2  将高亮行右移一个'shiftwidth'
|v_b_A|		A		2  块模式：在所有行的高亮区域后追加相同文本
|v_C|		C		2  删除高亮行并开始插入
|v_D|		D		2  删除高亮行
|v_b_I|		I		2  块模式：在所有行的高亮区域前插入相同文本
|v_J|		J		2  合并高亮行
|v_K|		K		   在高亮区域上运行'keywordprg'
|v_O|		O		   水平移动到区域的另一个角
|v_P|		P		   用寄存器内容替换高亮区域；寄存器不变
|v_R|		R		2  删除高亮行并开始插入
|v_S|		S		2  删除高亮行并开始插入
|v_U|		U		2  将高亮区域转换为大写
|v_V|		V		   使可视模式变为行状或停止可视模式
|v_X|		X		2  删除高亮行
|v_Y|		Y		   复制高亮行
|v_aquote|	a"		   用双引号字符串扩展高亮区域
|v_a'|		a'		   用单引号字符串扩展高亮区域
|v_a(|		a(		   同ab
|v_a)|		a)		   同ab
|v_a<|		a<		   用<>块扩展高亮区域
|v_a>|		a>		   同a<
|v_aB|		aB		   用{}块扩展高亮区域
|v_aW|		aW		   用"a WORD"扩展高亮区域
|v_a[|		a[		   用[]块扩展高亮区域
|v_a]|		a]		   同a[
|v_a`|		a`		   用反引号字符串扩展高亮区域
|v_ab|		ab		   用()块扩展高亮区域
|v_ap|		ap		   用段落扩展高亮区域
|v_as|		as		   用句子扩展高亮区域
|v_at|		at		   用标签块扩展高亮区域
|v_aw|		aw		   用"a word"扩展高亮区域
|v_a{|		a{		   同aB
|v_a}|		a}		   同aB
|v_c|		c		2  删除高亮区域并开始插入
|v_d|		d		2  删除高亮区域
|v_g_CTRL-A|	g CTRL-A	2  在高亮文本中的数字上加N
|v_g_CTRL-X|	g CTRL-X	2  从高亮文本中的数字中减去N
|v_gJ|		gJ		2  合并高亮行而不插入空格
|v_gq|		gq		2  格式化高亮行
|v_gv|		gv		   交换当前和上一个高亮区域
|v_iquote|	i"		   用双引号字符串（不含引号）扩展高亮区域
|v_i'|		i'		   用单引号字符串（不含引号）扩展高亮区域
|v_i(|		i(		   同ib
|v_i)|		i)		   同ib
|v_i<|		i<		   用内<>块扩展高亮区域
|v_i>|		i>		   同i<
|v_iB|		iB		   用内{}块扩展高亮区域
|v_iW|		iW		   用"inner WORD"扩展高亮区域
|v_i[|		i[		   用内[]块扩展高亮区域
|v_i]|		i]		   同i[
|v_i`|		i`		   用反引号字符串（不含反引号）扩展高亮区域
|v_ib|		ib		   用内()块扩展高亮区域
|v_ip|		ip		   用内段落扩展高亮区域
|v_is|		is		   用内句子扩展高亮区域
|v_it|		it		   用内标签块扩展高亮区域
|v_iw|		iw		   用"inner word"扩展高亮区域
|v_i{|		i{		   同iB
|v_i}|		i}		   同iB
|v_o|		o		   将光标移动到区域的另一个角
|v_p|		p		   用寄存器内容替换高亮区域；删除的文本在未命名寄存器中
|v_r|		r		2  用字符替换高亮区域
|v_s|		s		2  删除高亮区域并开始插入
|v_u|		u		2  将高亮区域转换为小写
|v_v|		v		   使可视模式变为字符状或停止可视模式
|v_x|		x		2  删除高亮区域
|v_y|		y		   复制高亮区域
|v_~|		~		2  交换高亮区域的大小写

==============================================================================
4. 命令行编辑					*ex-edit-index*

使用':', '!', '/'或'?'命令进入命令行。
普通字符在当前光标位置插入。
下面的"完成"指的是上下文相关的完成。它将根据情况完成文件名、标签、命令等。

标签		命令		命令行编辑模式下的动作	~
------------------------------------------------------------------------------ ~
		CTRL-@		未使用
|c_CTRL-A|	CTRL-A		对光标前的模式进行完成并插入所有匹配项
|c_CTRL-B|	CTRL-B		光标移至命令行开头
|c_CTRL-C|	CTRL-C		同<Esc>
|c_CTRL-D|	CTRL-D		列出匹配光标前模式的完成项
|c_CTRL-E|	CTRL-E		光标移至命令行结尾
|'cedit'|	CTRL-F		'cedit'的默认值：打开命令行窗口；否则未使用
|c_CTRL-G|	CTRL-G		当'incsearch'激活时下一个匹配项
|c_<BS>|	<BS>		删除光标前的字符
|c_digraph|	{char1} <BS> {char2}
				当'digraph'打开时输入双字符
|c_CTRL-H|	CTRL-H		同<BS>
|c_<Tab>|	<Tab>		如果'wildchar'是<Tab>：对光标前的模式进行完成
|c_<S-Tab>|	<S-Tab>		同CTRL-P
|c_wildchar|	'wildchar'	对光标前的模式进行完成（默认：<Tab>）
|c_CTRL-I|	CTRL-I		同<Tab>
|c_<NL>|	<NL>		同<CR>
|c_CTRL-J|	CTRL-J		同<CR>
|c_CTRL-K|	CTRL-K {char1} {char2}
				输入双字符
|c_CTRL-L|	CTRL-L		对光标前的模式进行完成并插入最长的公共部分
|c_<CR>|	<CR>		执行输入的命令
|c_CTRL-M|	CTRL-M		同<CR>
|c_CTRL-N|	CTRL-N		在使用'wildchar'有多个匹配项后：转到下一个匹配项，否则：从历史记录中回忆较旧的命令行。
		CTRL-O		未使用
|c_CTRL-P|	CTRL-P		在使用'wildchar'有多个匹配项后：转到上一个匹配项，否则：从历史记录中回忆较旧的命令行。
|c_CTRL-Q|	CTRL-Q		同CTRL-V，除非用于终端控制流
|c_CTRL-R|	CTRL-R {regname}
				插入寄存器或光标下对象的内容，就像输入的一样
|c_CTRL-R_CTRL-R| CTRL-R CTRL-R {regname}
|c_CTRL-R_CTRL-O| CTRL-R CTRL-O {regname}
				字面插入寄存器或光标下对象的内容
		CTRL-S		未使用，或用于终端控制流
|c_CTRL-T|	CTRL-T		当'incsearch'激活时上一个匹配项
|c_CTRL-U|	CTRL-U		删除所有字符
|c_CTRL-V|	CTRL-V		字面插入下一个非数字字符，插入三位十进制数作为单个字节。
|c_CTRL-W|	CTRL-W		删除光标前的单词
		CTRL-X		未使用（保留用于完成）
		CTRL-Y		复制（复制）无模式选择
		CTRL-Z		未使用（保留用于挂起）
|c_<Esc>|	<Esc>		放弃命令行而不执行
|c_CTRL-[|	CTRL-[		同<Esc>
|c_CTRL-\_CTRL-N| CTRL-\ CTRL-N	进入普通模式，放弃命令行
|c_CTRL-\_CTRL-G| CTRL-\ CTRL-G	进入普通模式，放弃命令行
		CTRL-\ a - d	保留用于扩展
|c_CTRL-\_e|	CTRL-\ e {expr} 用{expr}的结果替换命令行
		CTRL-\ f - z	保留用于扩展
		CTRL-\ others	未使用
|c_CTRL-]|	CTRL-]		触发缩写
|c_CTRL-^|	CTRL-^		切换使用|:lmap|映射
|c_<Del>|	<Del>		删除光标下的字符

|c_<Left>|	<Left>		光标左移
|c_<S-Left>|	<S-Left>	光标左移一个单词
|c_<C-Left>|	<C-Left>	光标左移一个单词
|c_<Right>|	<Right>		光标右移
|c_<S-Right>|	<S-Right>	光标右移一个单词
|c_<C-Right>|	<C-Right>	光标右移一个单词
|c_<Up>|	<Up>		从历史记录中回忆匹配光标前模式的较旧命令行
|c_<S-Up>|	<S-Up>		从历史记录中回忆较旧命令行
|c_<Down>|	<Down>		从历史记录中回忆匹配光标前模式的较新命令行
|c_<S-Down>|	<S-Down>	从历史记录中回忆较新命令行
|c_<Home>|	<Home>		光标移至命令行开头
|c_<End>|	<End>		光标移至命令行结尾
|c_<PageDown>|	<PageDown>	同<S-Down>
|c_<PageUp>|	<PageUp>	同<S-Up>
|c_<Insert>|	<Insert>	切换插入/覆盖模式
|c_<LeftMouse>|	<LeftMouse>	光标移至鼠标点击处

wildmenu模式下的命令（参见'wildmenu'）

		<Up>		向上移动到父级
		<Down>		向下移动到子菜单
		<Left>		选择上一个匹配项
		<Right>		选择下一个匹配项
		<CR>		进行菜单完成时移动到子菜单
		CTRL-E		停止完成并返回原始文本
		CTRL-Y		接受选定匹配项并停止完成
		其他		停止完成并插入输入的字符

wildmenu模式下'wildoptions'设置为"pum"的命令

		<PageUp>	选择向后几个条目的匹配项
		<PageDown>	选择向前几个条目的匹配项

==============================================================================
5. 终端模式				*terminal-mode-index*

在|terminal|缓冲区中，除CTRL-\外的所有键都转发到终端作业。如果按下CTRL-\，下一个键会被转发，除非它是CTRL-N或CTRL-O。
使用|CTRL-\_CTRL-N|进入普通模式。
使用|t_CTRL-\_CTRL-O|执行一个普通模式命令，然后返回终端模式。

你找到了，亚瑟！				*holy-grail*

==============================================================================
6. EX命令				*Ex-commands* *ex-cmd-index* *:index*

这是所有":"命令的简要但完整的列表，不提及任何参数。命令名称的可选部分在[]内。
命令按名称的不可选部分排序。

标签		命令		动作 ~
------------------------------------------------------------------------------ ~
|:|		:		无
|:range|	:{range}	转到{range}的最后一行
|:!|		:!		过滤行或执行外部命令
|:!!|		:!!		重复上次":!"命令
|:#|		:#		同":number"
|:&|		:&		重复上次":substitute"
|:star|		:*		使用最后一个可视区域，如":'<,'>"
|:<|		:<		将行左移一个'shiftwidth'
|:=|		:=		打印最后一行号
|:>|		:>		将行右移一个'shiftwidth'
|:@|		:@		执行寄存器的内容
|:@@|		:@@		重复之前的":@"
|:2match|	:2mat[ch]	定义第二个要高亮的匹配项
|:3match|	:3mat[ch]	定义第三个要高亮的匹配项
|:Next|		:N[ext]		转到参数列表中的上一个文件
|:append|	:a[ppend]	追加文本
|:abbreviate|	:ab[breviate]	输入缩写
|:abclear|	:abc[lear]	移除所有缩写
|:aboveleft|	:abo[veleft]	使分割窗口出现在左侧或上方
|:all|		:al[l]		为参数列表中的每个文件打开一个窗口
|:amenu|	:am[enu]	为所有模式输入新菜单项
|:anoremenu|	:an[oremenu]	为所有模式输入不会被重新映射的新菜单
|:args|		:ar[gs]		打印参数列表
|:argadd|	:arga[dd]	向参数列表添加项目
|:argdedupe|	:argded[upe]	从参数列表中移除重复项
|:argdelete|	:argd[elete]	从参数列表中删除项目
|:argedit|	:arge[dit]	向参数列表添加项目并编辑它
|:argdo|	:argdo		对参数列表中的所有项目执行命令
|:argglobal|	:argg[lobal]	定义全局参数列表
|:arglocal|	:argl[ocal]	定义本地参数列表
|:argument|	:argu[ment]	转到参数列表中的特定文件
|:ascii|	:as[cii]	打印光标下字符的ASCII值
|:autocmd|	:au[tocmd]	输入或显示自动命令
|:augroup|	:aug[roup]	选择要使用的自动命令组
|:aunmenu|	:aun[menu]	移除所有模式的菜单
|:buffer|	:b[uffer]	转到缓冲区列表中的特定缓冲区
|:bNext|	:bN[ext]	转到缓冲区列表中的上一个缓冲区
|:ball|		:ba[ll]		为缓冲区列表中的每个缓冲区打开一个窗口
|:badd|		:bad[d]		向缓冲区列表添加缓冲区
|:balt|		:balt		类似于":badd"，但也设置备用文件
|:bdelete|	:bd[elete]	从缓冲区列表中移除缓冲区
|:belowright|	:bel[owright]	使分割窗口出现在右侧或下方
|:bfirst|	:bf[irst]	转到缓冲区列表中的第一个缓冲区
|:blast|	:bl[ast]	转到缓冲区列表中的最后一个缓冲区
|:bmodified|	:bm[odified]	转到缓冲区列表中下一个已修改的缓冲区
|:bnext|	:bn[ext]	转到缓冲区列表中的下一个缓冲区
|:botright|	:bo[tright]	使分割窗口出现在底部或最右侧
|:bprevious|	:bp[revious]	转到缓冲区列表中的上一个缓冲区
|:brewind|	:br[ewind]	转到缓冲区列表中的第一个缓冲区
|:break|	:brea[k]	跳出while循环
|:breakadd|	:breaka[dd]	添加调试器断点
|:breakdel|	:breakd[el]	删除调试器断点
|:breaklist|	:breakl[ist]	列出调试器断点
|:browse|	:bro[wse]	使用文件选择对话框
|:bufdo|	:bufd[o]	在每个列出的缓冲区中执行命令
|:buffers|	:buffers	列出缓冲区列表中的所有文件
|:bunload|	:bun[load]	卸载特定缓冲区
|:bwipeout|	:bw[ipeout]	真正删除缓冲区
|:change|	:c[hange]	替换一行或一系列行
|:cNext|	:cN[ext]	转到上一个错误
|:cNfile|	:cNf[ile]	转到上一个文件的最后一个错误
|:cabbrev|	:ca[bbrev]	类似于":abbreviate"，但用于命令行模式
|:cabclear|	:cabc[lear]	清除命令行模式的所有缩写
|:cabove|	:cabo[ve]	转到当前行上方的错误
|:caddbuffer|	:cad[dbuffer]	从缓冲区添加错误
|:caddexpr|	:cadde[xpr]	从表达式添加错误
|:caddfile|	:caddf[ile]	将错误消息添加到当前快速修复列表
|:cafter|	:caf[ter]	转到当前光标后的错误
|:call|		:cal[l]		调用函数
|:catch|	:cat[ch]	:try命令的一部分
|:cbefore|	:cbe[fore]	转到当前光标前的错误
|:cbelow|	:cbel[ow]	转到当前行下方的错误
|:cbottom|	:cbo[ttom]	滚动到快速修复窗口底部
|:cbuffer|	:cb[uffer]	解析错误消息并跳转到第一个错误
|:cc|		:cc		转到特定错误
|:cclose|	:ccl[ose]	关闭快速修复窗口
|:cd|		:cd		更改目录
|:cdo|		:cdo		在每个有效的错误列表条目中执行命令
|:cfdo|		:cfd[o]		在错误列表中的每个文件中执行命令
|:center|	:ce[nter]	将行居中对齐
|:cexpr|	:cex[pr]	从表达式读取错误并跳转到第一个
|:cfile|	:cf[ile]	读取错误消息文件并跳转到第一个
|:cfirst|	:cfir[st]	转到指定错误，默认为第一个
|:cgetbuffer|	:cgetb[uffer]	从缓冲区获取错误
|:cgetexpr|	:cgete[xpr]	从表达式获取错误
|:cgetfile|	:cg[etfile]	读取错误消息文件
|:changes|	:changes	打印更改列表
|:chdir|	:chd[ir]	更改目录
|:checkhealth|	:che[ckhealth]	运行健康检查
|:checkpath|	:checkp[ath]	列出包含的文件
|:checktime|	:checkt[ime]	检查已加载缓冲区的时间戳
|:chistory|	:chi[story]	列出错误列表
|:clast|	:cla[st]	转到指定错误，默认为最后一个
|:clearjumps|	:cle[arjumps]	清除跳转列表
|:clist|	:cl[ist]	列出所有错误
|:close|	:clo[se]	关闭当前窗口
|:cmap|		:cm[ap]		类似于":map"，但用于命令行模式
|:cmapclear|	:cmapc[lear]	清除命令行模式的所有映射
|:cmenu|	:cme[nu]	为命令行模式添加菜单
|:cnext|	:cn[ext]	转到下一个错误
|:cnewer|	:cnew[er]	转到较新的错误列表
|:cnfile|	:cnf[ile]	转到下一个文件的第一个错误
|:cnoremap|	:cno[remap]	类似于":noremap"，但用于命令行模式
|:cnoreabbrev|	:cnorea[bbrev]	类似于":noreabbrev"，但用于命令行模式
|:cnoremenu|	:cnoreme[nu]	类似于":noremenu"，但用于命令行模式
|:copy|		:co[py]		复制行
|:colder|	:col[der]	转到较旧的错误列表
|:colorscheme|	:colo[rscheme]	加载特定配色方案
|:command|	:com[mand]	创建用户定义命令
|:comclear|	:comc[lear]	清除所有用户定义命令
|:compiler|	:comp[iler]	为特定编译器进行设置
|:continue|	:con[tinue]	返回到:while
|:confirm|	:conf[irm]	需要确认时提示用户
|:const|	:cons[t]	将变量创建为常量
|:copen|	:cope[n]	打开快速修复窗口
|:cprevious|	:cp[revious]	转到上一个错误
|:cpfile|	:cpf[ile]	转到上一个文件的最后一个错误
|:cquit|	:cq[uit]	以错误代码退出Vim
|:crewind|	:cr[ewind]	转到指定错误，默认为第一个
|:cunmap|	:cu[nmap]	类似于":unmap"，但用于命令行模式
|:cunabbrev|	:cuna[bbrev]	类似于":unabbrev"，但用于命令行模式
|:cunmenu|	:cunme[nu]	移除命令行模式的菜单
|:cwindow|	:cw[indow]	打开或关闭快速修复窗口
|:delete|	:d[elete]	删除行
|:debug|	:deb[ug]	在调试模式下运行命令
|:debuggreedy|	:debugg[reedy]	从普通输入读取调试模式命令
|:defer|	:defe[r]	当前函数完成时调用函数
|:delcommand|	:delc[ommand]	删除用户定义命令
|:delfunction|	:delf[unction]	删除用户函数
|:delmarks|	:delm[arks]	删除标记
|:diffupdate|	:dif[fupdate]	更新'diff'缓冲区
|:diffget|	:diffg[et]	移除当前缓冲区中的差异
|:diffoff|	:diffo[ff]	关闭差异模式
|:diffpatch|	:diffp[atch]	应用补丁并显示差异
|:diffput|	:diffpu[t]	移除其他缓冲区中的差异
|:diffsplit|	:diffs[plit]	显示与另一个文件的差异
|:diffthis|	:difft[his]	使当前窗口成为差异窗口
|:digraphs|	:dig[raphs]	显示或输入双字符
|:display|	:di[splay]	显示寄存器
|:djump|	:dj[ump]	跳转到#define
|:dl|		:dl		带有'l'标志的|:delete|的简写
|:dlist|	:dli[st]	列出#define
|:doautocmd|	:do[autocmd]	将自动命令应用于当前缓冲区
|:doautoall|	:doautoa[ll]	为所有已加载缓冲区应用自动命令
|:dp|		:d[elete]p	带有'p'标志的|:delete|的简写
|:drop|		:dr[op]		跳转到编辑文件的窗口或在当前窗口中编辑文件
|:dsearch|	:ds[earch]	列出一个#define
|:dsplit|	:dsp[lit]	分割窗口并跳转到#define
|:edit|		:e[dit]		编辑文件
|:earlier|	:ea[rlier]	转到较早的更改，撤销
|:echo|		:ec[ho]		回显表达式的结果
|:echoerr|	:echoe[rr]	类似于:echo，显示为错误并使用历史记录
|:echohl|	:echoh[l]	设置回显命令的高亮
|:echomsg|	:echom[sg]	与:echo相同，将消息放入历史记录
|:echon|	:echon		与:echo相同，但没有<EOL>
|:else|		:el[se]		:if命令的一部分
|:elseif|	:elsei[f]	:if命令的一部分
|:emenu|	:em[enu]	按名称执行菜单
|:endif|	:en[dif]	结束之前的:if
|:endfor|	:endfo[r]	结束之前的:for
|:endfunction|	:endf[unction]	结束以:function开始的用户函数
|:endtry|	:endt[ry]	结束之前的:try
|:endwhile|	:endw[hile]	结束之前的:while
|:enew|		:ene[w]		编辑新的未命名缓冲区
|:eval|		:ev[al]		评估表达式并丢弃结果
|:ex|		:ex		与":edit"相同
|:execute|	:exe[cute]	执行表达式的结果
|:exit|		:exi[t]		与":xit"相同
|:exusage|	:exu[sage]	Ex命令概述
|:fclose|	:fc[lose]	关闭浮动窗口
|:file|		:f[ile]		显示或设置当前文件名
|:files|	:files		列出缓冲区列表中的所有文件
|:filetype|	:filet[ype]	打开/关闭文件类型检测
|:filter|	:filt[er]	过滤后续命令的输出
|:find|		:fin[d]		在'path'中查找文件并编辑它
|:finally|	:fina[lly]	:try命令的一部分
|:finish|	:fini[sh]	退出源Vim脚本
|:first|	:fir[st]	转到参数列表中的第一个文件
|:fold|		:fo[ld]		创建折叠
|:foldclose|	:foldc[lose]	关闭折叠
|:folddoopen|	:foldd[oopen]	对不在关闭折叠中的行执行命令
|:folddoclosed|	:folddoc[losed]	对在关闭折叠中的行执行命令
|:foldopen|	:foldo[pen]	打开折叠
|:for|		:for		for循环
|:function|	:fu[nction]	定义用户函数
|:global|	:g[lobal]	为匹配行执行命令
|:goto|		:go[to]		转到缓冲区中的字节
|:grep|		:gr[ep]		运行'grepprg'并跳转到第一个匹配项
|:grepadd|	:grepa[dd]	类似于:grep，但追加到当前列表
|:gui|		:gu[i]		启动GUI
|:gvim|		:gv[im]		启动GUI
|:help|		:h[elp]		打开帮助窗口
|:helpclose|	:helpc[lose]	关闭一个帮助窗口
|:helpgrep|	:helpg[rep]	类似于":grep"，但搜索帮助文件
|:helptags|	:helpt[ags]	为目录生成帮助标签
|:highlight|	:hi[ghlight]	指定高亮方法
|:hide|		:hid[e]		为命令隐藏当前缓冲区
|:history|	:his[tory]	打印历史记录列表
|:horizontal|	:hor[izontal]	后续窗口命令水平工作
|:insert|	:i[nsert]	插入文本
|:iabbrev|	:ia[bbrev]	类似于":abbrev"，但用于插入模式
|:iabclear|	:iabc[lear]	类似于":abclear"，但用于插入模式
|:if|		:if		当条件满足时执行命令
|:ijump|	:ij[ump]	跳转到标识符的定义
|:ilist|	:il[ist]	列出标识符匹配的行
|:imap|		:im[ap]		类似于":map"，但用于插入模式
|:imapclear|	:imapc[lear]	类似于":mapclear"，但用于插入模式
|:imenu|	:ime[nu]	为插入模式添加菜单
|:inoremap|	:ino[remap]	类似于":noremap"，但用于插入模式
|:inoreabbrev|	:inorea[bbrev]	类似于":noreabbrev"，但用于插入模式
|:inoremenu|	:inoreme[nu]	类似于":noremenu"，但用于插入模式
|:intro|	:int[ro]	打印介绍性消息
|:isearch|	:is[earch]	列出标识符匹配的一行
|:isplit|	:isp[lit]	分割窗口并跳转到标识符的定义
|:iunmap|	:iu[nmap]	类似于":unmap"，但用于插入模式
|:iunabbrev|	:iuna[bbrev]	类似于":unabbrev"，但用于插入模式
|:iunmenu|	:iunme[nu]	移除插入模式的菜单
|:join|		:j[oin]		连接行
|:jumps|	:ju[mps]	打印跳转列表
|:k|		:k		设置标记
|:keepalt|	:keepa[lt]	后续命令保持备用文件
|:keepmarks|	:kee[pmarks]	后续命令保持标记位置
|:keepjumps|	:keepj[umps]	后续命令保持跳转列表和标记
|:keeppatterns|	:keepp[atterns]	后续命令保持搜索模式历史记录
|:lNext|	:lN[ext]	转到位置列表中的上一个条目
|:lNfile|	:lNf[ile]	转到上一个文件的最后一个条目
|:list|		:l[ist]		打印行
|:labove|	:lab[ove]	转到当前行上方的位置
|:laddexpr|	:lad[dexpr]	从表达式添加位置
|:laddbuffer|	:laddb[uffer]	从缓冲区添加位置
|:laddfile|	:laddf[ile]	将位置添加到当前位置列表
|:lafter|	:laf[ter]	转到当前光标后的位置
|:last|		:la[st]		转到参数列表中的最后一个文件
|:language|	:lan[guage]	设置语言（区域设置）
|:later|	:lat[er]	转到较新的更改，重做
|:lbefore|	:lbe[fore]	转到当前光标前的位置
|:lbelow|	:lbel[ow]	转到当前行下方的位置
|:lbottom|	:lbo[ttom]	滚动到位置窗口底部
|:lbuffer|	:lb[uffer]	解析位置并跳转到第一个位置
|:lcd|		:lc[d]		本地更改目录
|:lchdir|	:lch[dir]	本地更改目录
|:lclose|	:lcl[ose]	关闭位置窗口
|:ldo|		:ld[o]		在有效位置列表条目中执行命令
|:lfdo|		:lfd[o]		在位置列表中的每个文件中执行命令
|:left|		:le[ft]		左对齐行
|:leftabove|	:lefta[bove]	使分割窗口出现在左侧或上方
|:let|		:let		为变量或选项赋值
|:lexpr|	:lex[pr]	从表达式读取位置并跳转到第一个
|:lfile|	:lf[ile]	读取位置文件并跳转到第一个
|:lfirst|	:lfir[st]	转到指定位置，默认为第一个
|:lgetbuffer|	:lgetb[uffer]	从缓冲区获取位置
|:lgetexpr|	:lgete[xpr]	从表达式获取位置
|:lgetfile|	:lg[etfile]	读取位置文件
|:lgrep|	:lgr[ep]	运行'grepprg'并跳转到第一个匹配项
|:lgrepadd|	:lgrepa[dd]	类似于:grep，但追加到当前列表
|:lhelpgrep|	:lh[elpgrep]	类似于":helpgrep"，但使用位置列表
|:lhistory|	:lhi[story]	列出位置列表
|:ll|		:ll		转到特定位置
|:llast|	:lla[st]	转到指定位置，默认为最后一个
|:llist|	:lli[st]	列出所有位置
|:lmake|	:lmak[e]	执行外部命令'makeprg'并解析错误消息
|:lmap|		:lm[ap]		类似于":map!"，但包括语言参数模式
|:lmapclear|	:lmapc[lear]	类似于":mapclear!"，但包括语言参数模式
|:lnext|	:lne[xt]	转到下一个位置
|:lnewer|	:lnew[er]	转到较新的位置列表
|:lnfile|	:lnf[ile]	转到下一个文件的第一个位置
|:lnoremap|	:ln[oremap]	类似于":noremap!"，但包括语言参数模式
|:loadkeymap|	:loadk[eymap]	加载以下键映射直到EOF
|:loadview|	:lo[adview]	从文件加载当前窗口的视图
|:lockmarks|	:loc[kmarks]	后续命令保持标记位置
|:lockvar|	:lockv[ar]	锁定变量
|:lolder|	:lol[der]	转到较旧的位置列表
|:lopen|	:lop[en]	打开位置窗口
|:lprevious|	:lp[revious]	转到上一个位置
|:lpfile|	:lpf[ile]	转到上一个文件的最后一个位置
|:lrewind|	:lr[ewind]	转到指定位置，默认为第一个
|:ls|		:ls		列出所有缓冲区
|:ltag|		:lt[ag]		跳转到标签并将匹配标签添加到位置列表
|:lunmap|	:lu[nmap]	类似于":unmap!"，但包括语言参数模式
|:lua|		:lua		执行|Lua|命令
|:luado|	:luad[o]	为每行执行Lua命令
|:luafile|	:luaf[ile]	执行|Lua|脚本文件
|:lvimgrep|	:lv[imgrep]	在文件中搜索模式
|:lvimgrepadd|	:lvimgrepa[dd]	类似于:vimgrep，但追加到当前列表
|:lwindow|	:lw[indow]	打开或关闭位置窗口
|:move|		:m[ove]		移动行
|:mark|		:ma[rk]		设置标记
|:make|		:mak[e]		执行外部命令'makeprg'并解析错误消息
|:map|		:map		显示或输入映射
|:mapclear|	:mapc[lear]	清除普通和可视模式的所有映射
|:marks|	:marks		列出所有标记
|:match|	:mat[ch]	定义要高亮的匹配项
|:menu|		:me[nu]		输入新菜单项
|:menutranslate|  :menut[ranslate] 添加菜单翻译项
|:messages|	:mes[sages]	查看之前显示的消息
|:mkexrc|	:mk[exrc]	将当前映射和设置写入文件
|:mksession|	:mks[ession]	将会话信息写入文件
|:mkspell|	:mksp[ell]	生成.spl拼写文件
|:mkvimrc|	:mkv[imrc]	将当前映射和设置写入文件
|:mkview|	:mkvie[w]	将当前窗口的视图写入文件
|:mode|		:mod[e]		显示或更改屏幕模式
|:next|		:n[ext]		转到参数列表中的下一个文件
|:new|		:new		创建新的空窗口
|:nmap|		:nm[ap]		类似于":map"，但用于普通模式
|:nmapclear|	:nmapc[lear]	清除普通模式的所有映射
|:nmenu|	:nme[nu]	为普通模式添加菜单
|:nnoremap|	:nn[oremap]	类似于":noremap"，但用于普通模式
|:nnoremenu|	:nnoreme[nu]	类似于":noremenu"，但用于普通模式
|:noautocmd|	:noa[utocmd]	后续命令不触发自动命令
|:noremap|	:no[remap]	输入不会被重新映射的映射
|:nohlsearch|	:noh[lsearch]	暂停'hlsearch'高亮
|:noreabbrev|	:norea[bbrev]	输入不会被重新映射的缩写
|:noremenu|	:noreme[nu]	输入不会被重新映射的菜单
|:normal|	:norm[al]	执行普通模式命令
|:noswapfile|	:nos[wapfile]	后续命令不创建交换文件
|:number|	:nu[mber]	打印带行号的行
|:nunmap|	:nun[map]	类似于":unmap"，但用于普通模式
|:nunmenu|	:nunme[nu]	移除普通模式的菜单
|:oldfiles|	:ol[dfiles]	列出在|shada|文件中有标记的文件
|:omap|		:om[ap]		类似于":map"，但用于操作符待决模式
|:omapclear|	:omapc[lear]	移除操作符待决模式的所有映射
|:omenu|	:ome[nu]	为操作符待决模式添加菜单
|:only|		:on[ly]		关闭除当前窗口外的所有窗口
|:onoremap|	:ono[remap]	类似于":noremap"，但用于操作符待决模式
|:onoremenu|	:onoreme[nu]	类似于":noremenu"，但用于操作符待决模式
|:options|	:opt[ions]	打开选项窗口
|:ounmap|	:ou[nmap]	类似于":unmap"，但用于操作符待决模式
|:ounmenu|	:ounme[nu]	移除操作符待决模式的菜单
|:ownsyntax|	:ow[nsyntax]	为此窗口设置新的本地语法高亮
|:packadd|	:pa[ckadd]	从'packpath'添加插件
|:packloadall|	:packl[oadall]	加载'packpath'下的所有包
|:pbuffer|	:pb[uffer]	在预览窗口中编辑缓冲区
|:pclose|	:pc[lose]	关闭预览窗口
|:pedit|	:ped[it]	在预览窗口中编辑文件
|:perl|		:pe[rl]		执行perl命令
|:perldo|	:perld[o]	为每行执行perl命令
|:perlfile|	:perlf[ile]	执行perl脚本文件
|:print|	:p[rint]	打印行
|:profdel|	:profd[el]	停止分析函数或脚本
|:profile|	:prof[ile]	分析函数和脚本
|:pop|		:po[p]		跳转到标签栈中的较旧条目
|:popup|	:popu[p]	按名称弹出菜单
|:ppop|		:pp[op]		在预览窗口中执行":pop"
|:preserve|	:pre[serve]	将所有文本写入交换文件
|:previous|	:prev[ious]	转到参数列表中的上一个文件
|:psearch|	:ps[earch]	类似于":ijump"，但在预览窗口中显示匹配项
|:ptag|		:pt[ag]		在预览窗口中显示标签
|:ptNext|	:ptN[ext]	在预览窗口中执行|:tNext|
|:ptfirst|	:ptf[irst]	在预览窗口中执行|:trewind|
|:ptjump|	:ptj[ump]	执行|:tjump|并在预览窗口中显示标签
|:ptlast|	:ptl[ast]	在预览窗口中执行|:tlast|
|:ptnext|	:ptn[ext]	在预览窗口中执行|:tnext|
|:ptprevious|	:ptp[revious]	在预览窗口中执行|:tprevious|
|:ptrewind|	:ptr[ewind]	在预览窗口中执行|:trewind|
|:ptselect|	:pts[elect]	执行|:tselect|并在预览窗口中显示标签
|:put|		:pu[t]		在文本中插入寄存器的内容
|:pwd|		:pw[d]		打印当前目录
|:py3|		:py3		执行Python 3命令
|:python3|	:python3	与:py3相同
|:py3do|	:py3d[o]	为每行执行Python 3命令
|:py3file|	:py3f[ile]	执行Python 3脚本文件
|:python|	:py[thon]	执行Python命令
|:pydo|		:pyd[o]		为每行执行Python命令
|:pyfile|	:pyf[ile]	执行Python脚本文件
|:pyx|		:pyx		执行|python_x|命令
|:pythonx|	:pythonx	与:pyx相同
|:pyxdo|	:pyxd[o]	为每行执行|python_x|命令
|:pyxfile|	:pyxf[ile]	执行|python_x|脚本文件
|:quit|		:q[uit]		退出当前窗口（当只有一个窗口时退出Vim）
|:quitall|	:quita[ll]	退出Vim
|:qall|		:qa[ll]		退出Vim
|:read|		:r[ead]		将文件读入文本
|:recover|	:rec[over]	从交换文件恢复文件
|:redo|		:red[o]		重做一个已撤销的更改
|:redir|	:redi[r]	将消息重定向到文件或寄存器
|:redraw|	:redr[aw]	强制重绘显示
|:redrawstatus|	:redraws[tatus]	强制重绘状态行和窗口栏
|:redrawtabline|  :redrawt[abline]  强制重绘标签行
|:registers|	:reg[isters]	显示寄存器的内容
|:resize|	:res[ize]	更改当前窗口高度
|:retab|	:ret[ab]	更改制表符大小
|:return|	:retu[rn]	从用户函数返回
|:rewind|	:rew[ind]	转到参数列表中的第一个文件
|:right|	:ri[ght]	右对齐文本
|:rightbelow|	:rightb[elow]	使分割窗口出现在右侧或下方
|:rshada|	:rsh[ada]	从|shada|文件读取
|:ruby|		:rub[y]		执行Ruby命令
|:rubydo|	:rubyd[o]	为每行执行Ruby命令
|:rubyfile|	:rubyf[ile]	执行Ruby脚本文件
|:rundo|	:rund[o]	从文件读取撤销信息
|:runtime|	:ru[ntime]	在'runtimepath'中源Vim脚本
|:substitute|	:s[ubstitute]	查找和替换文本
|:sNext|	:sN[ext]	分割窗口并转到参数列表中的上一个文件
|:sandbox|	:san[dbox]	在沙盒中执行命令
|:sargument|	:sa[rgument]	分割窗口并转到参数列表中的特定文件
|:sall|		:sal[l]		为参数列表中的每个文件打开一个窗口
|:saveas|	:sav[eas]	以另一个名称保存文件
|:sbuffer|	:sb[uffer]	分割窗口并转到缓冲区列表中的特定文件
|:sbNext|	:sbN[ext]	分割窗口并转到缓冲区列表中的上一个文件
|:sball|	:sba[ll]	为缓冲区列表中的每个文件打开一个窗口
|:sbfirst|	:sbf[irst]	分割窗口并转到缓冲区列表中的第一个文件
|:sblast|	:sbl[ast]	分割窗口并转到缓冲区列表中的最后一个文件
|:sbmodified|	:sbm[odified]	分割窗口并转到缓冲区列表中的已修改文件
|:sbnext|	:sbn[ext]	分割窗口并转到缓冲区列表中的下一个文件
|:sbprevious|	:sbp[revious]	分割窗口并转到缓冲区列表中的上一个文件
|:sbrewind|	:sbr[ewind]	分割窗口并转到缓冲区列表中的第一个文件
|:scriptnames|	:scr[iptnames]	列出所有已源的Vim脚本的名称
|:scriptencoding| :scripte[ncoding]  已源Vim脚本中使用的编码
|:set|		:se[t]		显示或设置选项
|:setfiletype|	:setf[iletype]	设置'filetype'，除非已经设置
|:setglobal|	:setg[lobal]	显示选项的全局值
|:setlocal|	:setl[ocal]	显示或设置本地选项
|:sfind|	:sf[ind]	分割当前窗口并在'path'中编辑文件
|:sfirst|	:sfir[st]	分割窗口并转到参数列表中的第一个文件
|:sign|		:sig[n]		操作标记
|:silent|	:sil[ent]	静默运行命令
|:sleep|	:sl[eep]	暂停几秒钟
|:sleep!|	:sl[eep]!	暂停几秒钟，不显示光标
|:slast|	:sla[st]	分割窗口并转到参数列表中的最后一个文件
|:smagic|	:sm[agic]	使用'magic'进行:substitute
|:smap|		:smap		类似于":map"，但用于选择模式
|:smapclear|	:smapc[lear]	移除选择模式的所有映射
|:smenu|	:sme[nu]	为选择模式添加菜单
|:snext|	:sn[ext]	分割窗口并转到参数列表中的下一个文件
|:snomagic|	:sno[magic]	使用'nomagic'进行:substitute
|:snoremap|	:snor[emap]	类似于":noremap"，但用于选择模式
|:snoremenu|	:snoreme[nu]	类似于":noremenu"，但用于选择模式
|:sort|		:sor[t]		排序行
|:source|	:so[urce]	从文件读取Vim或Ex命令
|:spelldump|	:spelld[ump]	分割窗口并填充所有正确单词
|:spellgood|	:spe[llgood]	为拼写添加好词
|:spellinfo|	:spelli[nfo]	显示已加载拼写文件的信息
|:spellrare|	:spellra[re]	为拼写添加罕见词
|:spellrepall|	:spellr[epall]	替换所有坏词，如最后一个|z=|
|:spellundo|	:spellu[ndo]	移除好词或坏词
|:spellwrong|	:spellw[rong]	添加拼写错误
|:split|	:sp[lit]	分割当前窗口
|:sprevious|	:spr[evious]	分割窗口并转到参数列表中的上一个文件
|:srewind|	:sre[wind]	分割窗口并转到参数列表中的第一个文件
|:stop|		:st[op]		暂停编辑器或退出到shell
|:stag|		:sta[g]		分割窗口并跳转到标签
|:startinsert|	:star[tinsert]	开始插入模式
|:startgreplace|  :startg[replace] 开始虚拟替换模式
|:startreplace|	:startr[eplace]	开始替换模式
|:stopinsert|	:stopi[nsert]	停止插入模式
|:stjump|	:stj[ump]	执行":tjump"并分割窗口
|:stselect|	:sts[elect]	执行":tselect"并分割窗口
|:sunhide|	:sun[hide]	与":unhide"相同
|:sunmap|	:sunm[ap]	类似于":unmap"，但用于选择模式
|:sunmenu|	:sunme[nu]	移除选择模式的菜单
|:suspend|	:sus[pend]	与":stop"相同
|:sview|	:sv[iew]	分割窗口并以只读方式编辑文件
|:swapname|	:sw[apname]	显示当前交换文件的名称
|:syntax|	:sy[ntax]	语法高亮
|:syntime|	:synti[me]	测量语法高亮速度
|:syncbind|	:sync[bind]	同步滚动绑定
|:t|		:t		与":copy"相同
|:tNext|	:tN[ext]	跳转到上一个匹配标签
|:tabNext|	:tabN[ext]	转到上一个标签页
|:tabclose|	:tabc[lose]	关闭当前标签页
|:tabdo|	:tabd[o]	在每个标签页中执行命令
|:tabedit|	:tabe[dit]	在新标签页中编辑文件
|:tabfind|	:tabf[ind]	在'path'中查找文件，在新标签页中编辑
|:tabfirst|	:tabfir[st]	转到第一个标签页
|:tablast|	:tabl[ast]	转到最后一个标签页
|:tabmove|	:tabm[ove]	将标签页移动到其他位置
|:tabnew|	:tabnew		在新标签页中编辑文件
|:tabnext|	:tabn[ext]	转到下一个标签页
|:tabonly|	:tabo[nly]	关闭除当前标签页外的所有标签页
|:tabprevious|	:tabp[revious]	转到上一个标签页
|:tabrewind|	:tabr[ewind]	转到第一个标签页
|:tabs|		:tabs		列出标签页及其内容
|:tab|		:tab		打开新窗口时创建新标签页
|:tag|		:ta[g]		跳转到标签
|:tags|		:tags		显示标签栈的内容
|:tcd|		:tc[d]		为标签页更改目录
|:tchdir|	:tch[dir]	为标签页更改目录
|:terminal|	:te[rminal]	打开终端缓冲区
|:tfirst|	:tf[irst]	跳转到第一个匹配标签
|:throw|	:th[row]	抛出异常
|:tjump|	:tj[ump]	类似于":tselect"，但当只有一个匹配项时直接跳转
|:tlast|	:tl[ast]	跳转到最后一个匹配标签
|:tlmenu|	:tlm[enu]	为|Terminal-mode|添加菜单
|:tlnoremenu|	:tln[oremenu]	类似于":noremenu"，但用于|Terminal-mode|
|:tlunmenu|	:tlu[nmenu]	移除|Terminal-mode|的菜单
|:tmapclear|	:tmapc[lear]	移除|Terminal-mode|的所有映射
|:tmap|		:tma[p]		类似于":map"，但用于|Terminal-mode|
|:tmenu|	:tm[enu]	定义菜单工具提示
|:tnext|	:tn[ext]	跳转到下一个匹配标签
|:tnoremap|	:tno[remap]	类似于":noremap"，但用于|Terminal-mode|
|:topleft|	:to[pleft]	使分割窗口出现在顶部或最左侧
|:tprevious|	:tp[revious]	跳转到上一个匹配标签
|:trewind|	:tr[ewind]	跳转到第一个匹配标签
|:trust|	:trust		添加或从信任数据库中移除文件
|:try|		:try		执行命令，出错或异常时中止
|:tselect|	:ts[elect]	列出匹配标签并选择一个
|:tunmap|	:tunma[p]	类似于":unmap"，但用于|Terminal-mode|
|:tunmenu|	:tu[nmenu]	移除菜单工具提示
|:undo|		:u[ndo]		撤销最后的更改
|:undojoin|	:undoj[oin]	将下一个更改与上一个撤销块连接
|:undolist|	:undol[ist]	列出撤销树的叶子
|:unabbreviate|	:una[bbreviate]	移除缩写
|:unhide|	:unh[ide]	为缓冲区列表中的每个已加载文件打开一个窗口
|:unlet|	:unl[et]	删除变量
|:unlockvar|	:unlo[ckvar]	解锁变量
|:unmap|	:unm[ap]	移除映射
|:unmenu|	:unme[nu]	移除菜单
|:unsilent|	:uns[ilent]	非静默运行命令
|:update|	:up[date]	如果已修改则写入缓冲区
|:vglobal|	:v[global]	为不匹配的行执行命令
|:version|	:ve[rsion]	打印版本号和其他信息
|:verbose|	:verb[ose]	使用'verbose'设置执行命令
|:vertical|	:vert[ical]	使后续命令垂直分割
|:vimgrep|	:vim[grep]	在文件中搜索模式
|:vimgrepadd|	:vimgrepa[dd]	类似于:vimgrep，但追加到当前列表
|:visual|	:vi[sual]	与":edit"相同，但关闭"Ex"模式
|:viusage|	:viu[sage]	普通模式命令概述
|:view|		:vie[w]		以只读方式编辑文件
|:vmap|		:vm[ap]		类似于":map"，但用于可视+选择模式
|:vmapclear|	:vmapc[lear]	移除可视+选择模式的所有映射
|:vmenu|	:vme[nu]	为可视+选择模式添加菜单
|:vnew|		:vne[w]		创建新的空窗口，垂直分割
|:vnoremap|	:vn[oremap]	类似于":noremap"，但用于可视+选择模式
|:vnoremenu|	:vnoreme[nu]	类似于":noremenu"，但用于可视+选择模式
|:vsplit|	:vs[plit]	垂直分割当前窗口
|:vunmap|	:vu[nmap]	类似于":unmap"，但用于可视+选择模式
|:vunmenu|	:vunme[nu]	移除可视+选择模式的菜单
|:windo|	:wind[o]	在每个窗口中执行命令
|:write|	:w[rite]	写入文件
|:wNext|	:wN[ext]	写入文件并转到参数列表中的上一个文件
|:wall|		:wa[ll]		写入所有（已更改）缓冲区
|:while|	:wh[ile]	只要条件满足就执行循环
|:winsize|	:wi[nsize]	获取或设置窗口大小（已废弃）
|:wincmd|	:winc[md]	执行窗口（CTRL-W）命令
|:winpos|	:winp[os]	获取或设置窗口位置
|:wnext|	:wn[ext]	写入文件并转到参数列表中的下一个文件
|:wprevious|	:wp[revious]	写入文件并转到参数列表中的上一个文件
|:wq|		:wq		写入文件并退出窗口或Vim
|:wqall|	:wqa[ll]	写入所有已更改的缓冲区并退出Vim
|:wshada|	:wsh[ada]	写入ShaDa文件
|:wundo|	:wu[ndo]	将撤销信息写入文件
|:xit|		:x[it]		如果缓冲区已更改则写入并关闭窗口
|:xall|		:xa[ll]		与":wqall"相同
|:xmapclear|	:xmapc[lear]	移除可视模式的所有映射
|:xmap|		:xm[ap]		类似于":map"，但用于可视模式
|:xmenu|	:xme[nu]	为可视模式添加菜单
|:xnoremap|	:xn[oremap]	类似于":noremap"，但用于可视模式
|:xnoremenu|	:xnoreme[nu]	类似于":noremenu"，但用于可视模式
|:xunmap|	:xu[nmap]	类似于":unmap"，但用于可视模式
|:xunmenu|	:xunme[nu]	移除可视模式的菜单
|:yank|		:y[ank]		将行拉入寄存器
|:z|		:z		打印一些行
|:~|		:~		重复最后的":substitute"


vim:tw=78:ts=8:noet:ft=help:norl:
