*helphelp.txt*	Nvim


		  VIM 参考手册    作者：Bram Moolenaar


关于帮助文件的帮助					*helphelp*

                                      输入 |gO| 查看目录。

==============================================================================
1. 帮助命令					*online-help*

			*help* *<Help>* *:h* *:help* *<F1>* *i_<F1>* *i_<Help>*
<Help>		或
:h[elp]			打开一个窗口并以只读模式显示帮助文件。
			如果已经有一个帮助窗口打开，则使用该窗口。
			否则，如果当前窗口使用了屏幕的全宽或至少有 80 个字符宽，
			则帮助窗口将出现在当前窗口的正上方。
			否则，新窗口将放在最顶部。
			'helplang' 选项用于选择语言，如果
			主帮助文件有多种语言可用。

			输入 |gO| 查看目录。

						*{subject}* *E149* *E661*
:h[elp] {subject}	类似于 ":help"，另外跳转到标签 {subject}。
			例如：  >
				:help options

<			{subject} 可以包含通配符，如 "*", "?" 和
			"[a-z]"：
			   :help z?	跳转到任何 "z" 命令的帮助
			   :help z.	跳转到 "z." 的帮助
			但当标签存在时，它是按字面意思理解的：
			   :help :?	跳转到 ":?" 的帮助

			如果没有完全匹配的模式，或者有
			多个匹配项，将使用“最佳”匹配。
			使用复杂的算法来决定哪个匹配
			比另一个更好。计算中考虑以下
			项目：
			- 大小写相同的匹配比大小写不同的匹配
			  好得多。
			- 在非字母数字字符之后开始的匹配
			  比在单词中间的匹配更好。
			- 在标签开头或附近的匹配
			  比更远的匹配更好。
			- 匹配的字母数字字符越多，越好。
			- 匹配的长度越短，越好。

			'helplang' 选项用于选择语言，如果
			{subject} 有多种语言可用。
			要在特定语言中查找标签，附加 "@ab"，
			其中 "ab" 是双字母语言代码。参见
			|help-translated|。

			请注意，您给出的 {subject} 越长，
			找到的匹配就越少。您可以通过使用命令行补全
			（在 ":help subject" 后输入 CTRL-D |c_CTRL-D|）
			来了解其工作原理。
			如果有多个匹配项，可以通过
			按 CTRL-D 列出它们。示例： >
				:help cont<Ctrl-D>

<			不必输入 ":help CTRL-V" 来搜索
			CTRL-V 的帮助，您可以输入： >
				:help ^V
<			这也可以与其他字符一起使用，例如
			要在插入模式下查找 CTRL-V 的帮助： >
				:help i^V
<
			也可以先执行 ":help"，然后
			在帮助窗口中使用 ":tag {pattern}"。
			然后可以使用 ":tnext" 命令跳转到其他
			匹配项，使用 "tselect" 列出匹配项并选择一个。 >
				:help index
				:tselect /.*mode

<			当没有参数时，您将看到 "help" 的匹配项，
			以避免列出所有可能的匹配项（那将
			非常慢）。
			显示的匹配项数量限制为 300。

			`:help` 命令后面可以跟 '|' 和另一个
			命令，但您不需要在帮助命令中转义 '|'。
			所以这两个都有效： >
				:help |
				:help k| only
<			请注意，'|' 之前的空格被视为
			":help" 参数的一部分。
			您也可以使用 <NL> 或 <CR> 来将帮助
			命令与后续命令分开。您需要先输入
			CTRL-V 来插入 <NL> 或 <CR>。示例： >
				:help so<C-V><CR>only
<

:h[elp]! [subject]	类似于 ":help"，但在非英语帮助文件中优先
			在与当前文件相同语言的文件中查找标签。
			参见 |help-translated|。

							*:helpc* *:helpclose*
:helpc[lose]		关闭一个帮助窗口（如果存在）。
			Vim 将尝试恢复窗口布局（包括
			光标位置）到最初打开帮助窗口之前
			的布局。这可能会触发
			几个自动命令。

							*:helpg* *:helpgrep*
:helpg[rep] {pattern}[@xx]
			搜索所有帮助文本文件并列出
			包含 {pattern} 匹配项的行。
			跳转到第一个匹配项。
			可选的 [@xx] 指定仅查找
			"xx" 语言中的匹配项。
			您可以使用 |quickfix| 命令在匹配项之间
			导航，例如，使用 |:cnext| 跳转到
			下一个。或者使用 |:cwindow| 在 quickfix 窗口中
			获取匹配项列表。
			{pattern} 用作 Vim 正则表达式 |pattern|。
			不使用 'ignorecase'，添加 "\c" 以忽略大小写。
			区分大小写搜索的示例： >
				:helpgrep Uganda
<			忽略大小写搜索的示例： >
				:helpgrep uganda\c
<			在法语帮助中搜索的示例： >
				:helpgrep backspace@fr
<			模式不支持换行符，它必须
			在一行内匹配。您可以改用 |:grep|，
			但那样您需要以复杂的方式
			获取帮助文件列表。
			后面不能跟另一个命令，所有内容都
			用作模式的一部分。但您可以在需要时
			使用 |:execute|。
			压缩的帮助文件不会被搜索（Fedora
			压缩了帮助文件）。

							*:lh* *:lhelpgrep*
:lh[elpgrep] {pattern}[@xx]
			与 ":helpgrep" 相同，但使用位置列表
			而不是 quickfix 列表。
			如果帮助窗口已经打开，则使用该窗口的
			位置列表。
			否则，将打开一个新的帮助窗口并
			设置该窗口的位置列表。
			当前窗口的位置列表
			不会改变。

							*:exu* *:exusage*
:exu[sage]		显示关于 Ex 命令的帮助。
			添加此命令以模拟 Nvi 命令。

							*:viu* *:viusage*
:viu[sage]		显示关于普通模式命令的帮助。
			添加此命令以模拟 Nvi 命令。

当没有参数传递给 |:help| 时，将打开 'helpfile' 选项指定的文件。
否则，将在 'runtimepath' 选项指定的目录中的所有 "doc/tags" 文件中
搜索指定的标签。

如果您想在当前窗口中打开帮助，请参阅此提示：
|help-curwin|。

帮助窗口的初始高度可以使用 'helpheight' 选项设置
（默认为 20）。
						*help-buffer-options*
创建帮助缓冲区时，会设置几个本地选项以确保
帮助文本按预期显示：
    'iskeyword'		几乎所有的 ASCII 字符，除了 ' ', "*", '"' 和 '|'
    'foldmethod'	"manual"
    'tabstop'		8
    'arabic'		关闭
    'binary'		关闭
    'buflisted'		关闭
    'cursorbind'	关闭
    'diff'		关闭
    'foldenable'	关闭
    'list'		关闭
    'modifiable'	关闭
    'number'		关闭
    'relativenumber'	关闭
    'rightleft'		关闭
    'scrollbind'	关闭
    'spell'		关闭

通过使用标签跳转到特定主题。这可以通过两种方式完成：
- 在命令或选项名称上使用 "CTRL-]" 命令。
  这仅在标签是关键字时有效。"<C-Leftmouse>" 和
  "g<LeftMouse>" 的工作方式与 "CTRL-]" 相同。
- 使用 ":ta {subject}" 命令。这也适用于非关键字
  字符。

使用 CTRL-T 或 CTRL-O 跳回。
使用 ":q" 关闭帮助窗口。
使用 `g==` 执行当前的 Lua/Vimscript 代码块。

如果您查找的项目有多个匹配项，以下是跳转到
每个匹配项的方法：
1. 打开一个帮助窗口
2. 使用 ":tag" 命令，并在标签前加上斜杠。例如： >
	:tag /min
3. 使用 ":tnext" 跳转到下一个匹配的标签。

可以为插件和其他项目添加帮助文件。
您不需要为此更改分发的帮助文件。
参见 |add-local-help|。

要编写本地帮助文件，请参见 |write-local-help|。

请注意，本地帮助文件的标题行会自动添加到
"help.txt" 帮助文件的“本地附加”部分 |local-additions|。
这是在 Vim 中查看文件时完成的，文件本身并未更改。
这是通过遍历所有帮助文件并获取每个文件的
第一行来完成的。跳过 $VIMRUNTIME/doc 中的文件。

					*:helpt* *:helptags*
			*E150* *E151* *E152* *E153* *E154* *E670* *E856*
:helpt[ags] [++t] {dir}
			为目录 {dir} 生成帮助标签文件。
			当 {dir} 是 ALL 时，将使用 'runtimepath' 中
			所有的 "doc" 目录。

			扫描目录和子目录中的所有 "*.txt" 和 "*.??x" 文件
			以查找星号之间的帮助标签定义。
			"*.??x" 文件用于翻译的文档，它们生成 "tags-??" 文件，
			参见 |help-translated|。
			生成的标签文件是排序过的。
			当存在重复项时，会给出错误消息。
			现有的标签文件会被静默覆盖。

			可选的 "++t" 参数强制添加
			"help-tags" 标签。当 {dir} 等于
			$VIMRUNTIME/doc 时也会这样做。

			要重新构建运行时目录中的帮助标签
			（需要那里的写权限）： >
				:helptags $VIMRUNTIME/doc
<


==============================================================================
2. 翻译的帮助文件				*help-translated*

可以添加翻译的帮助文件，与原始的英语帮助文件并存。
Vim 将在 'runtimepath' 的 "doc" 目录中搜索所有帮助。

目前可用的翻译有：
	中文  - 多位作者
	法文  - 由 David Blanchet 翻译
	意大利文  - 由 Antonio Colombo 翻译
	日文  - 多位作者
	波兰文  - 由 Mikolaj Machowski 翻译
	俄文  - 由 Vassily Ragosin 翻译
请访问 Vim 网站查找它们：https://www.vim.org/translations.php

一组翻译的帮助文件包含以下文件：

	help.abx
	howto.abx
	...
	tags-ab

"ab" 是双字母语言代码。因此对于意大利语，名称是：

	help.itx
	howto.itx
	...
	tags-it

'helplang' 选项可以设置为首选语言。
默认值根据环境设置。
Vim 将首先尝试在首选语言中找到匹配的标签。
如果找不到，则使用英语。

要在特定语言中查找标签，请在标签后附加 "@ab"，其中 "ab" 是
双字母语言代码。示例： >
	:he user-manual@it
	:he user-manual@en
第一个命令查找意大利语用户手册，即使 'helplang' 为空。
第二个命令查找英语用户手册，即使 'helplang' 设置为
"it"。

当使用 ":help" 命令的命令行补全时，仅当标签存在多种语言时
才会显示 "@en" 扩展名。
当标签仅存在于英语中时，省略 "@en"。
当第一个候选项具有 "@ab" 扩展名且它与 'helplang' 中的第一种语言匹配时，
也省略 "@ab"。

在非英语帮助文件中使用 |CTRL-]| 或 ":help!" 时，Vim 将尝试
查找相同语言的标签。如果未找到，则将使用 'helplang'
来选择语言。

帮助文件必须使用 latin1 或 utf-8 编码。
当在第一行中找到非 ASCII 字符时，Vim 假定编码为 utf-8。
因此，您必须翻译包含 "For Vim version" 的标题。

同一目录中一种语言的帮助文件必须使用相同的编码。
您可以为不同语言使用不同的编码，并为
不同目录中同一语言的帮助文件使用不同的编码。

给翻译者的提示：
- 不要翻译标签。这使得可以使用 'helplang' 来
  指定首选语言。您可以用您的语言添加新标签。
- 当您不翻译文件的一部分时，请使用 "tag@en" 表示法
  向英语版本添加标签。
- 制作一个包含所有文件和标签文件的包，可供下载。
  用户可以将其放入一个 "doc" 目录中并开始使用。
  向开发团队报告，以便他们可以在 www.vim.org 上添加链接。
- 使用 |:helptags| 命令生成标签文件。它将在指定目录中
  找到所有语言。

==============================================================================
3. 编写帮助文件					*help-writing*

为便于使用，插件的 Vim 帮助文件应遵循
标准 Vim 帮助文件的格式，第一行除外。
如果您正在编写新的帮助文件，最好复制一个现有文件
并将其用作模板。

帮助文件的第一行应具有以下格式： >

	*plugin_name.txt*	{插件的简短描述}

第一个字段是一个帮助标签，":help plugin_name" 将跳转到此处。
该行的其余部分，在制表符之后，简短地描述了插件的用途。
这将显示在主帮助文件的“本地附加”部分。
请在那里检查它是否正常显示：|local-additions|。

如果您想添加版本号或最后修改日期，请将其放在
第二行，右对齐。

在帮助文件的底部，放置一个 Vim 模式行以设置 'textwidth'
和 'tabstop' 选项，并将 'filetype' 设置为 "help"。
切勿在此类模式行中设置全局选项，否则可能产生不良后果。


标签

要定义帮助标签，请将名称放在星号之间 ("*tag-name*")。
标签名称应与所有 Vim 帮助标签名称不同，并且理想情况下
应以 Vim 插件的名称开头。
标签名称通常在一行上右对齐。

当引用现有的帮助标签并创建热链接时，请将
名称放在两个竖线 ("|") 之间，例如 |help-writing|。

当引用 Vim 命令并创建热链接时，请将
名称放在两个反引号之间，例如 `:filetype`。您将看到它
作为命令高亮显示，类似于代码块（见下文）。

当在帮助文件中引用 Vim 选项时，请将选项名称放在
两个单引号之间，例如 'statusline'

当引用任何其他技术术语时，例如文件名或函数
参数，请用反引号将其括起来，例如 `~/.path/to/init.vim`。


高亮显示

要定义列标题，请在行末使用波浪字符，
前面加一个空格。这将以不同的颜色高亮显示列标题。
例如：

列标题 ~

要分隔帮助文件中的部分，请在一行中放置一系列 '=' 字符，
从第一列开始。部分分隔行以不同的方式高亮显示。

							      *help-codeblock*
要逐字引用 ex 命令块，请在块之前的行末放置一个
大于号 (>) 字符，并在块之后的行上作为第一个非空白字符放置一个
小于号 (<) 字符。
任何从第 1 列开始的行也会在其之前隐式停止 ex 命令块。
例如： >
	function Example_Func()
	  echo "Example"
	endfunction
<
要为代码块启用语法高亮，请在大于号 (>) 字符后放置
语言名称注释（例如 "vim"）。例如： >vim
	function Example_Func()
	  echo "Example"
	endfunction
<
						*help-notation*
以下内容在 Vim 帮助文件中以不同的方式高亮显示：
  - 特殊键名称，以 <> 表示法表示，如 <PageDown>，或
    作为 Ctrl 字符表示，如 CTRL-X
  - 任何在 {大括号} 之间的内容，例如 {lhs} 和 {rhs}

单词 "Note"、"Notes" 及类似词语会自动获得独特的高亮显示。
这些也是如此：
	Todo	待办事项
	Error	错误

您可以在 $VIMRUNTIME/syntax/help.vim 中找到详细信息


文件类型补全					*ft-help-omni*

要在编写标签引用时获取帮助标签的补全，您可以使用
|i_CTRL-X_CTRL-O| 命令。


 vim:tw=78:ts=8:noet:ft=help:norl:
