nvim_open_win({buffer}, {enter}, {config})                   *nvim_open_win()*

    打开一个新的分割窗口，
    如果指定了 `relative`，则为浮动窗口，
    如果指定了 `external`，则为外部窗口（由 UI 管理）。

    浮动窗口是在分割布局上方绘制的窗口，
    位于其他窗口中的某个锚点位置。
    浮动窗口可以由内部或通过带有 |ui-multigrid| 扩展的外部 GUI 绘制。
    外部窗口仅支持多网格 GUI，并显示为单独的顶级窗口。

    有关浮动窗口的一般概述，请参见 |api-floatwin|。

    打开浮动窗口时必须指定新窗口的 `width` 和 `height`，
    但对于普通窗口是可选的。

    如果省略了 `relative` 和 `external`，则创建一个普通的“分割”窗口。
    `win` 属性决定将分割哪个窗口。如果未提供 `win` 或 `win == 0`，
    则将在当前窗口旁边创建一个窗口。
    如果提供 -1，则将创建一个顶级分割。
    `vertical` 和 `split` 仅对普通窗口有效，并用于控制分割方向。
    对于 `vertical`，确切的方向由 |'splitright'| 和 |'splitbelow'| 决定。
    分割窗口不能具有 `bufpos`/`row`/`col`/`border`/`title`/`footer` 属性。

    使用 relative=editor (row=0,col=0) 指的是屏幕网格的左上角，(row=Lines-1,col=Columns-1) 指的是右下角。
    允许使用小数值，但内置实现（用于非多网格 UI）将始终向下舍入到最接近的整数。

    允许越界值和使浮动窗口不适合主编辑器的配置。
    内置实现截断值，以便浮动窗口完全位于主屏幕网格内。
    外部 GUI 可以让浮动窗口像工具提示一样悬停在主窗口之外，但不应将其用于指定任意 WM 屏幕位置。

    示例（Lua）：窗口相对浮动 >lua
        vim.api.nvim_open_win(0, false,
          {relative='win', row=3, col=3, width=12, height=3})
<

    示例（Lua）：缓冲区相对浮动（随缓冲区滚动） >lua
        vim.api.nvim_open_win(0, false,
          {relative='win', width=12, height=3, bufpos={100,10}})
<

    示例（Lua）：当前窗口左侧的垂直分割 >lua
        vim.api.nvim_open_win(0, false, {
          split = 'left',
          win = 0
        })
<

    属性：~
        当 |textlock| 激活时不允许
        自 0.4.0 起

    参数：~
      • {buffer}  要显示的缓冲区，或当前缓冲区为 0
      • {enter}   进入窗口（使其成为当前窗口）
      • {config}  定义窗口配置的映射。键：
                  • relative: 将窗口布局设置为“浮动”，放置在 (row,col) 坐标相对于：
                    • "cursor" 当前窗口中的光标位置。
                    • "editor" 全局编辑器网格。
                    • "laststatus" 如果存在 'laststatus'，则为最后一行。
                    • "mouse" 鼠标位置。
                    • "tabline" 如果存在 Tabline，则为第一行。
                    • "win" 由 `win` 字段给出的窗口，或当前窗口。
                  • win: |window-ID| 要分割的窗口，或创建浮动窗口时的相对窗口（relative="win"）。
                  • anchor: 决定将浮动窗口的哪个角放置在 (row,col)：
                    • "NW" 西北（默认）
                    • "NE" 东北
                    • "SW" 西南
                    • "SE" 东南
                  • width: 窗口宽度（以字符单元为单位）。最小值为 1。
                  • height: 窗口高度（以字符单元为单位）。最小值为 1。
                  • bufpos: 将浮动窗口相对于缓冲区文本放置（仅当 relative="win" 时）。接受一个从零开始的 `[line, column]` 元组。如果给定，则 `row` 和 `col` 相对于此位置应用，否则它们默认为：
                    • `row=1` 和 `col=0` 如果 `anchor` 是 "NW" 或 "NE"
                    • `row=0` 和 `col=0` 如果 `anchor` 是 "SW" 或 "SE"（因此像工具提示一样靠近缓冲区文本）。
                  • row: 以“屏幕单元高度”为单位的行位置，可以是小数。
                  • col: 以“屏幕单元宽度”为单位的列位置，可以是小数。
                  • focusable: 通过用户操作（wincmds，鼠标事件）启用焦点。默认为 true。不可聚焦的窗口可以通过 |nvim_set_current_win()| 进入，或者，当 `mouse` 字段设置为 true 时，通过鼠标事件进入。参见 |focusable|。
                  • mouse: 指定此窗口如何与鼠标事件交互。默认为 `focusable` 值。
                    • 如果为 false，鼠标事件将穿过此窗口。
                    • 如果为 true，鼠标事件将正常与此窗口交互。
                  • external: GUI 应将窗口显示为外部顶级窗口。目前不接受与此一起的其他定位配置。
                  • zindex: 堆叠顺序。具有较高 `zindex` 的浮动窗口位于较低索引的浮动窗口之上。必须大于零。以下屏幕元素具有硬编码的 z 索引：
                    • 100: 插入完成弹出菜单
                    • 200: 消息回滚
                    • 250: 命令行完成弹出菜单（当 wildoptions+=pum 时）浮动窗口的默认值为 50。一般来说，建议使用低于 100 的值，除非有充分理由遮盖内置元素。
                  • style: （可选）配置窗口的外观。目前仅支持一个值：
                    • "minimal" Nvim 将以禁用许多 UI 选项的方式显示窗口。这在显示不应编辑的临时浮动窗口时很有用。禁用 'number'、'relativenumber'、'cursorline'、'cursorcolumn'、'foldcolumn'、'spell' 和 'list' 选项。'signcolumn' 更改为 `auto`，'colorcolumn' 被清除。'statuscolumn' 更改为空。通过将 'fillchars' 的 `eob` 标志设置为空格字符并清除 'winhighlight' 中的 |hl-EndOfBuffer| 区域来隐藏缓冲区末尾区域。
                  • border: （可选）窗口边框的样式。这可以是一个字符串或一个数组。字符串值与 'winborder' 中描述的相同。如果是数组，则应具有八个或八的任何除数的长度。数组将以顺时针方向指定构建边框的八个字符，从左上角开始。
                    例如，可以将双框样式指定为：>
                     [ "╔", "═" ,"╗", "║", "╝", "═", "╚", "║" ].
<
                    如果字符数少于八个，它们将被重复。因此可以将 ASCII 边框指定为 >
                     [ "/", "-", \"\\\\\", "|" ],
<
                    或者所有字符相同为 >
                     [ "x" ].
<
                    可以使用空字符串关闭特定边框，例如，>
                     [ "", "", "", ">", "", "", "", "<" ]
<
                    将只制作垂直边框而不是水平边框。默认情况下，使用 `FloatBorder` 高亮，如果未定义则链接到 `WinSeparator`。也可以通过字符指定：>
                     [ ["+", "MyCorner"], ["x", "MyBorder"] ].
<
                  • title: 窗口边框中的标题（可选），字符串或列表。列表应由 `[text, highlight]` 元组组成。如果是字符串，或元组缺少高亮，则默认高亮组为 `FloatTitle`。
                  • title_pos: 标题位置。必须与 `title` 选项一起设置。值可以是 "left"、"center" 或 "right" 之一。默认是 `"left"`。
                  • footer: 窗口边框中的页脚（可选），字符串或列表。列表应由 `[text, highlight]` 元组组成。如果是字符串，或元组缺少高亮，则默认高亮组为 `FloatFooter`。
                  • footer_pos: 页脚位置。必须与 `footer` 选项一起设置。值可以是 "left"、"center" 或 "right" 之一。默认是 `"left"`。
                  • noautocmd: 如果为 true，则在调用期间阻止所有自动命令。
                  • fixed: 如果为 true，当锚点为 NW 或 SW 时，即使窗口被截断，浮动窗口也会保持固定。
                  • hide: 如果为 true，浮动窗口将被隐藏。
                  • vertical: 垂直分割 |:vertical|。
                  • split: 分割方向："left"、"right"、"above"、"below"。

    返回：~
        |window-ID|，或错误时为 0

vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
