*usr_22.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

			       寻找要编辑的文件


文件无处不在。那么如何找到它们呢？Vim 提供了多种方式来浏览目录树。有一些命令可以跳转到另一个文件中提及的文件。并且 Vim 会记住之前编辑过哪些文件。

|22.1|	文件浏览器
|22.2|	当前目录
|22.3|	查找文件
|22.4|	缓冲区列表

     下一章: |usr_23.txt|  编辑其他文件
 上一章: |usr_21.txt|  离开并返回
目录: |usr_toc.txt|

==============================================================================
*22.1*	文件浏览器

Vim 有一个插件，使得编辑目录成为可能。试试这个：>

	:edit .

通过自动命令和 Vim 脚本的神奇作用，窗口将填充目录的内容。它看起来像这样（经过稍微清理以适应 80 个字符以内）：>

  " ===========================================================================
  " Netrw 目录列表                                        (netrw v180)
  "   /path/to/vim/runtime/doc
  "   排序方式：     名称
  "   排序顺序: [\/]$,*,\(\.bak\|\~\|\.o\|\.h\|\.info\|\.swp\)[*@]\=$
  "   快速帮助: <F1>:帮助 -:返回上级目录 D:删除 R:重命名 s:排序方式 x:特殊
  " ===========================================================================
  ../
  ./
  check/
  Makefile
  autocmd.txt
  change.txt
  eval.txt
  filetype.txt
  help.txt.info
<

你可以看到这些项目：

1.  浏览工具的名称及其版本号
2.  浏览目录的名称
3.  排序方法（可以按名称、时间或大小）
4.  名称如何排序（目录优先，然后是 `*.h` 文件，`*.c` 文件等）
5.  如何获取帮助（使用 <F1> 键），以及可用命令的缩写列表
6.  文件列表，包括 "../"，它允许列出父目录。

如果你启用了语法高亮，不同的部分会被高亮显示，以便于识别。

你可以使用普通模式下的 Vim 命令在文本中移动。例如，将光标移动到一个文件上并按 <Enter>；然后你将编辑该文件。要返回浏览器，再次使用 ":edit ."，或使用 ":Explore"。CTRL-O 也有效。

当光标位于目录名称上时，尝试使用 <Enter>。结果是文件浏览器移动到该目录并显示在那里找到的项目。在第一个目录 "../" 上按 <Enter> 会使你向上移动一级。按 "-" 做同样的事情，无需先移动到 "../" 项目。

你可以按 <F1> 获取在 netrw 文件浏览器中可以执行的操作的帮助。这是你得到的内容：>

    9. 目录浏览	 netrw-browse   netrw-dir   netrw-list   netrw-help

    映射								 netrw-maps
	 <F1>.............帮助.......................................|netrw-help|
	 <cr>.............浏览...................................|netrw-cr|
	 <del>............删除文件或目录..............|netrw-delete|
	 -................返回上级目录...................................|netrw--|
	 a................隐藏文件或目录................|netrw-a|
	 mb...............标记目录....................|netrw-mb|
	 gb...............切换到已标记的目录.........|netrw-gb|
	 cd...............使浏览目录成为当前目录....|netrw-c|
	 d................创建新目录.......................|netrw-d|
	 D................删除文件或目录..............|netrw-D|
	 <c-h>............编辑文件/目录隐藏列表............|netrw-ctrl-h|
	 i................更改列表样式.......................|netrw-i|
	 <c-l>............刷新列表.....................|netrw-ctrl-l|
	 o................水平分割窗口浏览...........|netrw-o|
	 p................使用预览窗口.........................|netrw-p|
	 P................在先前窗口中编辑....................|netrw-p|
	 q................列出书签和历史..............|netrw-qb|
	 r................反转排序顺序....................|netrw-r|
<	(等等)

因此，<F1> 键将带你进入 netrw 目录浏览内容帮助页面。这是一个常规的帮助页面；使用通常的 |CTRL-]| 跳转到带标签的帮助项目，使用 |CTRL-O| 跳回。

要选择要显示和编辑的文件：（光标位于文件名上时）

	<enter>		在当前窗口中打开文件。	   |netrw-cr|
	o		水平分割窗口并显示文件 |netrw-o|
	v		垂直分割窗口并显示文件   |netrw-v|
	p		使用 |preview-window|		   |netrw-p|
	P		在先前窗口中编辑		   |netrw-P|
	t		在新标签页中打开文件			   |netrw-t|

以下普通模式命令可用于控制浏览器显示：

	i		控制列表样式（精简、详细、宽式和树状）。
			详细列表包括大小和日期信息。
	s		重复按 s 将改变文件的排序方式；可以按名称、修改时间或大小排序。
	r		反转排序顺序。

作为额外普通模式命令的示例：

	cd		将 Vim 的当前目录概念更改为与浏览器目录相同。（另请参阅 |g:netrw_keepdir| 来控制此行为）
	R		重命名光标下的文件或目录；将提示输入新名称。
	D		删除光标下的文件或目录；将发出确认请求。
	mb gb		创建书签/转到书签

也可以使用命令模式；同样，仅举几例：

	:Explore [目录]	浏览指定/当前目录
	:NetrwSettings		你当前 netrw 设置的全面列表，带有帮助链接。

netrw 浏览器不仅限于你的本地机器；可以使用如下网址：（尾部的 / 很重要）

	:Explore ftp://某主机/路径/到/目录/
	:e scp://某主机/路径/到/目录/

更多信息请参阅 |netrw-browse|。

==============================================================================
*22.2*	当前目录

与 shell 一样，Vim 也有当前目录的概念。假设你在你的主目录中，想要编辑目录 "VeryLongFileName" 中的几个文件。你可以这样做：>

	:edit VeryLongFileName/file1.txt
	:edit VeryLongFileName/file2.txt
	:edit VeryLongFileName/file3.txt

为了避免输入太多，可以这样做：>

	:cd VeryLongFileName
	:edit file1.txt
	:edit file2.txt
	:edit file3.txt

":cd" 命令更改当前目录。你可以使用 ":pwd" 命令查看当前目录是什么：>

	:pwd
	/home/Bram/VeryLongFileName

Vim 会记住你使用的上一个目录。使用 "cd -" 返回该目录。示例：>

	:pwd
	/home/Bram/VeryLongFileName
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/VeryLongFileName
	:cd -
	:pwd
	/etc


窗口本地目录

当你分割窗口时，两个窗口使用相同的当前目录。
当你想在新窗口中编辑位于别处的一些文件时，你可以让它使用不同的目录，而不改变另一个窗口中的当前目录。这称为本地目录。 >

	:pwd
	/home/Bram/VeryLongFileName
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/VeryLongFileName

只要没有使用过 `:lcd` 命令，所有窗口共享相同的当前目录。在一个窗口中执行 `:cd` 命令也会改变另一个窗口的当前目录。
   对于使用过 `:lcd` 的窗口，会记住一个不同的当前目录。在其他窗口中使用 `:cd` 或 `:lcd` 不会改变它。
   在使用不同当前目录的窗口中使用 `:cd` 命令时，它将恢复使用共享目录。


标签页本地目录

当你打开一个新的标签页时，它使用从中打开新标签页的前一个标签页中窗口的目录。你可以使用 `:tcd` 命令更改当前标签页的目录。标签页中的所有窗口共享此目录，除非窗口具有窗口本地目录。在此标签页中打开的任何新窗口都将使用此目录作为当前工作目录。在标签页中使用 `:cd` 命令不会更改具有标签页本地目录的标签页的工作目录。当在标签页中使用 `:cd` 命令更改全局工作目录时，它也会更改当前标签页的工作目录。


==============================================================================
*22.3*	查找文件

你正在编辑一个包含这行的 C 程序：

	#include "inits.h" ~

你想看看那个 "inits.h" 文件里有什么。将光标移动到文件名上并输入：>

	gf

Vim 将找到该文件并编辑它。
   如果文件不在当前目录中怎么办？Vim 将使用 'path' 选项来查找文件。此选项是要查找文件的目录名称列表。
   假设你的包含文件位于 "c:/prog/include"。这个命令会将其添加到 'path' 选项中：>

	:set path+=c:/prog/include

这个目录是一个绝对路径。无论你在哪里，它都是同一个位置。如果你在文件所在位置的下方子目录中定位了文件怎么办？那么你可以指定一个相对路径名。它以点开始：>
	:set path+=./proto

这告诉 Vim 在你使用 "gf" 的文件所在目录下的 "proto" 目录中查找。因此，在 "inits.h" 上使用 "gf" 将使 Vim 从该文件所在的目录开始查找 "proto/inits.h"。
   没有 "./"，即只有 "proto"，Vim 将在当前目录下的 "proto" 目录中查找。而当前目录可能不是你正在编辑的文件所在的位置。

'path' 选项允许以更多方式指定搜索文件的目录。请参阅关于 'path' 选项的帮助。
   'isfname' 选项用于决定哪些字符包含在文件名中，哪些不包含（例如，上面示例中的 " 字符）。

当你知道文件名，但它在文件中找不到时，你可以输入它：>

	:find inits.h

然后 Vim 将使用 'path' 选项尝试定位文件。这与 ":edit" 命令相同，除了使用 'path' 之外。

要在新窗口中打开找到的文件，请使用 CTRL-W f 而不是 "gf"，或者使用 ":sfind" 而不是 ":find"。

直接在 'path' 中某处启动 Vim 来编辑文件的好方法：>

	vim "+find stdio.h"

这会在你的 'path' 值中找到文件 "stdio.h"。引号是必要的，以便有一个参数 |-+c|。

==============================================================================
*22.4*	缓冲区列表

Vim 编辑器使用术语缓冲区来描述正在编辑的文件。实际上，缓冲区是你编辑的文件的一个副本。当你完成对缓冲区的更改时，你将缓冲区的内容写入文件。缓冲区不仅包含文件内容，还包含所有与之相关的标记、设置和其他内容。


隐藏缓冲区

假设你正在编辑文件 one.txt 并需要编辑文件 two.txt。你可以简单地使用 ":edit two.txt"，但由于你对 one.txt 进行了更改，这将不起作用。你还不想写 one.txt。Vim 为你提供了一个解决方案：>

	:hide edit two.txt

缓冲区 "one.txt" 从屏幕上消失，但 Vim 仍然知道你正在编辑这个缓冲区，因此它保留修改过的文本。这称为隐藏缓冲区：缓冲区包含文本，但你看不到它。
   ":hide" 的参数是另一个命令。":hide" 使该命令的行为就像设置了 'hidden' 选项一样。你也可以自己设置这个选项。效果是当任何缓冲区被放弃时，它变为隐藏。
   小心！当你有更改过的隐藏缓冲区时，在没有确保已保存所有缓冲区之前，不要退出 Vim。


非活动缓冲区

   当一个缓冲区被使用过一次后，Vim 会记住它的一些信息。当它没有显示在窗口中并且它不是隐藏的时，它仍然在缓冲区列表中。这称为非活动缓冲区。概述：

   活动		出现在窗口中，文本已加载。
   隐藏		不在窗口中，文本已加载。
   非活动		不在窗口中，文本未加载。

非活动缓冲区被记住，因为 Vim 保留了关于它们的信息，比如标记。记住文件名也很有用，这样你就可以看到你编辑过哪些文件。并再次编辑它们。


列出缓冲区

使用此命令查看缓冲区列表：>

	:buffers

一个作用相同但列出缓冲区不那么明显，但输入更短的命令是：>

	:ls

输出可能如下所示：

  1 #h   "help.txt"			line 62 ~
  2 %a + "usr_21.txt"			line 1 ~
  3      "usr_toc.txt"			line 1 ~

第一列包含缓冲区编号。你可以使用它来编辑缓冲区，而无需键入名称，见下文。
   缓冲区编号之后是标志。然后是文件名和光标最后一次所在的行号。
   可以出现的标志如下（从左到右）：

	u	缓冲区未列出 |unlisted-buffer|。
	 %	当前缓冲区。
	 #	交替缓冲区。
	  a	缓冲区已加载并显示。
	  h	缓冲区已加载但隐藏。
	   =	缓冲区只读。
	   -	缓冲区不可修改，'modifiable' 选项已关闭。
	    +	缓冲区已被修改。


编辑缓冲区

你可以通过编号来编辑缓冲区。这样就避免了输入文件名：>

	:buffer 2

但是知道编号的唯一方法是查看缓冲区列表。你可以改用名称或部分名称：>

	:buffer help

Vim 将为你键入的名称找到最佳匹配。如果只有一个缓冲区匹配该名称，它将被使用。在这种情况下是 "help.txt"。
   要在新窗口中打开缓冲区：>

	:sbuffer 3

这也可以使用名称。


使用缓冲区列表

你可以使用这些命令在缓冲区列表中移动：

	:bnext		转到下一个缓冲区
	:bprevious	转到上一个缓冲区
	:bfirst		转到第一个缓冲区
	:blast		转到最后一个缓冲区

要从列表中移除缓冲区，请使用此命令：>

	:bdelete 3

同样，这也可以使用名称。
   如果你删除一个活动缓冲区（在窗口中可见），该窗口将被关闭。如果你删除当前缓冲区，当前窗口将被关闭。如果它是最后一个窗口，Vim 将找到另一个缓冲区进行编辑。你不能什么都不编辑！

	注意：
	即使使用 ":bdelete" 移除缓冲区后，Vim 仍然记得它。
	它实际上被设置为 "未列出"，不再出现在 ":buffers" 的列表中。":buffers!" 命令将列出未列出的缓冲区（是的，Vim 可以做不可能的事情）。要真正让 Vim 忘记一个缓冲区，请使用 ":bwipe"。另请参阅 'buflisted' 选项。

==============================================================================

下一章: |usr_23.txt|  编辑其他文件

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
