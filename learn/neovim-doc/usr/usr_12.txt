*usr_12.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

				巧妙技巧


通过组合几个命令，您可以让 Vim 做几乎所有事情。本章将介绍一些有用的组合。这使用了前面章节介绍的命令以及一些其他命令。

|12.1|	替换单词
|12.2|	将 "Last, First" 改为 "First Last"
|12.3|	排序列表
|12.4|	反转行顺序
|12.5|	计数单词
|12.6|	查找手册页
|12.7|	修剪空白
|12.8|	查找单词使用位置

     下一章: |usr_20.txt|  快速输入命令行命令
 上一章: |usr_11.txt|  从崩溃中恢复
     目录: |usr_toc.txt|

==============================================================================
*12.1*	替换单词

替换命令可用于将一个单词的所有出现替换为另一个单词：>

	:%s/four/4/g

"%" 范围表示在所有行中替换。末尾的 "g" 标志导致一行中的所有单词都被替换。
   如果您的文件还包含 "thirtyfour"，这将不会正确执行。它将被替换为 "thirty4"。为避免这种情况，使用 "\<" 项来匹配单词的开头：>

	:%s/\<four/4/g

显然，这在 "fourteen" 上仍然出错。使用 "\>" 来匹配单词的结尾：>

	:%s/\<four\>/4/g

如果您正在编程，您可能希望替换注释中的 "four"，但不替换代码中的。由于这很难指定，添加 "c" 标志让替换命令提示您每次替换：>

	:%s/\<four\>/4/gc


在多个文件中替换

假设您想在多个文件中替换一个单词。您可以编辑每个文件并手动输入命令。使用录制和回放要快得多。
   假设您有一个包含 C++ 文件的目录，所有文件都以 ".cpp" 结尾。有一个名为 "GetResp" 的函数，您想将其重命名为 "GetAnswer"。

	vim *.cpp		启动 Vim，定义参数列表包含所有 C++ 文件。您现在在第一个文件中。
	qq			开始录制到 q 寄存器
	:%s/\<GetResp\>/GetAnswer/g
				在第一个文件中进行替换。
	:wnext			写入此文件并移动到下一个文件。
	q			停止录制。
	@q			执行 q 寄存器。这将回放替换和 ":wnext"。您可以验证这不会产生错误消息。
	999@q			在剩余文件上执行 q 寄存器。

在最后一个文件，您将收到错误消息，因为 ":wnext" 无法移动到下一个文件。这将停止执行，所有操作都已完成。

	注意:
	当回放录制的序列时，错误会停止执行。因此，请确保在录制时不会收到错误消息。

有一个陷阱：如果某个 .cpp 文件不包含单词 "GetResp"，您将收到错误并且替换将停止。为避免这种情况，在替换命令中添加 "e" 标志：>

	:%s/\<GetResp\>/GetAnswer/ge

"e" 标志告诉 ":substitute" 未找到匹配项不是错误。

==============================================================================
*12.2*	将 "Last, First" 改为 "First Last"

您有一个这种形式的名称列表：

	Doe, John ~
	Smith, Peter ~

您想将其更改为：

	John Doe ~
	Peter Smith ~

这可以通过一个命令完成：>

	:%s/\([^,]*\), \(.*\)/\2 \1/

让我们分解一下各部分。显然它以替换命令开始。"%" 是行范围，代表整个文件。因此替换在文件中的每一行进行。
   替换命令的参数是 "/from/to/"。斜杠分隔 "from" 模式和 "to" 字符串。这是 "from" 模式包含的内容：
							\([^,]*\), \(.*\) ~

	第一个 \( \) 之间的部分匹配 "Last"	\(     \)
	    匹配除逗号外的任何字符		  [^,]
	    任意次数				      *
	字面匹配 ", "					 ,
	第二个 \( \) 之间的部分匹配 "First"		   \(  \)
	    任意字符					     .
	    任意次数					      *

在 "to" 部分，我们有 "\2" 和 "\1"。这些称为反向引用。它们引用模式中 "\( \)" 部分匹配的文本。"\2" 引用第二个 "\( \)" 匹配的文本，即 "First" 名。"\1" 引用第一个 "\( \)"，即 "Last" 姓。
   您可以在替换命令的 "to" 部分使用最多九个反向引用。"\0" 代表整个匹配的模式。替换命令中还有一些特殊项，请参阅 |sub-replace-special|。

==============================================================================
*12.3*	排序列表

在 Makefile 中，您经常有一个文件列表。例如：

	OBJS = \ ~
		version.o \ ~
		pch.o \ ~
		getopt.o \ ~
		util.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		backup.o ~

要排序此列表，通过外部 sort 命令过滤文本：>

	/^OBJS
	j
	:.,/^$/-1!sort

这转到第一行，其中 "OBJS" 是行首的内容。然后向下移动一行，并过滤行直到下一个空行。您也可以在可视模式中选择行，然后使用 "!sort"。这样输入更容易，但当有很多行时更费事。
   结果是这样的：

	OBJS = \ ~
		backup.o ~
		getopt.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		pch.o \ ~
		util.o \ ~
		version.o \ ~


请注意，每行末尾使用反斜杠表示该行继续。排序后，这是错误的！原本在末尾的 "backup.o" 行没有反斜杠。现在它排序到另一个位置，它必须有反斜杠。
   最简单的解决方案是使用 "A \<Esc>" 添加反斜杠。您可以将反斜杠保留在最后一行，如果您确保其后有一个空行。这样您就不会再次遇到此问题。

==============================================================================
*12.4*	反转行顺序

|:global| 命令可以与 |:move| 命令结合使用，将所有行移动到第一行之前，从而反转文件。命令是：>

	:global/^/move 0

缩写：>

	:g/^/m 0

"^" 正则表达式匹配行首（即使该行为空）。|:move| 命令将匹配的行移动到虚构的第零行之后，因此当前匹配的行成为文件的第一行。由于 |:global| 命令不会因行号变化而混淆，|:global| 继续匹配文件中的所有剩余行并将每一行作为第一行。

这也适用于一定范围的行。首先移动到第一行上方并用 "mt" 标记它。然后将光标移动到范围内的最后一行并输入：>

	:'t+1,.g/^/m 't

==============================================================================
*12.5*	计数单词

有时您必须编写一个具有最大单词数的文本。Vim 可以为您计数单词。
   当整个文件是您想要计数的内容时，使用此命令：>

	g CTRL-G

不要在 g 后输入空格，这里使用空格只是为了便于阅读命令。
   输出看起来像这样：

	Col 1 of 0; Line 141 of 157; Word 748 of 774; Byte 4489 of 4976 ~

您可以看到您位于哪个单词（748），以及文件中的总单词数（774）。

当文本只是文件的一部分时，您可以移动到文本开头，输入 "g CTRL-G"，移动到文本结尾，再次输入 "g CTRL-G"，然后使用您的大脑计算单词位置的差异。这是一个很好的练习，但有一个更简单的方法。使用可视模式，选择您想要计数单词的文本。然后输入 g CTRL-G。结果：

	Selected 5 of 293 Lines; 70 of 1884 Words; 359 of 10928 Bytes ~

有关计数单词、行和其他项目的其他方法，请参阅 |count-items|。

==============================================================================
*12.6*	查找手册页				*find-manpage*

在编辑 shell 脚本或 C 程序时，您正在使用一个命令或函数，您想查找其手册页（这是在 Unix 上）。让我们首先使用一个简单的方法：将光标移动到您想要查找帮助的单词上并按>

	K

Nvim 将在该单词上运行 |:Man|。如果找到手册页，它将显示出来。您也可以使用 |:Man| 命令在手册页上打开一个窗口：>

	:Man csh

您可以滚动查看，并且文本会高亮显示。这允许您找到您正在寻找的帮助。使用 CTRL-W w 跳转到您正在处理的文本窗口。
   要在特定部分查找手册页，请将节号放在前面。例如，要在第 3 节中查找 "echo"：>

	:Man 3 echo

要跳转到另一个手册页，该手册页在文本中具有典型形式 "word(1)"，请在其上按 CTRL-]。进一步的 ":Man" 命令将使用同一个窗口。

要显示光标下单词的手册页，请使用：>

	K

例如，在编辑此行时，您想知道 "strstr()" 的返回值：

	if ( strstr (input, "aap") == ) ~

将光标移动到 "strstr" 上的某处并输入 "K"。将打开一个窗口来显示 strstr() 的手册页。

==============================================================================
*12.7*	修剪空白

有些人认为行尾的空格和制表符无用、浪费且丑陋。要删除每行末尾的空白，执行以下命令：>

	:%s/\s\+$//

使用了行范围 "%"，因此这在整个文件上工作。":substitute" 命令匹配的模式是 "\s\+$"。这找到空白字符 (\s)，一个或多个 (+)，在行尾 ($) 之前。稍后将解释如何编写这样的模式，请参阅 |usr_27.txt|。
   替换命令的 "to" 部分为空："//"。因此它用空替换，有效地删除匹配的空白。

另一种浪费使用空格的方式是在制表符之前放置空格。通常这些可以被删除而不改变空白量。但并非总是如此！因此，您最好手动执行此操作。使用此搜索命令：>

	/ 	

您看不到，但此命令中有一个空格在制表符之前。因此它是 "/<Space><Tab>"。现在使用 "x" 删除空格并检查空白量是否改变。如果改变，您可能必须插入一个制表符。输入 "n" 查找下一个匹配项。重复此操作，直到找不到更多匹配项。

==============================================================================
*12.8*	查找单词使用位置

如果您是 Unix 用户，您可以使用 Vim 和 grep 命令的组合来编辑包含给定单词的所有文件。如果您正在处理一个程序并希望查看或编辑包含特定变量的所有文件，这非常有用。
   例如，假设您想要编辑所有包含单词 "frame_counter" 的 C 程序文件。为此，您使用命令：>

	vim `grep -l frame_counter *.c`

让我们详细查看此命令。grep 命令在一组文件中搜索给定单词。由于指定了 -l 参数，该命令将仅列出包含该单词的文件，而不打印匹配的行。它搜索的单词是 "frame_counter"。实际上，这可以是任何正则表达式。（注意：grep 使用的正则表达式与 Vim 使用的并不完全相同。）
   整个命令用反引号 (`) 括起来。这告诉 Unix shell 运行此命令并假装结果是在命令行上输入的。所以发生的情况是 grep 命令运行并产生一个文件列表，这些文件被放在 Vim 命令行上。这导致 Vim 编辑作为 grep 输出的文件列表。然后您可以使用 ":next" 和 ":first" 等命令浏览文件。


查找每一行

上述命令仅找到单词所在的文件。您仍然必须在文件中找到该单词。
   Vim 有一个内置命令，您可以使用它在一组文件中搜索给定字符串。例如，如果您想在所有 C 程序文件中找到 "error_string" 的所有出现，输入以下命令：>

	:grep error_string *.c

这导致 Vim 在所有指定文件 (`*.c`) 中搜索字符串 "error_string"。编辑器现在将打开找到匹配的第一个文件，并将光标定位在第一个匹配行上。要转到下一个匹配行（无论在哪个文件中），使用 ":cnext" 命令。要转到上一个匹配，使用 ":cprev" 命令。使用 ":clist" 查看所有匹配及其位置。
   ":grep" 命令使用外部命令 grep（在 Unix 上）或 findstr（在 Windows 上）。您可以通过设置选项 'grepprg' 来更改此设置。

==============================================================================

下一章: |usr_20.txt|  快速输入命令行命令

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
