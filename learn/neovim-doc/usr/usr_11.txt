*usr_11.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

			   从崩溃中恢复


您的计算机崩溃了吗？而您刚刚花了几个小时进行编辑？不要惊慌！Vim 存储了足够的信息，能够恢复您的大部分工作。本章向您展示如何恢复工作，并解释交换文件的使用方式。

|11.1|	基本恢复
|11.2|	交换文件在哪里？
|11.3|	崩溃了还是没崩溃？
|11.4|	进一步阅读

     下一章: |usr_12.txt|  巧妙技巧
 上一章: |usr_10.txt|  进行大更改
     目录: |usr_toc.txt|

==============================================================================
*11.1*	基本恢复

在大多数情况下，恢复文件非常简单，假设您知道正在编辑哪个文件（并且硬盘仍然工作）。在文件上启动 Vim，并添加 "-r" 参数：>

	vim -r help.txt

Vim 将读取交换文件（用于存储您正在编辑的文本）并可能读取原始文件的片段。如果 Vim 恢复了您的更改，您将看到这些消息（当然，文件名会不同）：

	Using swap file ".help.txt.swp" ~
	Original file "~/vim/runtime/doc/help.txt" ~
	Recovery completed. You should check if everything is OK. ~
	(You might want to write out this file under another name ~
	and run diff with the original file to check for changes) ~
	You may want to delete the .swp file now. ~

为了安全起见，将此文件以另一个名称写入：>

	:write help.txt.recovered

将文件与原始文件进行比较，以检查是否得到了预期的结果。差异模式对此非常有用 |08.7|。例如：>

	:write help.txt.recovered
	:edit #
	:diffsp help.txt

注意原始文件可能包含更新的版本（您在计算机崩溃前保存了文件）。并检查是否有行丢失（发生了 Vim 无法恢复的错误）。
   如果 Vim 在恢复时产生警告消息，请仔细阅读它们。不过这种情况很少见。

如果恢复的文本与文件内容完全相同，您将收到此消息：

	Using swap file ".help.txt.swp" ~
	Original file "~/vim/runtime/doc/help.txt" ~
	Recovery completed. Buffer contents equals file contents. ~
	You may want to delete the .swp file now. ~

这通常发生在您已经恢复了更改，或者在更改后写入了文件的情况下。现在删除交换文件是安全的。

最后几次更改无法恢复是正常的。当您大约四秒没有输入时，或者在输入大约两百个字符后，Vim 会将更改刷新到磁盘。这是通过 'updatetime' 和 'updatecount' 选项设置的。因此，当系统关闭时 Vim 没有机会保存自己，最后一次刷新之后的更改将会丢失。

如果您在没有文件名的情况下进行编辑，请给出一个空字符串作为参数：>

	vim -r ""

您必须在正确的目录中，否则 Vim 找不到交换文件。

==============================================================================
*11.2*	交换文件在哪里？

Vim 可以将交换文件存储在几个地方。要找到它，请切换到文件所在的目录，并使用：>

	vim -r

Vim 将列出它能找到的交换文件。它还会在其他可能存放当前目录文件交换文件的目录中查找。不过，它不会在任何其他目录中查找交换文件，它不会搜索目录树。
   输出可能如下所示：

	Swap files found: ~
	   In current directory: ~
	1.    .main.c.swp ~
		  owned by: mool   dated: Tue May 29 21:00:25 2001 ~
		 file name: ~mool/vim/vim6/src/main.c ~
		  modified: YES ~
		 user name: mool   host name: masaka.moolenaar.net ~
		process ID: 12525 ~
	   In directory ~/tmp: ~
	      -- none -- ~
	   In directory /var/tmp: ~
	      -- none -- ~
	   In directory /tmp: ~
	      -- none -- ~

如果有几个交换文件看起来可能是您想要使用的，将给出这些交换文件的列表，并要求您输入要使用的交换文件的编号。仔细查看日期以决定要使用哪一个。
   如果您不知道要使用哪一个，只需逐个尝试，并检查结果文件是否符合您的预期。


使用特定的交换文件

如果您知道需要使用哪个交换文件，可以通过给出交换文件名来恢复。Vim 然后将从交换文件中找出原始文件的名称。

示例：>
	vim -r .help.txt.swo

当交换文件位于预期之外的目录时，这也很有用。Vim 将匹配模式 "*.s[uvw][a-z]" 的文件识别为交换文件。

如果这仍然不起作用，请查看 Vim 报告的文件名并相应地重命名文件。检查 'directory' 选项以查看 Vim 可能将交换文件放在哪里。

	注意:
	Vim 尝试通过搜索 'dir' 选项中的目录来查找交换文件，寻找匹配 "filename.sw?" 的文件。如果通配符扩展不起作用（例如，当 'shell' 选项无效时），Vim 会尝试查找文件 "filename.swp"。如果这也失败，您将必须给出交换文件本身的名称才能恢复文件。

==============================================================================
*11.3*	崩溃了还是没崩溃？				*ATTENTION* *E325*

Vim 试图保护您免于做愚蠢的事情。假设您天真地开始编辑一个文件，期望显示文件的内容。相反，Vim 产生了一条很长的消息：

		E325: 注意 ~
	发现名为 ".main.c.swp" 的交换文件 ~
		  owned by: mool   dated: Tue May 29 21:09:28 2001 ~
		 file name: ~mool/vim/vim6/src/main.c ~
		  modified: no ~
		 user name: mool   host name: masaka.moolenaar.net ~
		process ID: 12559 (still running) ~
	While opening file "main.c" ~
		     dated: Tue May 29 19:46:12 2001 ~
 ~
	(1) 另一个程序可能正在编辑同一个文件。 ~
	    如果是这种情况，请小心在进行更改时不要最终得到同一文件的两个不同实例。 ~
	    退出，或谨慎继续。 ~
 ~
	(2) 此文件的编辑会话崩溃了。 ~
	    如果是这种情况，请使用 ":recover" 或 "vim -r main.c" ~
	    来恢复更改（参见 ":help recovery"）。 ~
	    如果您已经这样做了，请删除交换文件 ".main.c.swp" ~
	    以避免此消息。 ~

您收到此消息是因为，在开始编辑文件时，Vim 检查是否已存在该文件的交换文件。如果存在，则一定有问题。可能是以下两种情况之一。

1. 另一个编辑会话正在此文件上活动。查看消息中带有 "process ID" 的行。它可能看起来像这样：

		process ID: 12559 (still running) ~

   文本 "(still running)" 表示编辑此文件的进程在同一台计算机上运行。在非 Unix 系统上工作时，您不会得到这个额外的提示。当通过网络编辑文件时，您可能看不到提示，因为该进程可能正在另一台计算机上运行。在这两种情况下，您必须自己弄清楚情况。
      如果有另一个 Vim 正在编辑同一个文件，继续编辑将导致同一文件的两个版本。最后写入的文件将覆盖另一个，导致更改丢失。您最好退出这个 Vim。

2. 交换文件可能是之前 Vim 或计算机崩溃的结果。检查消息中提到的日期。如果交换文件的日期比您正在编辑的文件新，并且出现这一行：

		modified: YES ~

   那么您很可能有一个值得恢复的崩溃编辑会话。
      如果文件的日期比交换文件的日期新，那么要么是在崩溃后更改了文件（也许您之前已经恢复了它，但没有删除交换文件？），要么是文件在崩溃前但在交换文件最后一次写入之后保存了（那么您很幸运：您甚至不需要那个旧的交换文件）。Vim 将用这额外的一行警告您这一点：

      NEWER than swap file! ~


注意在以下情况下，Vim 知道交换文件没有用，并将自动删除它：
- 该文件是有效的交换文件（魔数正确）。
- 文件已修改的标志未设置。
- 进程未运行。

您可以使用 |FileChangedShell| 自动命令事件以编程方式处理这种情况。


无法读取的交换文件 ~

有时在交换文件名下会出现这一行：

	[cannot be read] ~

这可能是好事也可能是坏事，取决于情况。

如果之前的编辑会话崩溃但没有对文件进行任何更改，这是好事。那么交换文件的目录列表将显示其为零字节。您可以删除它并继续。

如果您没有交换文件的读取权限，这有点糟糕。您可能希望以只读方式查看文件，或者退出。在多用户系统上，如果您自己在另一个登录名下进行了最后一次更改，注销然后以另一个名称登录可能会解决"读取错误"。或者，您可能想找出最后编辑（或正在编辑）该文件的人并与他们交谈。

如果这意味着包含交换文件的磁盘存在物理读取错误，那就非常糟糕了。幸运的是，这几乎从未发生。您可能希望首先以只读方式查看文件（如果可以），以查看被"遗忘"的更改范围。如果您是负责该文件的人，请准备好重做您最后的更改。


该怎么做？					*swap-exists-choices*

如果支持对话框，您将被要求从六个选项中选择一个：

  Swap file ".main.c.swp" already exists! ~
  [O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort, (D)elete it: ~

O  以只读方式打开文件。当您只想查看文件而不需要恢复它时使用此选项。当您知道其他人正在编辑文件，但您只是想查看它而不进行更改时，您可能想使用此选项。

E  仍然编辑文件。谨慎使用此选项！如果文件正在另一个 Vim 中编辑，您可能会最终得到该文件的两个版本。当这种情况发生时，Vim 会尝试警告您，但安全总比后悔好。

R  从交换文件恢复文件。如果您知道交换文件包含您想要恢复的更改，请使用此选项。

Q  退出。这避免开始编辑文件。当有另一个 Vim 正在编辑同一文件时，请使用此选项。
      当您刚启动 Vim 时，这将退出 Vim。当使用多个窗口中的文件启动 Vim 时，仅当第一个文件存在交换文件时，Vim 才会退出。当使用编辑命令时，文件将不会被加载，您将返回到之前编辑的文件。

A  中止。与退出类似，但也中止进一步的命令。这在加载编辑多个文件的脚本时很有用，例如具有多个窗口的会话。

D  删除交换文件。当您确定不再需要它时使用此选项。例如，当它不包含更改时，或者当文件本身比交换文件新时。
      在 Unix 上，仅当创建交换文件的进程似乎未运行时才提供此选择。

如果您没有获得对话框（您运行的 Vim 版本不支持它），您将必须手动操作。要恢复文件，请使用此命令：>

	:recover


Vim 并不总是能检测到文件已存在交换文件。当其他编辑会话将交换文件放在另一个目录中，或者当在不同机器上编辑文件时路径名不同时，就会发生这种情况。因此，不要依赖 Vim 总是警告您。

如果您真的不想看到此消息，可以将 'A' 标志添加到 'shortmess' 选项。但您需要这样做是非常不寻常的。

有关交换文件的编程访问，请参阅 |swapinfo()|。

==============================================================================
*11.4*	进一步阅读

|swap-file|	关于将在何处创建交换文件及其名称的说明。
|:preserve|	手动将交换文件刷新到磁盘。
|:swapname|	查看当前文件的交换文件名。
'updatecount'	将交换文件刷新到磁盘之前的击键次数。
'updatetime'	将交换文件刷新到磁盘之前的超时时间。
'directory'	用于存储交换文件的目录名列表。

==============================================================================

下一章: |usr_12.txt|  巧妙技巧

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
