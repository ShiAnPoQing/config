*usr_02.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar

			      Vim 的第一步


本章提供足够的信息让您能用 Vim 编辑文件。不一定编辑得很好或很快，但您可以编辑。花些时间练习这些命令，它们构成了后续内容的基础。

|02.1|	第一次运行 Vim
|02.2|	插入文本
|02.3|	移动
|02.4|	删除字符
|02.5|	撤销和重做
|02.6|	其他编辑命令
|02.7|	退出
|02.8|	获取帮助

     下一章: |usr_03.txt|  移动
 上一章: |usr_01.txt|  关于手册
目录: |usr_toc.txt|

==============================================================================
*02.1*	第一次运行 Vim

要启动 Nvim，输入以下命令： >

	nvim file.txt

在 Unix 上，您可以在任何命令提示符下输入此命令。如果您运行的是 Microsoft Windows，请打开命令提示符并输入该命令。无论哪种情况，Vim 都会开始编辑一个名为 file.txt 的文件。因为这是一个新文件，您会得到一个空白的窗口。您的屏幕将如下所示：
>
	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [New]			|
	+---------------------------------------+
		('#' 是光标位置。)
<
波浪号 (~) 行表示文件中不存在的行。换句话说，当 Vim 没有文件内容可显示时，它会显示波浪号行。在屏幕底部，一条消息行指示文件名为 file.txt，并显示您正在创建一个新文件。消息信息是临时的，其他信息会覆盖它。

==============================================================================
*02.2*	插入文本

Vim 编辑器是一个模态编辑器。这意味着编辑器的行为会根据您所处的模式而有所不同。两种基本模式称为普通模式 (Normal mode) 和插入模式 (Insert mode)。在普通模式下，您键入的字符是命令。在插入模式下，字符作为文本被插入。
   由于您刚刚启动 Vim，它将处于普通模式。要启动插入模式，您需要键入 "i" 命令 (i 代表 Insert)。然后您可以输入文本。它将被插入到文件中。如果您犯了错误，请不要担心；您可以稍后更正。要输入下面这个程序员的打油诗，您需要键入： >

	iA very intelligent turtle
	Found programming Unix a hurdle

输入 "turtle" 后，您按 <Enter> 键开始新的一行。最后您按 <Esc> 键停止插入模式并返回普通模式。您现在在 Vim 窗口中有两行文本：
>
	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
<

当前是什么模式？

要能看到您处于什么模式，请键入此命令： >

	:set showmode

您会注意到，在键入冒号时，Vim 将光标移动到窗口的最后一行。那是您键入冒号命令（以冒号开头的命令）的地方。通过按 <Enter> 键完成此命令（所有以冒号开头的命令都以这种方式完成）。
   现在，如果您键入 "i" 命令，Vim 将在窗口底部显示 --INSERT--。这表明您处于插入模式。
>
	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+
<
如果您按 <Esc> 返回普通模式，最后一行将变为空白。


摆脱困境

Vim 新手的一个问题是模式混淆，这是由于忘记了自己处于哪种模式或意外键入了切换模式的命令引起的。要返回普通模式，无论您处于何种模式，请按 <Esc> 键。有时您需要按两次。如果 Vim 发出蜂鸣声，说明您已经处于普通模式。

==============================================================================
*02.3*	移动

返回普通模式后，您可以使用以下键移动：

	h   左						*hjkl*
	j   下
	k   上
	l   右

起初，这些命令可能看起来是随机选择的。毕竟，谁听说过用 l 表示右？但实际上，这些选择有很好的理由：移动光标是您在编辑器中最常做的事情，而这些键位于您右手的 home row 上。换句话说，这些命令被放置在您可以最快键入它们的地方（尤其是当您用十指打字时）。

	注意：
	您也可以使用方向键移动光标。但是，如果您这样做，会大大降低编辑速度，因为要按方向键，您必须将手从文本键移到方向键上。
	考虑到您可能每小时这样做数百次，这会花费大量时间。
	   此外，有些键盘没有方向键，或者将方向键放在不寻常的位置；因此，了解 hjkl 键的使用在这些情况下会有所帮助。

记住这些命令的一种方法是 h 在左边，l 在右边，j 指向下方。用图表示： >

		       k
		   h     l
		     j

学习这些命令的最佳方法是使用它们。使用 "i" 命令插入更多文本行。然后使用 hjkl 键移动并在某处插入一个单词。不要忘记按 <Esc> 返回普通模式。|:Tutor| 也是一个通过实践学习的好方法。

对于日语用户，Hiroshi Iwatani 建议使用这个：

			Komsomolsk
			    ^
			    |
	   Huan Ho	<--- --->  Los Angeles
	(Yellow river)	    |
			    v
			  Java (指岛屿，不是编程语言)

==============================================================================
*02.4*	删除字符

要删除一个字符，将光标移到它上面并键入 "x"。（这是对旧式打字机的回溯，那时您通过在要删除的内容上键入 xxxx 来删除它们。）例如，将光标移动到第一行的开头，然后键入 xxxxxxx（七个 x）来删除 "A very "。结果应如下所示：
>
	+---------------------------------------+
	|intelligent turtle			|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
<
现在您可以插入新文本，例如通过键入： >

	iA young <Esc>

这开始插入（i），插入单词 "A young"，然后退出插入模式（最后的 <Esc>）。结果：
>
	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
<

删除一行

要删除整行，请使用 "dd" 命令。然后下一行将向上移动以填补空白：
>
	+---------------------------------------+
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+
<

删除换行符

在 Vim 中，您可以将两行连接在一起，这意味着它们之间的换行符被删除。"J" 命令实现此功能。
   以这两行为例：

	A young intelligent ~
	turtle ~

将光标移到第一行并按 "J"：

	A young intelligent turtle ~

==============================================================================
*02.5*	撤销和重做

假设您删除了太多内容。好吧，您可以重新输入，但存在更简单的方法。"u" 命令撤销最后一次编辑。看看实际操作：在使用 "dd" 删除第一行后，"u" 将其恢复。
   另一个例子：将光标移动到第一行的 A 处：

	A young intelligent turtle ~

现在键入 xxxxxxx 删除 "A young"。结果如下：

	 intelligent turtle ~

键入 "u" 撤销最后一次删除。该删除移除了 g，因此撤销恢复了该字符。

	g intelligent turtle ~

下一个 "u" 命令恢复倒数第二个被删除的字符：

	ng intelligent turtle ~

下一个 "u" 命令给您 u，依此类推：

	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	 young intelligent turtle ~
	A young intelligent turtle ~

重做

如果您撤销了太多次，可以按 CTRL-R (redo) 来反转先前的命令。换句话说，它撤销了撤销操作。要查看实际操作，请按两次 CTRL-R。字符 A 和它后面的空格消失了：

	young intelligent turtle ~

有一个特殊版本的撤销命令，"U" (undo line) 命令。撤销行命令撤销在最后编辑的行上进行的所有更改。键入此命令两次将取消先前的 "U"。

	A very intelligent turtle ~
	  xxxx				删除 very

	A intelligent turtle ~
		      xxxxxx		删除 turtle

	A intelligent ~
					用 "U" 恢复行
	A very intelligent turtle ~
					用 "u" 撤销 "U"
	A intelligent ~

"U" 命令本身是一个更改，"u" 命令可以撤销它，CTRL-R 可以重做它。这可能有点令人困惑。不用担心，使用 "u" 和 CTRL-R，您可以回到任何您曾有过的状态。更多信息请参见 |32.2|。

==============================================================================
*02.6*	其他编辑命令

Vim 有大量用于更改文本的命令。参见 |Q_in| 及以下内容。这里有几个常用的命令。

追加

"i" 命令在光标下的字符之前插入一个字符。这很好用；但是，如果您想在行尾添加内容怎么办？为此，您需要在光标之后插入文本。这是通过 "a" (append) 命令完成的。
   例如，要将行

	and that's not saying much for the turtle. ~
改为
	and that's not saying much for the turtle!!! ~

将光标移动到行尾的句点上。然后键入 "x" 删除句点。光标现在位于行尾的 turtle 的 e 上。现在键入 >

	a!!!<Esc>

在 turtle 的 e 后面追加三个感叹号：

	and that's not saying much for the turtle!!! ~

打开新行

"o" 命令在光标下方创建一个新的空行，并使 Vim 进入插入模式。然后您可以键入新行的文本。
   假设光标在以下两行的第一行中的某处：

	A very intelligent turtle ~
	Found programming Unix a hurdle ~

如果您现在使用 "o" 命令并键入新文本： >

	oThat liked using Vim<Esc>

结果是：

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming Unix a hurdle ~

"O" 命令（大写）在光标上方打开一行。

使用计数

假设您想向上移动九行。您可以键入 "kkkkkkkkk"，或者您可以输入命令 "9k"。事实上，您可以在许多命令前加上一个数字。例如，在本章前面，您通过键入 "a!!!<Esc>" 在行尾添加了三个感叹号。另一种方法是使用命令 "3a!<Esc>"。计数 3 告诉后面的命令将其效果变为三倍。类似地，要删除三个字符，请使用命令 "3x"。计数始终位于它所应用的命令之前。

==============================================================================
*02.7*	退出

要退出，请使用 "ZZ" 命令。此命令写入文件并退出。

	注意：
	与许多其他编辑器不同，Vim 不会自动创建备份文件。如果您键入 "ZZ"，您的更改将被提交，无法回头。您可以配置 Vim 编辑器以生成备份文件；参见 |07.4|。

丢弃更改

有时您会进行一系列更改，然后突然意识到您开始之前的状态更好。别担心；Vim 有一个退出并丢弃更改的命令。它是： >

	:q!

不要忘记按 <Enter> 完成命令。

对于那些对细节感兴趣的人，此命令的三个部分是冒号 (:)，它进入命令行模式；q 命令，它告诉编辑器退出；以及覆盖命令修饰符 (!)。
   需要覆盖命令修饰符，因为 Vim 不愿意丢弃更改。如果您只是键入 ":q"，Vim 会显示错误消息并拒绝退出：

	E37: No write since last change (use ! to override) ~

通过指定覆盖，您实际上是在告诉 Vim，"我知道我做的事情看起来很愚蠢，但我真的想这样做。"

如果您想继续使用 Vim 编辑：":e!" 命令重新加载文件的原始版本。

==============================================================================
*02.8*	查找帮助

您一直想知道的一切都可以在 Vim 帮助文件中找到。不要害怕提问！

如果您知道要找什么，通常使用帮助系统搜索比使用 Google 更容易。因为主题遵循一定的风格指南。

而且帮助的优点是它属于您的特定 Vim 版本。您不会看到后来添加的命令的帮助。这些命令对您不起作用。

要获取通用帮助，请使用此命令： >

	:help

您也可以使用第一个功能键 <F1>。如果您的键盘有 <Help> 键，它可能也有效。
   如果您不提供主题，":help" 会显示通用帮助窗口。Vim 的创建者对帮助系统做了一件非常聪明（或非常懒惰）的事情：他们使帮助窗口成为一个正常的编辑窗口。您可以使用所有正常的 Vim 命令在帮助信息中移动。因此 h, j, k 和 l 分别向左、下、上和右移动。
   要退出帮助窗口，请使用与退出编辑器相同的命令："ZZ"。这将只关闭帮助窗口，而不是退出 Vim。

当您阅读帮助文本时，您会注意到一些用竖线括起来的文本（例如 |help|）。这表示一个超链接。如果您将光标放在竖线之间的任何位置并按 CTRL-] (jump to tag)，帮助系统会将您带到指示的主题。（由于此处未讨论的原因，Vim 术语中将超链接称为 tag。因此 CTRL-] 跳转到光标下单词给出的标签位置。）
   几次跳转后，您可能想要返回。CTRL-T (pop tag) 将您带回到前一个位置。CTRL-O (jump to older position) 在这里也很好用。
   在帮助屏幕的顶部，有符号 "*help.txt*"。这个在 "*" 字符之间的名称被帮助系统用来定义一个标签（超链接目的地）。
   有关使用标签的详细信息，请参见 |29.1|。

要获取关于给定主题的帮助，请使用以下命令： >

	:help {subject}

例如，要获取关于 "x" 命令的帮助，请输入以下内容： >

	:help x

要了解如何删除文本，请使用此命令： >

	:help deleting

要获取所有 Vim 命令的完整索引，请使用以下命令： >

	:help index

当您需要获取控制字符命令（例如 CTRL-A）的帮助时，您需要使用前缀 "CTRL-" 来拼写它。 >

	:help CTRL-A

Vim 编辑器有许多不同的模式。默认情况下，帮助系统显示普通模式命令。例如，以下命令显示普通模式 CTRL-H 命令的帮助： >

	:help CTRL-H

要识别其他模式，请使用模式前缀。如果您想要插入模式版本命令的帮助，请使用 "i_"。对于 CTRL-H，这给您以下命令： >

	:help i_CTRL-H

当您启动 Vim 编辑器时，您可以使用几个命令行参数。这些都以破折号 (-) 开头。例如，要查找 -t 参数的作用，请使用命令： >

	:help -t

Vim 编辑器有许多选项，使您能够配置和自定义编辑器。如果您想获取某个选项的帮助，您需要将其括在单引号中。例如，要找出 'number' 选项的作用，请使用以下命令： >

	:help 'number'

所有模式前缀的表格可以在下面找到：|help-summary|。

特殊键括在尖括号中。例如，要查找插入模式下向上箭头键的帮助，请使用此命令： >

	:help i_<Up>

如果您看到一条您不理解的错误消息，例如：

	E37: No write since last change (use ! to override) ~

您可以使用开头的错误 ID 来查找关于它的帮助： >

	:help E37

摘要：					*help-summary*  >

1) 在输入主题后使用 Ctrl-D，让 Vim 显示所有可用的主题。
   或者按 Tab 补全： >
	:help some<Tab>
<   关于如何使用帮助的更多信息： >
	:help helphelp

2) 跟随竖线中的链接到相关的帮助。您可以从详细帮助跳转到用户文档，后者从用户角度描述某些命令，不那么详细。例如，在： >
	:help pattern.txt
<   之后，您可以在介绍中看到用户指南主题 |03.9| 和 |usr_27.txt|。

3) 选项括在单引号中。要转到 list 选项的帮助主题： >
	:help 'list'
<   如果您只知道您正在寻找某个选项，您也可以： >
	:help options.txt
<   打开描述所有选项处理的帮助页面，然后使用正则表达式搜索，例如 textwidth。
   某些选项有自己的命名空间，例如： >
	:help cpo-<letter>
<   用于 'cpoptions' 设置的相应标志，将 <letter> 替换为特定标志，例如： >
	:help cpo-;
<   对于 'guioptions' 标志： >
	:help go-<letter>

4) 普通模式命令没有前缀。要转到 "gt" 命令的帮助页面： >
	:help gt

5) 插入模式命令以 i_ 开头。删除单词的帮助： >
	:help i_CTRL-W

6) 可视模式命令以 v_ 开头。跳转到可视区域另一侧的帮助： >
	:help v_o

7) 命令行编辑和参数以 c_ 开头。使用命令参数 % 的帮助： >
	:help c_%

8) Ex 命令总是以 ":" 开头，因此要转到 ":s" 命令帮助： >
	:help :s

9) 专门用于调试的命令以 ">" 开头。要转到 "cont" 调试命令的帮助： >
	:help >cont

10) 组合键。它们通常以单个字母开头，指示可以使用它们的模式。例如： >
	:help i_CTRL-X
<    将带您到插入模式的 CTRL-X 命令族，这些命令可用于自动补全不同的内容。注意，某些键总是以相同的方式书写，例如 Control 总是 CTRL。
    对于普通模式命令，没有前缀，主题在 :h CTRL-<Letter> 处可用。例如 >
	:help CTRL-W
<    相比之下 >
	:help c_CTRL-R
<    将描述在命令行中输入命令时 CTRL-R 的作用，而 >
	:help v_CTRL-A
<    讨论在可视模式下增加数字，并且 >
	:help g_CTRL-A
<    讨论 "g<C-A>" 命令（例如，您必须先按 "g" 然后按 <CTRL-A>）。这里的 "g" 代表普通命令 "g"，它总是期望第二个键，然后执行类似于以 "z" 开头的命令的操作。

11) 正则表达式项总是以 / 开头。因此要获取 Vim 正则表达式中 "\+" 量词的帮助： >
	:help /\+
<    如果您需要了解关于正则表达式的一切，请从以下开始阅读： >
	:help pattern.txt

12) 寄存器总是以 "quote" 开头。要了解特殊的 ":" 寄存器： >
	:help quote:

13) Vim 脚本可在以下位置找到： >
	:help vimeval.txt
<   语言的某些方面在 :h expr-X 处可用，其中 "X" 是单个字母。例如 >
	:help expr-!
<    将带您到描述 Vim 脚本的 "!" (Not) 运算符的主题。
   同样重要的是 >
	:help function-list
<    以查找所有可用函数的简短描述。Vim 脚本函数的帮助主题总是包含 "()"，所以： >
	:help append()
<    讨论的是 append Vim 脚本函数，而不是如何在当前缓冲区中追加文本。

14) 映射在帮助页面 :h |map.txt| 中讨论。使用 >
	:help mapmode-i
<    来了解 |:imap| 命令。也可以使用 :map-topic
    来查找关于映射的某些特定子主题。例如： >
	:help :map-local
<    用于缓冲区局部映射，或 >
	:help map-bar
<    用于了解在映射中如何处理 '|'。

15) 命令定义在 :h command-topic 中讨论，因此使用 >
	:help command-bang
<    来了解自定义命令的 '!' 参数。

16) 窗口管理命令总是以 CTRL-W 开头，因此您可以在 :h CTRL-W_letter 找到相应的帮助。例如 >
	:help CTRL-W_p
<    用于移动到先前访问的窗口。您也可以访问 >
	:help windows.txt
<    并通读，如果您正在寻找窗口处理命令。

17) 使用 |:helpgrep| 在所有帮助页面（以及任何已安装的插件）中搜索。参见 |:helpgrep| 了解如何使用它。
    要搜索主题： >
	:helpgrep topic
<    这将带您到第一个匹配项。要转到下一个： >
	:cnext
<    所有匹配项都在 quickfix 窗口中可用，可以通过以下方式打开： >
	:copen
<    移动到您喜欢的匹配项并按 Enter 跳转到该帮助。

18) 用户手册。这以相当友好的方式为初学者描述帮助主题。从 |usr_toc.txt| 开始查找目录（正如您可能猜到的）： >
	:help usr_toc.txt
<    浏览内容以找到有趣的主题。"Digraphs" 和 "Entering special characters" 项在第 24 章，因此要转到该特定帮助页面： >
	:help usr_24.txt
<    另外，如果您想在帮助中访问某个章节，可以直接访问章节号，如下所示： >
	:help 10.1
<    这将转到 |usr_10.txt| 中的第 10.1 章，讨论录制宏。

19) 高亮组。总是以 hl-groupname 开头。例如 >
	:help hl-WarningMsg
<    讨论 WarningMsg 高亮组。

20) 语法高亮命名空间为 :syn-topic。例如 >
	:help :syn-conceal
<    讨论 ":syn" 命令的 conceal 参数。

21) Quickfix 命令通常以 :c 开头，而位置列表命令通常以 :l 开头。

22) 自动命令事件可以通过它们的名称找到： >
	:help BufWinLeave
<    要查看所有可能的事件： >
	:help events

23) 命令行开关总是以 "-" 开头。因此要获取 Vim 的 -f 命令开关的帮助，请使用： >
	:help -f

24) Lua 语言和 Nvim 的 Lua 标准库可在以下位置找到： >vim
	:help lua.txt
<   在 Nvim 中使用 Lua 的指南可在以下位置找到： >vim
	:help lua-guide.txt
<   Lua 5.1 参考手册可在以下位置找到： >vim
	:help luaref.txt
<
25) 包含的特定文件类型功能的文档通常以 ft-<filetype>-<functionality> 的形式提供。所以 >
	:help ft-c-syntax
<    讨论 C 语法文件及其提供的选项。有时，还有关于全能补全的额外部分 >
	:help ft-php-omni
<    或文件类型插件 >
	:help ft-tex-plugin
<    可用。

26) 错误和警告代码可以直接在帮助中查找。所以 >
	:help E297
<    将您直接带到交换文件错误消息的描述，而 >
	:help W10
<    讨论警告 "Changing a readonly file"。
    然而，有时这些错误代码没有被描述，而是列在通常导致此错误的 Vim 命令处。所以： >
	:help E128
<    将您带到 |:function| 命令。

27) 随 Vim 分发的包的文档形式为 package-<name>。所以 >
	:help package-termdebug
<
    将带您到包含的 termdebug 插件的帮助部分以及如何启用它。


==============================================================================

下一章: |usr_03.txt|  移动

版权: 见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
