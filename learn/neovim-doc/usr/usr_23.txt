*usr_23.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

			     编辑其他文件


本章介绍如何编辑非普通文件。使用 Vim 你可以编辑压缩的文件。有些文件需要通过互联网访问。在有一些限制的情况下，也可以编辑二进制文件。

|23.1|	DOS、Mac 和 Unix 文件
|23.2|	互联网上的文件
|23.3|	二进制文件
|23.4|	压缩文件

     下一章: |usr_24.txt|  快速插入
 上一章: |usr_22.txt|  寻找要编辑的文件
目录: |usr_toc.txt|

==============================================================================
*23.1*	DOS、Mac 和 Unix 文件

回到早期，老式电传打字机使用两个字符来开始新的一行。一个字符将 carriage 移回第一个位置（carriage return, <CR>），另一个字符将纸上移（line feed, <LF>）。
   当计算机出现时，存储很昂贵。有些人认为他们不需要两个字符来表示行尾。Unix 人员决定他们可以只使用 <New Line> 或 <NL> 作为行尾。Apple 人员标准化使用 <CR>。Microsoft Windows 人员决定保留旧的 <CR><NL>（我们在帮助文本中使用 <NL> 表示 line feed）。
   这意味着如果你尝试将文件从一个系统移动到另一个系统，你会遇到换行问题。Vim 编辑器自动识别不同的文件格式，并在背后正确处理事情。
   'fileformats' 选项包含在编辑新文件时将尝试的各种格式。例如，以下命令告诉 Vim 先尝试 Unix 格式，然后是 MS-DOS 格式：>

	:set fileformats=unix,dos

你会在编辑文件时得到的消息中注意到格式。如果你编辑本机文件格式，你不会看到任何内容。因此，在 Unix 上编辑 Unix 文件不会产生任何备注。但是当你编辑 dos 文件时，Vim 会通知你：

	"/tmp/test" [dos] 3L, 71C ~

对于 Mac 文件，你会看到 "[mac]"。
   检测到的文件格式存储在 'fileformat' 选项中。要查看你拥有哪种格式，执行以下命令：>

	:set fileformat?

Vim 使用的三个名称是：

	unix		<NL>
	dos		<CR><NL>
	mac		<CR>


使用 MAC 格式

在 Unix 上，<NL> 用于换行。在一行中间出现 <CR> 字符并不少见。顺便说一下，这在 Vi（和 Vim）脚本中经常发生。
   在 Macintosh 上，<CR> 是换行字符，在一行中间可能出现 <NL> 字符。
   结果是，无法 100% 确定包含 <CR> 和 <NL> 字符的文件是 Mac 文件还是 Unix 文件。因此，Vim 假设在 Unix 上你可能不会编辑 Mac 文件，并且不检查这种类型的文件。要仍然检查这种格式，将 "mac" 添加到 'fileformats'：>

	:set fileformats+=mac

然后 Vim 将猜测文件格式。注意 Vim 猜错的情况。


覆盖格式

如果你使用老式的 Vi 并尝试编辑 MS-DOS 格式文件，你会发现每行以 ^M 字符结尾。（^M 是 <CR>）。自动检测避免了这种情况。假设你确实希望以那种方式编辑文件？那么你需要覆盖格式：>

	:edit ++ff=unix file.txt

"++" 字符串是一个项，告诉 Vim 后面跟着一个选项名称，它覆盖此单个命令的默认值。"++ff" 用于 'fileformat'。你也可以使用 "++ff=mac" 或 "++ff=dos"。
   这不适用于任何选项，目前只实现了 "++ff" 和 "++enc"。全名 "++fileformat" 和 "++encoding" 也有效。


转换

你可以使用 'fileformat' 选项从一种文件格式转换为另一种。例如，假设你有一个名为 README.TXT 的 MS-DOS 文件，你想将其转换为 Unix 格式。首先编辑 MS-DOS 格式文件：>
	vim README.TXT

Vim 将识别这是一个 dos 格式文件。现在将文件格式更改为 Unix：>

	:set fileformat=unix
	:write

文件以 Unix 格式写入。

==============================================================================
*23.2*	互联网上的文件

有人给你发送一封电子邮件，其中通过 URL 引用了一个文件。例如：

	你可以在这里找到信息：~
		https://ftp.nluug.nl/pub/vim/README

你可以启动一个程序来下载文件，将其保存在本地磁盘上，然后启动 Vim 来编辑它。
   有一个更简单的方法。将光标移动到 URL 的任何字符上。然后使用这个命令：>

	gf

如果运气好，Vim 将找出使用哪个程序来下载文件，下载它并编辑副本。要在新窗口中打开文件，使用 CTRL-W f。
   如果出现问题，你会得到错误消息。可能是 URL 错误，你没有读取权限，网络连接断开等。不幸的是，很难判断错误的原因。你可能想尝试手动下载文件。

通过互联网访问文件是通过 netrw 插件工作的。目前识别这些格式的 URL：

	`ftp://`	使用 ftp
	`rcp://`	使用 rcp
	`scp://`	使用 scp
	`http://`	使用 wget（只读）

Vim 本身不进行通信，它依赖于上述程序在你的计算机上可用。在大多数 Unix 系统上，"ftp" 和 "rcp" 将存在。"scp" 和 "wget" 可能需要安装。

Vim 为每个开始编辑新文件的命令检测这些 URL，例如也使用 ":edit" 和 ":split"。写命令也有效，除了 `http://`。

更多信息，包括关于密码的信息，请参阅 |netrw|。

==============================================================================
*23.3*	二进制文件

你可以用 Vim 编辑二进制文件。Vim 并不是为此而设计的，因此有一些限制。但是你可以读取文件，更改一个字符并将其写回，结果是只有那个字符被更改，文件在其他方面是相同的。
   为了确保 Vim 不会以错误的方式使用其巧妙技巧，在启动 Vim 时添加 "-b" 参数：>

	vim -b datafile

这设置了 'binary' 选项。这样做的效果是关闭意外的副作用。例如，'textwidth' 设置为零，以避免自动格式化行。并且文件总是以 Unix 文件格式读取。

二进制模式可用于更改程序中的消息。小心不要插入或删除任何字符，否则程序将停止工作。使用 "R" 进入替换模式。

文件中的许多字符将是不可打印的。要以十六进制格式查看它们：>

	:set display=uhex

否则，可以使用 "ga" 命令查看光标下字符的值。当光标在 <Esc> 上时，输出如下所示：

	<^[>  27,  Hex 1b,  Octal 033 ~

文件中可能没有很多换行符。为了获得一些概览，关闭 'wrap' 选项：>

	:set nowrap


字节位置

要查看你在文件中的哪个字节，使用这个命令：>

	g CTRL-G

输出是详细的：

    Col 9-16 of 9-16; Line 277 of 330; Word 1806 of 2058; Byte 10580 of 12206 ~

最后两个数字是文件中的字节位置和总字节数。这考虑了 'fileformat' 如何更改换行符使用的字节数。
   要移动到文件中的特定字节，使用 "go" 命令。例如，要移动到字节 2345：>

	2345go


使用 XXD

真正的二进制编辑器以两种方式显示文本：原样和十六进制格式。你可以通过在 Vim 中首先使用 "xxd" 程序转换文件来实现这一点。这随 Vim 一起提供。
   首先以二进制模式编辑文件：>

	vim -b datafile

现在使用 xxd 将文件转换为十六进制转储：>

	:%!xxd

文本将看起来像这样：

	0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI ~
	0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,.`.....b..4^.0 ~
	0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.".....i.59. ~

你现在可以像普通文本一样查看和编辑文本。Vim 将信息视为普通文本。更改十六进制不会导致可打印字符更改，反之亦然。
   最后将其转换回来：>
	:%!xxd -r

只使用十六进制部分的更改。右侧可打印文本部分的更改被忽略。

有关更多信息，请参阅 xxd 的手册页。

==============================================================================
*23.4*	压缩文件

这很容易：你可以像编辑任何其他文件一样编辑压缩文件。"gzip" 插件负责在编辑时解压缩文件。并在写入时再次压缩。
   目前支持这些压缩方法：

	.Z	compress
	.gz	gzip
	.bz2	bzip2

Vim 使用提到的程序进行实际的压缩和解压缩。你可能需要先安装这些程序。

==============================================================================

下一章: |usr_24.txt|  快速插入

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
