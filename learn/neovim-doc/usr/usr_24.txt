*usr_24.txt*	Nvim

		     VIM 用户手册 - 作者 Bram Moolenaar

			     快速插入


输入文本时，Vim 提供了多种方式来减少击键次数并避免输入错误。使用插入模式补全来重复之前输入过的单词。将长单词缩写为短单词。输入键盘上没有的字符。

|24.1|	进行更正
|24.2|	显示匹配项
|24.3|	补全
|24.4|	重复插入
|24.5|	从另一行复制
|24.6|	插入寄存器内容
|24.7|	缩写
|24.8|	输入特殊字符
|24.9|	双字符组合
|24.10|	普通模式命令

     下一章: |usr_25.txt|  编辑格式化文本
 上一章: |usr_23.txt|  编辑其他文件
     目录: |usr_toc.txt|

==============================================================================
*24.1*	进行更正

<BS> 键已经提到过。它删除光标前的字符。<Del> 键对光标下（后）的字符执行相同的操作。
   当你输错了整个单词时，使用 CTRL-W：

	The horse had fallen to the sky ~
				       CTRL-W
	The horse had fallen to the ~

如果你真的搞乱了一行并想重新开始，使用 CTRL-U 来删除它。这会保留光标后的文本和缩进。只有从第一个非空白字符到光标处的文本被删除。在下一行中，光标位于 "fallen" 的 "f" 上，按 CTRL-U 会执行以下操作：

	The horse had fallen to the ~
		      CTRL-U
	fallen to the ~

当你发现前面几个单词有错误时，你需要将光标移动到那里进行更正。例如，你输入了：

	The horse had follen to the ground ~

你需要将 "follen" 改为 "fallen"。光标在末尾时，你可以这样输入来更正它：>

					<Esc>4blraA

<	退出插入模式		<Esc>
	向后移动四个单词		     4b
	移动到 "o" 上		       l
	替换为 "a"			ra
	重新开始插入模式			  A

另一种方法是：>

		<C-Left><C-Left><C-Left><C-Left><Right><Del>a<End>

<	向后移动四个单词		     <C-Left><C-Left><C-Left><C-Left>
	移动到 "o" 上			<Right>
	删除 "o"				       <Del>
	插入 "a"					    a
	移动到行尾				     <End>

这使用特殊键来移动，同时保持在插入模式。这类似于你在无模式编辑器中的操作。它更容易记住，但需要更多时间（你必须将手从字母键移到光标键，并且不看键盘很难按到 <End> 键）。
   这些特殊键在编写不离开插入模式的映射时最有用。那时额外的输入就不重要了。
   插入模式下可以使用的键的概述：

	<C-Home>	到文件开头
	<PageUp>	向上整屏
	<Home>		到行首
	<S-Left>	向左一个单词
	<C-Left>	向左一个单词
	<S-Right>	向右一个单词
	<C-Right>	向右一个单词
	<End>		到行尾
	<PageDown>	向下整屏
	<C-End>		到文件末尾

还有更多，参见 |ins-special-special|。

==============================================================================
*24.2*	显示匹配项

当你输入 ) 时，能看到它与哪个 ( 匹配会很好。要让 Vim 这样做，使用以下命令：>

	:set showmatch

现在当你输入像 "(example)" 这样的文本时，一旦你输入 )，Vim 会短暂地将光标移动到匹配的 (，在那里保持半秒钟，然后移回你正在输入的位置。
   如果没有匹配的 (，Vim 会发出哔声。这样你就知道你可能在某个地方忘记了 (，或者多打了一个 )。
   匹配也会显示给 [] 和 {} 对。你不需要等待输入下一个字符，一旦 Vim 看到它，光标就会移回，插入像之前一样继续。
   你可以用 'matchtime' 选项改变 Vim 等待的时间。例如，让 Vim 等待一秒半：>

	:set matchtime=15

时间以十分之一秒为单位指定。

==============================================================================
*24.3*	补全

Vim 可以在插入时自动补全单词。你输入单词的第一部分，按 CTRL-P，Vim 就会猜出其余部分。
   例如，假设你正在创建一个 C 程序并想输入以下内容：

	total = ch_array[0] + ch_array[1] + ch_array[2]; ~


你从输入以下内容开始：

	total = ch_array[0] + ch_ ~

此时，你告诉 Vim 使用 CTRL-P 命令补全单词。Vim 搜索以光标前内容开头的单词。在这种情况下，是 "ch_"，它与单词 ch_array 匹配。所以输入 CTRL-P 会得到：

	total = ch_array[0] + ch_array ~

再输入一点后，你得到这个（以空格结尾）：

	total = ch_array[0] + ch_array[1] +  ~

如果你现在输入 CTRL-P，Vim 将再次搜索补全光标前单词的单词。由于光标前没有任何内容，它向后找到第一个单词，即 "ch_array"。再次输入 CTRL-P 会给你下一个匹配的单词，这里是 "total"。第三次 CTRL-P 会进一步向后搜索。如果没有其他内容，编辑器会找不到单词，所以它返回到原始文本，即空。第四次 CTRL-P 会导致编辑器重新开始搜索 "ch_array"。

要向前搜索，使用 CTRL-N。由于搜索会绕回文件末尾，CTRL-N 和 CTRL-P 会找到相同的匹配项，但顺序不同。提示：CTRL-N 是下一个匹配项，CTRL-P 是上一个匹配项。

Vim 编辑器会付出很多努力来查找要补全的单词。默认情况下，它搜索以下位置：

	1. 当前文件
	2. 其他窗口中的文件
	3. 其他已加载的文件（隐藏缓冲区）
	4. 未加载的文件（非活动缓冲区）
	5. 标签文件
	6. 当前文件 #include 的所有文件


选项

你可以使用 'complete' 选项自定义搜索顺序。

使用了 'ignorecase' 选项。当它被设置时，搜索匹配项时会忽略大小写差异。

补全的一个特殊选项是 'infercase'。这在使用忽略大小写（必须设置 'ignorecase'）但仍使用当前键入单词的大小写来查找匹配项时很有用。因此，如果你键入 "For" 而 Vim 找到匹配项 "fortunately"，结果将是 "Fortunately"。


补全特定项目

如果你知道你要找什么，你可以使用这些命令来补全某种类型的项目：

	CTRL-X CTRL-F		文件名
	CTRL-X CTRL-L		整行
	CTRL-X CTRL-D		宏定义（也包括在包含的文件中）
	CTRL-X CTRL-I		当前文件和包含的文件
	CTRL-X CTRL-K		字典中的单词
	CTRL-X CTRL-R		寄存器内容
	CTRL-X CTRL-T		同义词词典中的单词
	CTRL-X CTRL-]		标签
	CTRL-X CTRL-V		Vim 命令行

在它们每一个之后，可以使用 CTRL-N 查找下一个匹配项，CTRL-P 查找上一个匹配项。
   每个命令的更多信息在这里：|ins-completion|。


补全文件名

让我们以 CTRL-X CTRL-F 为例。这将查找文件名。它扫描当前目录中匹配光标前单词的文件。
   例如，假设当前目录中有以下文件：

	main.c  sub_count.c  sub_done.c  sub_exit.c

现在进入插入模式并开始输入：

	The exit code is in the file sub ~


此时，你输入命令 CTRL-X CTRL-F。Vim 现在通过查看当前目录中的文件来补全当前单词 "sub"。第一个匹配项是 sub_count.c。这不是你想要的，所以你键入 CTRL-N 来匹配下一个文件。这个匹配项是 sub_done.c。再次键入 CTRL-N 会带你到 sub_exit.c。结果：

	The exit code is in the file sub_exit.c ~

如果文件名以 /（Unix）或 C:\（MS-Windows）开头，你可以查找文件系统中的所有文件。例如，键入 "/u" 和 CTRL-X CTRL-F。这将匹配 "/usr"（这是在 Unix 上）：

	the file is found in /usr/ ~

如果你现在按 CTRL-N，你会回到 "/u"。相反，要接受 "/usr/" 并进入更深一层的目录，再次使用 CTRL-X CTRL-F：

	the file is found in /usr/X11R6/ ~

结果当然取决于你的文件系统中有什么。匹配项按字母顺序排序。


在源代码中补全

源代码文件结构良好。这使得可以以智能的方式进行补全。在 Vim 中这称为全能补全。在其他一些编辑器中它被称为智能感知，但那是一个商标。

全能补全的关键是 CTRL-X CTRL-O。显然这里的 O 代表 Omni，这样你可以更容易记住。让我们用一个编辑 C 源代码的例子：>

	{
	    struct foo *p;
	    p->

光标在 "p->" 之后。现在键入 CTRL-X CTRL-O。Vim 将为你提供一个备选列表，这些是 "struct foo" 包含的成员。这与使用 CTRL-P 完全不同，后者会补全任何单词，而这里只有 "struct foo" 的成员是有效的。

要使全能补全工作，你可能需要进行一些设置。至少确保文件类型插件已启用。你的 vimrc 文件应包含这样一行：>
	filetype plugin on
或者：>
	filetype plugin indent on

对于 C 代码，你需要创建一个标签文件并设置 'tags' 选项。这在 |ft-c-omni| 中有解释。对于其他文件类型，你可能需要做类似的事情，请看下面 |compl-omni-filetypes|。它仅适用于特定的文件类型。检查 'omnifunc' 选项的值以了解它是否有效。

==============================================================================
*24.4*	重复插入

如果你按下 CTRL-A，编辑器会插入你上次在插入模式下输入的文本。
   例如，假设你有一个文件以以下内容开头：>

	"file.h" ~
	/* Main program begins */ ~

你通过在第二行开头插入 "#include " 来编辑这个文件：>

	#include "file.h" ~
	/* Main program begins */ ~

你使用命令 "j^" 向下移动到下一行的开头。你现在开始插入一个新的 "#include" 行。所以你输入：>

	i CTRL-A

结果如下：>

	#include "file.h" ~
	#include /* Main program begins */ ~

"#include " 被插入是因为 CTRL-A 插入了上一次插入的文本。现在你输入 "main.h"<Enter> 来完成这一行：>


	#include "file.h" ~
	#include "main.h" ~
	/* Main program begins */ ~

CTRL-@ 命令执行 CTRL-A 然后退出插入模式。这是重复完全相同插入的快速方法。

==============================================================================
*24.5*	从另一行复制

CTRL-Y 命令插入光标上方的字符。这在复制前一行时很有用。例如，你有这行 C 代码：

	b_array[i]->s_next = a_array[i]->s_next; ~

现在你需要输入相同的一行，但用 "s_prev" 代替 "s_next"。开始新的一行，然后按 CTRL-Y 14 次，直到到达 "next" 的 "n"：

	b_array[i]->s_next = a_array[i]->s_next; ~
	b_array[i]->s_ ~

现在你输入 "prev"：

	b_array[i]->s_next = a_array[i]->s_next; ~
	b_array[i]->s_prev ~

继续按 CTRL-Y 直到下一个 "next"：

	b_array[i]->s_next = a_array[i]->s_next; ~
	b_array[i]->s_prev = a_array[i]->s_ ~

现在输入 "prev;" 来完成它。

CTRL-E 命令的作用类似于 CTRL-Y，只是它插入光标下方的字符。

==============================================================================
*24.6*	插入寄存器内容

命令 CTRL-R {register} 插入寄存器的内容。这对于避免输入长单词很有用。例如，你需要输入：
	r = VeryLongFunction(a) + VeryLongFunction(b) + VeryLongFunction(c) ~

函数名在另一个文件中定义。编辑该文件并将光标放在函数名上，然后将其拉取到寄存器 v 中：>

	"vyiw

"v 是寄存器指定符，"yiw" 是拉取内部单词。现在编辑要插入新行的文件，并输入前几个字母：

	r = ~

现在使用 CTRL-R v 插入函数名：

	r = VeryLongFunction ~

你继续输入函数名之间的字符，并再使用两次 CTRL-R v。
   你也可以用补全做同样的事情。当有许多以相同字符开头的单词时，使用寄存器很有用。

如果寄存器包含诸如 <BS> 或其他特殊字符，它们会被解释为好像是从键盘键入的一样。如果你不希望发生这种情况（你真的希望将 <BS> 插入文本中），请使用命令 CTRL-R CTRL-R {register}。

==============================================================================
*24.7*	缩写

缩写是代表长单词的短单词。例如，"ad" 代表 "advertisement"。Vim 允许你键入一个缩写，然后自动为你展开它。
   要告诉 Vim 每次插入 "ad" 时都将其展开为 "advertisement"，请使用以下命令：>

	:iabbrev ad advertisement

现在，当你键入 "ad" 时，整个单词 "advertisement" 将被插入到文本中。这由键入一个不能是单词一部分的字符触发，例如空格：

	输入的内容		你看到的内容
	I saw the a		I saw the a ~
	I saw the ad		I saw the ad ~
	I saw the ad<Space>	I saw the advertisement<Space> ~

仅键入 "ad" 时不会发生展开。这允许你键入像 "add" 这样的单词，它不会被展开。只检查整个单词是否有缩写。


缩写多个单词

可以定义一个产生多个单词的缩写。例如，要将 "JB" 定义为 "Jack Benny"，使用以下命令：>

	:iabbrev JB Jack Benny

作为一个程序员，我使用两个相当不寻常的缩写：>

	:iabbrev #b /****************************************
	:iabbrev #e <Space>****************************************/

这些用于创建带框的注释。注释以 #b 开始，它绘制顶线。然后我输入注释文本并使用 #e 绘制底线。
   注意 #e 缩写以一个空格开头。换句话说，前两个字符是空格-星号。通常 Vim 会忽略缩写和展开之间的空格。为了避免这个问题，我将空格拼写为七个字符：<, S, p, a, c, e, >。

	注意：
	":iabbrev" 是一个长单词。":iab" 效果一样。
	这是缩写 abbreviate 命令！


修复输入错误

每次犯同样的输入错误是很常见的。例如，键入 "teh" 而不是 "the"。你可以用一个缩写来修复这个：>

	:abbreviate teh the

你可以添加一整列这样的缩写。每次发现一个常见错误时就添加一个。


列出缩写

":abbreviate" 命令列出缩写：>

	:abbreviate
	i  #e		  ****************************************/
	i  #b		 /****************************************
	i  JB		 Jack Benny
	i  ad		 advertisement
	!  teh		 the

第一列中的 "i" 表示插入模式。这些缩写仅在插入模式下活动。其他可能的字符是：

	c	命令行模式			:cabbrev
	!	插入模式和命令行模式都有效	:abbreviate

由于缩写在命令行模式下通常不太有用，你主要会使用 ":iabbrev" 命令。这避免了，例如，在键入如下命令时 "ad" 被展开：>

	:edit ad


删除缩写

要摆脱一个缩写，使用 ":unabbreviate" 命令。假设你有以下缩写：>

	:abbreviate @f fresh

你可以用这个命令删除它：>

	:unabbreviate @f

当你输入这个时，你会注意到 @f 被展开为 "fresh"。不用担心这个，Vim 无论如何都能理解（除非你有一个 "fresh" 的缩写，但那不太可能）。
   要删除所有缩写：>

	:abclear

":unabbreviate" 和 ":abclear" 也有插入模式（":iunabbreviate 和 ":iabclear"）和命令行模式（":cunabbreviate" 和 ":cabclear"）的变体。


重映射缩写

定义缩写时需要注意一件事：结果字符串不应被映射。例如：>

	:abbreviate @a adder
	:imap dd disk-door

现在当你输入 @a 时，你会得到 "adisk-doorer"。这不是你想要的。为了避免这种情况，使用 ":noreabbrev" 命令。它执行与 ":abbreviate" 相同的操作，但避免结果字符串被用于映射：>

	:noreabbrev @a adder

幸运的是，缩写的输出结果被映射的情况不太可能发生。

==============================================================================
*24.8*	输入特殊字符

CTRL-V 命令用于按字面意义插入下一个字符。换句话说，字符的任何特殊含义都将被忽略。例如：>

	CTRL-V <Esc>

插入一个转义字符。因此你不会离开插入模式。（不要在 CTRL-V 后键入空格，这里只是为了更容易阅读）。

	注意：
	在 MS-Windows 上 CTRL-V 用于粘贴文本。使用 CTRL-Q 代替 CTRL-V。
	另一方面，在 Unix 上，CTRL-Q 在某些终端上不起作用，因为它有特殊含义。

你也可以使用命令 CTRL-V {digits} 插入十进制数为 {digits} 的字符。例如，字符编号 127 是 <Del> 字符（但不一定是 <Del> 键！）。要插入 <Del> 键入：>

	CTRL-V 127

你可以用这种方式输入最多 255 的字符。当你键入少于两位数字时，一个非数字字符将终止命令。为了避免需要键入非数字字符，在前面添加一个或两个零使其成为三位数字。
   所有下一个命令都插入一个 <Tab> 然后一个点：

	CTRL-V 9.
	CTRL-V 09.
	CTRL-V 009.

要输入十六进制字符，在 CTRL-V 后使用 "x"：>

	CTRL-V x7f

这也最多到字符 255（CTRL-V xff）。你可以使用 "o" 将字符作为八进制数键入，另外两种方法允许你键入最多 16 位和 32 位的数字（例如，对于 Unicode 字符）：>

	CTRL-V o123
	CTRL-V u1234
	CTRL-V U12345678

==============================================================================
*24.9*	双字符组合

有些字符不在键盘上。例如，版权字符 (©)。要在 Vim 中键入这些字符，你使用双字符组合，其中两个字符代表一个。例如，要输入 ©，你按三个键：>

	CTRL-K Co

要找出可用的双字符组合，使用以下命令：>

	:digraphs

Vim 将显示双字符组合表。这里是其中的三行：

  AC ~_ 159  NS |  160  !I ¡  161  Ct ¢  162  Pd £  163  Cu ¤  164  Ye ¥  165 ~
  BB ¦  166  SE §  167  ': ¨  168  Co ©  169  -a ª  170  << «  171  NO ¬  172 ~
  -- ­  173  Rg ®  174  'm ¯  175  DG °  176  +- ±  177  2S ²  178  3S ³  179 ~

例如，这显示通过键入 CTRL-K Pd 得到的双字符组合是字符 (£)。这是字符编号 163（十进制）。
   Pd 是 Pound 的缩写。大多数双字符组合的选择都是为了让你对它们将产生的字符有所了解。如果你浏览列表，你会理解其中的逻辑。
   你可以交换第一个和第二个字符，如果该组合没有双字符组合的话。因此 CTRL-K dP 也有效。由于没有 "dP" 的双字符组合，Vim 也会搜索 "Pd" 双字符组合。

	注意：
	双字符组合取决于 Vim 假定你正在使用的字符集。始终使用 ":digraphs" 来找出当前可用的双字符组合。

你可以通过使用十进制数指定目标字符来定义自己的双字符组合。例子：>

	:digraph a\" 228

这定义了 CTRL-K a" 插入一个 ä 字符。注意：我们必须转义 " 字符，否则它将作为注释字符。

关于双字符组合的更多信息在这里：|digraphs|
   另一种插入特殊字符的方法是使用键映射。更多关于这个的信息在这里：|45.5|

==============================================================================
*24.10*	普通模式命令

插入模式提供了有限数量的命令。在普通模式下，你有更多。当你想使用一个时，你通常用 <Esc> 退出插入模式，执行普通模式命令，然后用 "i" 或 "a" 重新进入插入模式。
   有一个更快的方法。使用 CTRL-O {command}，你可以从插入模式执行任何普通模式命令。例如，要删除从光标到行尾的内容：>

	CTRL-O D

你只能以这种方式执行一个普通模式命令。但你可以指定一个寄存器或计数。一个更复杂的例子：>

	CTRL-O "g3dw

这将删除直到第三个单词的内容到寄存器 g 中。

==============================================================================

下一章: |usr_25.txt|  编辑格式化文本

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
