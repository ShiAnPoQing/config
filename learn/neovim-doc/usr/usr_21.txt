*usr_21.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

			   离开并返回


本章介绍如何将其他程序的使用与 Vim 混合使用。可以通过从 Vim 内部执行程序，或者通过离开 Vim 稍后再返回。此外，还介绍了记住 Vim 状态并在以后恢复的方法。

|21.1|	挂起和恢复
|21.2|	执行 shell 命令
|21.3|	记住信息；ShaDa
|21.4|	会话
|21.5|	视图
|21.6|	模式行

     下一章: |usr_22.txt|  找到要编辑的文件
 上一章: |usr_20.txt|  快速输入命令行命令
     目录: |usr_toc.txt|

==============================================================================
*21.1*	挂起和恢复

像大多数 Unix 程序一样，Vim 可以通过按 CTRL-Z 来挂起。这会停止 Vim 并将您带回到启动它的 shell。然后您可以执行任何其他命令，直到您对它们感到厌烦。然后用 "fg" 命令带回 Vim。>

	CTRL-Z
	{任意序列的 shell 命令}
	fg

您会回到离开 Vim 的地方，没有任何变化。
   如果按 CTRL-Z 不起作用，您也可以使用 ":suspend"。不要忘记将 Vim 带回前台，否则您将丢失所做的任何更改！

只有 Unix 支持此功能。在其他系统上，Vim 将为您启动一个 shell。这也具有能够执行 shell 命令的功能。但这是一个新的 shell，不是您启动 Vim 的那个。
   当您运行 GUI 时，您无法返回到启动 Vim 的 shell。CTRL-Z 将最小化 Vim 窗口。

==============================================================================
*21.2*	执行 shell 命令

要从 Vim 执行单个 shell 命令，请使用 ":!{command}"。例如，要查看目录列表：>

	:!ls
	:!dir

第一个用于 Unix，第二个用于 MS-Windows。
   Vim 将执行该程序。当它结束时，您将收到一个提示，要求按 <Enter>。这允许您在返回到正在编辑的文本之前查看命令的输出。
   "!" 也用于运行程序的其他地方。让我们看一下概览：

	:!{program}		执行 {program}
	:r !{program}		执行 {program} 并读取其输出
	:w !{program}		执行 {program} 并将文本发送到其输入
	:[range]!{program}	通过 {program} 过滤文本

请注意，在 "!{program}" 之前是否存在范围有很大区别。没有范围时，正常执行程序；有范围时，一定数量的文本行通过程序过滤。

这种方式执行一整行程序是可能的。但 shell 在这方面要好得多。您可以使用 |:terminal| 启动一个新的 shell。

这类似于使用 CTRL-Z 挂起 Vim。区别在于启动了一个新的 shell。

==============================================================================
*21.3*	记住信息；ShaDa

编辑一段时间后，您将在寄存器中有文本，在各种文件中有标记，命令行历史中充满了精心构建的命令。当您退出 Vim 时，所有这些都会丢失。但您可以找回它！

ShaDa（SHared DAta 的缩写）文件设计用于存储状态信息：

	命令行和搜索模式历史
	寄存器中的文本
	各种文件的标记
	缓冲区列表
	全局变量

每次退出 Vim 时，它会将这些信息存储在一个文件中，即 ShaDa 文件。当 Vim 再次启动时，读取 ShaDa 文件并恢复信息。

'shada' 选项默认设置为恢复有限数量的项目。您可能希望设置它来记住更多信息。这通过以下命令完成：>

	:set shada=string

该字符串指定要保存的内容。此字符串的语法是一个选项字符后跟一个参数。选项/参数对由逗号分隔。
   看看如何构建您自己的 shada 字符串。首先，' 选项用于指定您保存标记 (a-z) 的文件数量。为此选项选择一个合适的偶数（例如 1000）。您的命令现在看起来像这样：>

	:set shada='1000

f 选项控制是否存储全局标记 (A-Z 和 0-9)。如果此选项为 0，则不存储任何标记。如果为 1 或您未指定 f 选项，则存储标记。您需要此功能，所以现在您有：>

	:set shada='1000,f1

< 选项控制为每个寄存器保存多少行。默认情况下，保存所有行。如果为 0，则不保存任何内容。为避免向 ShaDa 文件添加数千行（这可能永远不会被使用并使启动 Vim 变慢），您最多使用 500 行：>

	:set shada='1000,f1,<500
<
您可能想要使用的其他选项：
	:	从命令行历史中保存的行数
	@	从输入行历史中保存的行数
	/	从搜索历史中保存的行数
	r	可移动媒体，不会为其存储标记（可以多次使用）
	!	以大写字母开头且不包含小写字母的全局变量
	h	在启动时禁用 'hlsearch' 高亮
	%	缓冲区列表（仅在启动 Vim 时没有文件参数时恢复）
	c	使用 'encoding' 转换文本
	n	用于 ShaDa 文件的名称（必须是最后一个选项）

有关更多信息，请参阅 'shada' 选项和 |shada-file|。

当您多次运行 Vim 时，最后退出的那个将存储其信息。这可能导致先前退出的 Vim 存储的信息丢失。每个项目只能被记住一次。


回到您停止 VIM 的地方

您编辑文件到一半，是时候去度假了。您退出 Vim 去享受假期，完全忘记了您的工作。几周后，您启动 Vim，并输入：
>
	'0

您就回到了离开 Vim 的地方。这样您就可以继续您的工作。
   Vim 每次退出时都会创建一个标记。最后一个是 '0。'0 指向的位置变为 '1。而 '1 变为 '2，依此类推。标记 '9 丢失。
   |:marks| 命令对于找出 '0 到 '9 将带您到哪里很有用。


回到某个文件

如果您想回到最近编辑过的文件，但不是退出 Vim 时编辑的文件，有一个稍微复杂一点的方法。您可以通过输入命令查看文件列表：>

	:oldfiles
<	1: ~/.config/nvim/init.vim ~
	2: ~/text/resume.txt ~
	3: /tmp/draft ~

现在您想要编辑列表中以 "2:" 开头的第二个文件。您输入：>

	:e #<2

除了 ":e"，您可以使用任何带有文件名参数的命令，"#<2" 项在与 "%"（当前文件名）和 "#"（交替文件名）相同的位置工作。因此您也可以分割窗口来编辑第三个文件：>

	:split #<3

当您只想编辑一个文件时，那个 #<123 的东西有点复杂。幸运的是，有一个更简单的方法：>

	:browse oldfiles
<	1: ~/.config/nvim/init.vim ~
	2: ~/text/resume.txt ~
	3: /tmp/draft ~
	-- More --

您会得到与 |:oldfiles| 相同的文件列表。如果您想编辑 "resume.txt"，首先按 "q" 停止列表。您将收到一个提示：

	Type number and <Enter> (empty cancels): ~

输入 "2" 并按 <Enter> 来编辑第二个文件。

更多信息请参阅 |:oldfiles|、|v:oldfiles| 和 |c_#<|。


将信息从一个 VIM 移动到另一个

您可以使用 ":wshada" 和 ":rshada" 命令在仍在运行 Vim 时保存和恢复信息。例如，这对于在两个 Vim 实例之间交换寄存器内容很有用。在第一个 Vim 中执行：>

	:wshada! ~/tmp/shada

在第二个 Vim 中执行：>

	:rshada! ~/tmp/shada

显然，"w" 代表 "write"，"r" 代表 "read"。
   ! 字符被 ":wshada" 用来强制覆盖现有文件。当省略它时，如果文件存在，信息将合并到文件中。
   ! 字符用于 ":rshada" 意味着 ShaDa 文件中的所有信息优先于现有信息，这可能会覆盖它。没有 ! 时，仅使用未设置的信息。
   这些命令也可用于存储信息并在以后再次使用。您可以创建一个充满 ShaDa 文件的目录，每个文件包含用于不同目的的信息。

==============================================================================
*21.4*	会话

假设您正在编辑，一天结束了。您想下班，并在第二天继续。您可以通过保存编辑会话并在第二天恢复来实现这一点。
   Vim 会话包含有关您正在编辑的所有信息。这包括诸如文件列表、窗口布局、全局变量、选项和其他信息。（具体记住什么由 'sessionoptions' 选项控制，如下所述。）
   以下命令创建一个会话文件： >

	:mksession vimbook.vim

<

稍后，如果您想恢复此会话，可以使用此命令： >

	:source vimbook.vim

如果您想启动 Vim 并恢复特定会话，可以使用以下命令： >

	vim -S vimbook.vim

这告诉 Vim 在启动时读取特定文件。'S' 代表 session（实际上，您可以使用 -S 获取任何 Vim 脚本，因此它也可以代表 "source"）。

打开的窗口被恢复，具有与之前相同的位置和大小。映射和选项值也像之前一样。
   具体恢复什么取决于 'sessionoptions' 选项。默认值为：
"blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal"。

	blank		保留空窗口
	buffers		所有缓冲区，不仅仅是窗口中的缓冲区
	curdir		当前目录
	folds		折叠，包括手动创建的折叠
	help		帮助窗口
	options		所有选项和映射
	tabpages	所有标签页
	winsize		窗口大小
	terminal	包括终端窗口

根据您的喜好更改此设置。例如，要同时恢复 Vim 窗口的大小，请使用：>

	:set sessionoptions+=resize


这里的会话，那里的会话

使用会话的明显方式是在处理不同项目时。假设您将会话文件存储在目录 "~/.config/nvim" 中。您当前正在处理 "secret" 项目，必须切换到 "boring" 项目：>

	:wall
	:mksession! ~/.config/nvim/secret.vim
	:source ~/.config/nvim/boring.vim

这首先使用 ":wall" 写入所有修改过的文件。然后保存当前会话，使用 ":mksession!"。这会覆盖之前的会话。下次您加载 secret 会话时，可以从此点继续。最后您加载新的 "boring" 会话。

如果您打开帮助窗口，分割和关闭各种窗口，并通常搞乱窗口布局，您可以回到最后保存的会话：>

	:source ~/.config/nvim/boring.vim

因此，您完全控制是否希望下次从当前位置继续，通过将当前设置保存在会话中，或者将会话文件保留为起点。
   使用会话的另一种方法是创建一个您喜欢使用的窗口布局，并将其保存在会话中。然后您可以在任何时候回到此布局。
   例如，这是一个很好用的布局：
>
        +----------------------------------------+
        |                  VIM - main help file  |
        |                                        |
        |Move around:  Use the cursor keys, or "h|
        |help.txt================================|
        |explorer   |                            |
        |dir        |~                           |
        |dir        |~                           |
        |file       |~                           |
        |file       |~                           |
        |file       |~                           |
        |file       |~                           |
        |~/=========|[No File]===================|
        |                                        |
        +----------------------------------------+
<
顶部有一个帮助窗口，以便您可以阅读此文本。左侧的窄垂直窗口包含一个文件资源管理器。这是一个 Vim 插件，用于列出目录的内容。您可以在那里选择要编辑的文件。更多关于此内容在下一章。
   从一个刚启动的 Vim 创建此布局：>

	:help
	CTRL-W w
	:vertical split ~/

您可以根据喜好稍微调整窗口大小。然后保存会话：
>
	:mksession ~/.config/nvim/mine.vim

现在您可以使用此布局启动 Vim：>

	vim -S ~/.config/nvim/mine.vim

提示：要在空窗口中打开您在资源管理器窗口中看到列出的文件，将光标移动到文件名上并按 "O"。双击鼠标也会执行此操作。


会话和 SHADA

会话存储许多内容，但不存储标记的位置、寄存器的内容和命令行历史。您需要为此使用 shada 功能。
   在大多数情况下，您会希望将会话与 shada 分开使用。这可以用于切换到另一个会话，但保留命令行历史。并在一个会话中拉取文本到寄存器，在另一个会话中粘贴回来。
   您可能更喜欢将信息与会话一起保存。那么您必须自己完成此操作。示例： >

	:mksession! ~/.config/nvim/secret.vim
	:wshada! ~/.local/state/nvim/shada/secret.shada

要再次恢复此操作： >

	:source ~/.config/nvim/secret.vim
	:rshada! ~/.local/state/nvim/shada/secret.shada

==============================================================================
*21.5*	视图

会话存储整个 Vim 的外观。当您只想存储一个窗口的属性时，请使用视图。
   视图的用途是当您想以特定方式编辑文件时。例如，您使用 'number' 选项启用了行号并定义了一些折叠。就像会话一样，您可以记住文件上的此视图并在以后恢复它。实际上，当您存储会话时，它会存储每个窗口的视图。
   有两种基本方法使用视图。第一种是让 Vim 为视图文件选择一个名称。当您以后编辑同一文件时，可以恢复视图。要存储当前窗口的视图：>

	:mkview

Vim 将决定在哪里存储视图。当您以后编辑同一文件时，使用此命令恢复视图：>

	:loadview

这很容易，不是吗？
   现在您想查看没有 'number' 选项的文件，或者所有折叠都打开，您可以设置选项以使窗口看起来那样。然后存储此视图：>

	:mkview 1

显然，您可以使用以下命令恢复它：>

	:loadview 1

现在您可以通过使用带和不带 "1" 参数的 ":loadview" 在文件的两个视图之间切换。
   您可以通过这种方式为同一文件存储最多十个视图，一个未编号的和九个编号为 1 到 9。


带名称的视图

使用视图的第二种基本方法是将视图存储在您选择名称的文件中。此视图可以在编辑另一个文件时加载。Vim 然后将切换到编辑视图中指定的文件。因此您可以使用此功能快速切换到编辑另一个文件，所有选项设置都像您保存的那样。
   例如，要保存当前文件的视图：>

	:mkview ~/.config/nvim/main.vim

您可以使用以下命令恢复它：>

	:source ~/.config/nvim/main.vim

==============================================================================
*21.6*	模式行

当编辑特定文件时，您可能为该文件专门设置选项。每次输入这些命令很无聊。在多人之间共享文件时，使用会话或视图进行编辑不起作用。
   这种情况的解决方案是向文件添加模式行。这是一行文本，告诉 Vim 选项的值，仅在此文件中使用。
   一个典型的例子是一个 C 程序，您通过 4 个空格的倍数进行缩进。这需要将 'shiftwidth' 选项设置为 4。此模式行将实现这一点：>

	/* vim:set shiftwidth=4: */ ~

将此行作为文件的前五行或最后五行之一。当编辑文件时，您会注意到 'shiftwidth' 已被设置为四。当编辑另一个文件时，它被设置回默认值八。
   对于某些文件，模式行很适合放在头部，因此可以放在文件的顶部。对于文本文件和其他模式行妨碍正常内容的文件，将其放在文件的末尾。

'modelines' 选项指定检查文件开头和结尾的多少行包含模式行。要检查十行：>

	:set modelines=10

'modeline' 选项可用于关闭此功能。当您在 Unix 上作为 root 工作或在 MS-Windows 上作为 Administrator 工作，或者当您不信任正在编辑的文件时，请执行此操作：>

	:set nomodeline

对模式行使用此格式：>

	any-text vim:set {option}={value} ... : any-text

"any-text" 表示您可以在 Vim 将使用的部分之前和之后放置任何文本。这允许使其看起来像注释，就像上面用 "/*" 和 "*/" 所做的那样。
   " vim:" 部分是使 Vim 识别此行的原因。在 "vim" 之前必须有空白，或者 "vim" 必须位于行首。因此使用类似 "gvim:" 的内容将不起作用。
   冒号之间的部分是 ":set" 命令。它的工作方式与输入 ":set" 命令相同，只是您需要在冒号前插入反斜杠（否则它将被视为模式行的结束）。

另一个示例：>

	// vim:set textwidth=72 dir=c\:\tmp:  use c:\tmp here

第一个冒号前有一个额外的反斜杠，以便它包含在 ":set" 命令中。第二个冒号后的文本被忽略，因此可以在那里放置备注。

有关更多详细信息，请参阅 |modeline|。

==============================================================================

下一章: |usr_22.txt|  找到要编辑的文件

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
