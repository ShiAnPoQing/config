*usr_03.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar

			       移动


在您能插入或删除文本之前，光标必须移动到正确的位置。Vim 有大量的命令来定位光标。本章向您展示如何使用最重要的命令。您可以在下面找到这些命令的列表 |Q_lr|。

|03.1|	单词移动
|03.2|	移动到行首或行尾
|03.3|	移动到某个字符
|03.4|	匹配括号
|03.5|	移动到特定行
|03.6|	告知您的位置
|03.7|	滚动
|03.8|	简单搜索
|03.9|	简单搜索模式
|03.10|	使用标记

     下一章: |usr_04.txt|  做小的改动
 上一章: |usr_02.txt|  Vim 的第一步
目录: |usr_toc.txt|

==============================================================================
*03.1*	单词移动

要将光标向前移动一个单词，使用 "w" 命令。像大多数 Vim 命令一样，您可以使用数字前缀来移动多个单词。例如，"3w" 移动三个单词。下图显示了它的工作原理（从标记为 "x" 的位置开始）：

	This is a line with example text ~
	  x-->-->->----------------->
	   w  w  w    3w

请注意，如果光标已经在一个单词的开头，"w" 会移动到下一个单词的开头。
   "b" 命令向后移动到前一个单词的开头：

	This is a line with example text ~
	<----<--<-<---------<--x
	   b   b b    2b      b

还有 "e" 命令，它移动到下一个单词的末尾，以及 "ge"，它移动到前一个单词的末尾：

	This is a line with example text ~
	   <----<----x---->------------>
	   2ge   ge     e       2e

如果您在一行的最后一个单词上，"w" 命令将带您到下一行的第一个单词。因此，您可以使用它来遍历段落，比使用 "l" 快得多。"b" 在另一个方向上做同样的事情。

单词在非单词字符处结束，例如 "."、"-" 或 ")"。要更改 Vim 认为是单词的内容，请参阅 'iskeyword' 选项。如果您直接在帮助中尝试这个，'iskeyword' 需要重置才能使示例工作： >
	:set iskeyword&
也可以按由空白分隔的 WORD 移动。这不是正常意义上的单词，这就是为什么使用大写。用于按 WORD 移动的命令也是大写的，如下图所示：

	       ge      b	  w				e
	       <-     <-	 --->			       --->
	This is-a line, with special/separated/words (and some more). ~
	   <----- <-----	 -------------------->	       ----->
	     gE      B			 W			 E

通过这种小写和大写命令的混合，您可以快速向前和向后移动遍历段落。

==============================================================================
*03.2*	移动到行首或行尾

"$" 命令将光标移动到行尾。如果您的键盘有 <End> 键，它将执行相同的操作。

"^" 命令移动到该行的第一个非空白字符。"0" 命令（零）移动到该行的第一个字符，<Home> 键执行相同的操作。用图表示（"." 表示空格）：

		  ^
	     <-----------x
	.....This is a line with example text ~
	<----------------x   x-------------->
		0		   $

（"....." 此处表示空白）

   "$" 命令像大多数移动命令一样接受计数。但是多次移动到行尾没有意义。因此，它会导致编辑器移动到另一行的行尾。例如，"1$" 将您移动到第一行（您所在的行）的末尾，"2$" 移动到下一行的末尾，依此类推。
   "0" 命令不接受计数参数，因为 "0" 将是计数的一部分。出乎意料的是，对 "^" 使用计数没有任何效果。

==============================================================================
*03.3*	移动到某个字符

最有用的移动命令之一是单字符搜索命令。命令 "fx" 在行中向前搜索单个字符 x。提示："f" 代表 "Find"。
   例如，您处于以下行的开头。假设您想转到 human 的 h。只需执行命令 "fh"，光标将定位在 h 上：

	To err is human.  To really foul up you need a computer. ~
	---------->--------------->
	    fh		 fy

这也显示了命令 "fy" 移动到单词 really 的末尾。
   您可以指定一个计数；因此，您可以使用 "3fl" 移动到 "foul" 的 "l"：

	To err is human.  To really foul up you need a computer. ~
		  --------------------->
			   3fl

"F" 命令向左搜索：

	To err is human.  To really foul up you need a computer. ~
		  <---------------------
			    Fh

"tx" 命令的工作方式类似于 "fx" 命令，只是它在搜索的字符之前一个字符停止。提示："t" 代表 "To"。这个命令的向后版本是 "Tx"。

	To err is human.  To really foul up you need a computer. ~
		   <------------  ------------->
			Th		tn

这四个命令可以用 ";" 重复。"," 在另一个方向上重复。光标永远不会移动到另一行。即使句子继续也不会。

有时您会开始搜索，结果意识到您键入了错误的命令。例如，您键入 "f" 向后搜索，结果意识到您真正的意思是 "F"。要中止搜索，请按 <Esc>。所以 "f<Esc>" 是一个中止的向前搜索，什么都不做。注意：<Esc> 取消大多数操作，不仅仅是搜索。

==============================================================================
*03.4*	匹配括号

在编写程序时，您经常会遇到嵌套的 () 结构。那么 "%" 命令非常方便：它移动到匹配的括号。如果光标在 "(" 上，它将移动到匹配的 ")"。如果它在 ")" 上，它将移动到匹配的 "("。

			    %
			 <----->
		if (a == (b * c) / d) ~
		   <---------------->
			    %

这也适用于 [] 和 {} 对。（这可以用 'matchpairs' 选项定义。）

当光标不在有用的字符上时，"%" 将向前搜索以找到一个。因此，如果光标位于上一个示例行的开头，"%" 将向前搜索并找到第一个 "("。然后它移动到它的匹配项：

		if (a == (b * c) / d) ~
		---+---------------->
			   %

在 |usr_29.txt| 中可以找到其他在代码中移动的方法。

==============================================================================
*03.5*	移动到特定行

如果您是 C 或 C++ 程序员，您熟悉如下错误消息：

	prog.c:33: j   undeclared (first use in this function) ~

这告诉您可能需要在第 33 行修复某些内容。那么如何找到第 33 行？一种方法是执行 "9999k" 到文件顶部，然后执行 "32j" 向下移动三十二行。这不是一个好方法，但它有效。一个更好的方法是使用 "G" 命令。使用计数时，此命令将您定位在给定的行号。例如，"33G" 将您放在第 33 行。（有关遍历编译器错误列表的更好方法，请参阅 |usr_30.txt|，了解 :make 命令的信息。）
   没有参数时，"G" 将您定位在文件末尾。快速转到文件开头的方法是使用 "gg"。"1G" 会做同样的事情，但输入量稍多。

	    |	文件的第一行   ^
	    |	文本 文本 文本 文本    |
	    |	文本 文本 文本 文本    |  gg
	7G  |	文本 文本 文本 文本    |
	    |	文本 文本 文本 文本
	    |	文本 文本 文本 文本
	    V	文本 文本 文本 文本    |
		文本 文本 文本 文本    |  G
		文本 文本 文本 文本    |
		文件的最后一行    V

另一种移动到某行的方法是使用带计数的 "%" 命令。例如，"50%" 将您移动到文件的一半位置，"90%" 移动到接近末尾的位置。

前面的假设是您希望移动到文件中的某一行，无论它当前是否可见。如果您想移动到您能看到的一行怎么办？此图显示了您可以使用的三个命令：

			+---------------------------+
		H -->	| 文本示例文本		    |
			| 示例文本		    |
			| 文本示例文本		    |
			| 示例文本		    |
		M -->	| 文本示例文本		    |
			| 示例文本		    |
			| 文本示例文本		    |
			| 示例文本		    |
		L -->	| 文本示例文本		    |
			+---------------------------+

提示："H" 代表 Home，"M" 代表 Middle，"L" 代表 Last。或者，"H" 代表 High，"M" 代表 Middle，"L" 代表 Low。

==============================================================================
*03.6*	告知您的位置

要查看您在文件中的位置，有三种方法：

1.  使用 CTRL-G 命令。您会得到类似这样的消息（假设 'ruler' 选项关闭）：

	"usr_03.txt" 第 233 行，共 650 行 --35%-- 列 45-52 ~

    这显示您正在编辑的文件名、光标所在的行号、总行数、在文件中的百分比以及光标的列。
       有时您会看到一个分割的列号。例如，"列 2-9"。这表明光标定位在第二个字符上，但由于第一个字符是制表符，占据八个空格宽度的列，屏幕列是 9。

2.  设置 'number' 选项。这将在每行前面显示一个行号： >

	:set number
<
    要再次关闭它： >

	:set nonumber
<
    由于 'number' 是一个布尔选项，在其名称前加上 "no" 具有关闭它的效果。布尔选项只有这两个值，它要么是开，要么是关。
       Vim 有许多选项。除了布尔选项外，还有具有数值的选项和字符串选项。您将在使用它们的地方看到示例。

3.  设置 'ruler' 选项。这将在 Vim 窗口的右下角显示光标位置： >

	:set ruler

使用 'ruler' 选项的优点是它不占用太多空间，因此您的文本有更多空间。

==============================================================================
*03.7*	滚动

CTRL-U 命令向下滚动半屏文本。想象一下通过一个查看窗口查看文本，并将此窗口向上移动窗口高度的一半。因此窗口在文本上向上移动，这在文件中是向后的。如果您有点难以记住哪端是上，请不要担心。大多数用户都有同样的问题。
   CTRL-D 命令将查看窗口在文件中向下移动半屏，从而将文本向上滚动半屏。

				       +----------------+
				       | 一些文本	|
				       | 一些文本	|
				       | 一些文本	|
	+---------------+	       | 一些文本	|
	| 一些文本	|  CTRL-U  --> |		|
	|		|	       | 123456		|
	| 123456	|	       +----------------+
	| 7890		|
	|		|	       +----------------+
	| 示例		|  CTRL-D -->  | 7890		|
	+---------------+	       |		|
				       | 示例		|
				       | 示例		|
				       | 示例		|
				       | 示例		|
				       +----------------+

要一次滚动一行，请使用 CTRL-E（向上滚动）和 CTRL-Y（向下滚动）。可以把 CTRL-E 想象成给您一行额外的内容。（如果您使用 MS-Windows 兼容的键映射，CTRL-Y 将重做一个更改而不是滚动。）

要向前滚动整个屏幕（除了两行），请使用 CTRL-F。要向后滚动，请使用 CTRL-B。这些应该很容易记住：F 代表 Forwards（向前），B 代表 Backwards（向后）。

一个常见的问题是，在使用 "j" 向下移动多行后，您的光标位于屏幕底部。您希望看到光标所在行的上下文。这是通过 "zz" 命令完成的。

	+------------------+		 +------------------+
	| 较早的文本	   |		 | 较早的文本	    |
	| 较早的文本	   |		 | 较早的文本	    |
	| 较早的文本	   |		 | 较早的文本	    |
	| 较早的文本	   |   zz  -->	 | 有光标的行	    |
	| 较早的文本	   |		 | 较晚的文本	    |
	| 较早的文本	   |		 | 较晚的文本	    |
	| 有光标的行	   |		 | 较晚的文本	    |
	+------------------+		 +------------------+

"zt" 命令将光标行放在顶部，"zb" 放在底部。还有几个滚动命令，请参阅 |Q_sc|。要始终在光标周围保留几行上下文，请使用 'scrolloff' 选项。

==============================================================================
*03.8*	简单搜索

要搜索字符串，请使用 "/string" 命令。例如，要查找单词 include，请使用命令： >

	/include

您会注意到，当您键入 "/" 时，光标会跳转到 Vim 窗口的最后一行，就像冒号命令一样。那是您键入单词的地方。您可以按退格键（backarrow 或 <BS>）进行更正。必要时使用 <Left> 和 <Right> 光标键。
   按 <Enter> 执行命令。

	注意：
	字符 .*[]^%/\?~$ 有特殊含义。如果您想在搜索中使用它们，必须在它们前面加上 \。见下文。

要查找相同字符串的下一个匹配项，请使用 "n" 命令。使用这个来查找光标后的第一个 #include： >

	/#include

然后多次键入 "n"。您将移动到文本中的每个 #include。如果您知道要查找哪个匹配项，也可以使用计数。因此 "3n" 查找第三个匹配项。您也可以对 "/" 使用计数："4/the" 转到 "the" 的第四个匹配项。

"?" 命令的工作方式类似于 "/"，但向后搜索： >

	?word

"N" 命令在相反方向重复上一次搜索。因此，在 "/" 命令后使用 "N" 会向后搜索，在 "?" 后使用 "N" 会向前搜索。


忽略大小写

通常您必须准确键入您想要查找的内容。如果您不关心单词中的大小写，请设置 'ignorecase' 选项： >

	:set ignorecase

如果您现在搜索 "word"，它也将匹配 "Word" 和 "WORD"。要再次匹配大小写： >

	:set noignorecase


历史记录

假设您进行了三次搜索： >

	/one
	/two
	/three

现在让我们通过键入一个简单的 "/" 而不按 <Enter> 来开始搜索。如果您按 <Up>（光标键），Vim 会将 "/three" 放在命令行上。此时按 <Enter> 会搜索 three。如果您不按 <Enter>，而是再次按 <Up>，Vim 会将提示更改为 "/two"。再按一次 <Up> 会将您移动到 "/one"。
   您也可以使用 <Down> 光标键在另一个方向上移动搜索命令的历史记录。

如果您知道以前使用的模式以什么开头，并且想再次使用它，请在按 <Up> 之前键入该字符。使用前面的示例，您可以键入 "/o<Up>"，Vim 会将 "/one" 放在命令行上。

以 ":" 开头的命令也有历史记录。这允许您回忆先前的命令并再次执行它。这两个历史记录是分开的。


搜索文本中的单词

假设您在文本中看到单词 "TheLongFunctionName"，并且想找到它的下一个出现位置。您可以键入 "/TheLongFunctionName"，但那样输入量很大。而且当您出错时，Vim 找不到它。
   有一个更简单的方法：将光标定位在单词上并使用 "*" 命令。Vim 将获取光标下的单词并将其用作搜索字符串。
   "#" 命令在另一个方向上做同样的事情。您可以加上一个计数："3*" 搜索光标下单词的第三个出现位置。


搜索整个单词

如果您键入 "/the"，它也会匹配 "there"。要只查找以 "the" 结尾的单词，请使用： >

	/the\>

"\>" 项是一个特殊的标记，只匹配在单词的末尾。类似地，"\<" 只匹配在单词的开头。因此要仅搜索单词 "the"： >

	/\<the\>

这不匹配 "there" 或 "soothe"。请注意，"*" 和 "#" 命令使用这些单词开头和单词结尾标记来只查找整个单词（您可以使用 "g*" 和 "g#" 来匹配部分单词）。


高亮匹配项

在编辑程序时，您看到一个名为 "nr" 的变量。您想检查它在哪里被使用。您可以将光标移动到 "nr" 并使用 "*" 命令，然后按 "n" 遍历所有匹配项。

Vim 将高亮所有匹配项。这是查看变量在哪里被使用的一个非常好的方法，无需键入命令。
   要关闭这个功能： >

	:set nohlsearch

然后，如果您想为下一个搜索命令再次打开它： >

	:set hlsearch

如果您只想移除高亮，请使用此命令： >

	:nohlsearch

这不会重置选项。而是，它禁用高亮。一旦您执行搜索命令，高亮将再次被使用。对于 "n" 和 "N" 命令也是如此。


调整搜索

有几个选项可以更改搜索的工作方式。这些是基本的选项：
>
	:set nowrapscan

这将在文件末尾停止搜索。或者，当您向后搜索时，它会在文件开头停止搜索。'wrapscan' 选项默认是开启的，因此搜索会绕到文件末尾。
>
	:set noincsearch

这会在您仍在键入搜索时禁用匹配项的显示。


插曲

如果您喜欢前面提到的某个选项，并且每次使用 Vim 时都设置它，您可以将该命令放在您的 Vim 启动文件中。编辑该文件，例如使用： >

	:edit ~/.config/nvim/init.vim

然后添加一行包含设置该选项的命令，就像您在 Vim 中键入的那样。示例： >

	Go:set hlsearch<Esc>

"G" 移动到文件末尾。"o" 开始一个新行，您在那里键入 ":set" 命令。您用 <Esc> 结束插入模式。然后写入并关闭文件： >

	ZZ

如果您现在再次启动 Vim，'hlsearch' 选项将已经被设置。

==============================================================================
*03.9*	简单搜索模式

Vim 编辑器使用正则表达式来指定要搜索的内容。正则表达式是一种极其强大和紧凑的指定搜索模式的方式。不幸的是，这种强大是有代价的，因为正则表达式有点难以指定。
   在本节中，我们只提到几个基本的。关于搜索模式和命令的更多信息可以在第 27 章 |usr_27.txt| 中找到。您可以在此处找到完整的解释：|pattern|。


行的开头和结尾

^ 字符匹配行的开头。在美式英语键盘上，您可以在 6 上面找到它。模式 "include" 匹配行上任何位置的单词 include。但是模式 "^include" 仅当它在行首时才匹配单词 include。
   $ 字符匹配行的结尾。因此，"was$" 仅当它在行尾时才匹配单词 was。

让我们用 "x" 标记 "/the" 在此示例行中匹配的位置：

	the solder holding one of the chips melted and the ~
	xxx			  xxx		       xxx

使用 "/the$" 我们找到这个匹配：

	the solder holding one of the chips melted and the ~
						       xxx

使用 "/^the" 我们找到这个：
	the solder holding one of the chips melted and the ~
	xxx

您可以尝试用 "/^the$" 搜索；它只会匹配完全由 "the" 组成的单行。这里空白很重要，因此如果一行在单词后包含一个空格，如 "the "，则该模式将不匹配。


匹配任何单个字符

. (点) 字符匹配任何存在的字符。例如，模式 "c.m" 匹配一个字符串，其第一个字符是 c，第二个字符是任何字符，第三个字符是 m。示例：

	We use a computer that became the cummin winter. ~
		 xxx		 xxx	  xxx


匹配特殊字符

如果您真的想匹配一个点，您必须在其前面加上一个反斜杠以避免其特殊含义。
   如果您搜索 "ter."，您将找到这些匹配：

	We use a computer that became the cummin winter. ~
		      xxxx			    xxxx

搜索 "ter\." 只找到第二个匹配项。

==============================================================================
*03.10*	使用标记

当您使用 "G" 命令跳转到某个位置时，Vim 会记住跳转前的位置。这个位置称为标记。要返回您来自的地方，请使用此命令： >

	``

这个 ` 是一个反引号或开单引号字符。
   如果您第二次使用相同的命令，您将再次跳回。这是因为 "`" 命令本身是一个跳转，并且这次跳转前的位置被记住了。

通常，每次您执行一个可以将光标移动到同一行之外的命令时，这称为跳转。这包括搜索命令 "/" 和 "n"（匹配有多远无关紧要）。但不包括使用 "fx" 和 "tx" 的字符搜索或单词移动 "w" 和 "e"。
   此外，"j" 和 "k" 不被视为跳转，即使您使用计数使它们将光标移动得很远。

"``" 命令在两个点之间来回跳转。CTRL-O 命令跳转到较旧的位置（提示：O 代表 Older）。然后 CTRL-I 跳回到较新的位置（提示：对于许多常见的键盘布局，I 就在 O 旁边）。
考虑以下命令序列： >

	33G
	/^The
	CTRL-O

您首先跳转到第 33 行，然后搜索以 "The" 开头的行。然后使用 CTRL-O 跳回第 33 行。另一个 CTRL-O 将您带回到开始的地方。如果您现在使用 CTRL-I，您将再次跳转到第 33 行。再使用一次 CTRL-I 跳转到 "The" 的匹配项。


	     |	示例文本   ^	     |
	33G  |	示例文本   |  CTRL-O     | CTRL-I
	     |	示例文本   |	     |
	     V	第 33 行文本   ^	     V
	     |	示例文本   |	     |
       /^The |	示例文本   |  CTRL-O     | CTRL-I
	     V	您在那里   |	     V
		示例文本

	注意：
	CTRL-I 与 <Tab> 相同。

":jumps" 命令给出您跳转到的位置列表。您最后使用的条目标有 ">"。


命名标记							*bookmark*

Vim 使您能够在文本中放置自己的标记。命令 "ma" 将光标下的位置标记为标记 a。您可以在文本中放置 26 个标记（a 到 z）。您看不到它们，它只是 Vim 记住的一个位置。
   要转到标记，请使用命令 `{mark}，其中 {mark} 是标记字母。因此要移动到 a 标记：
>
	`a

命令 "'mark"（单引号或撇号）将您移动到包含标记的行的开头。这与 "`mark" 命令不同，后者也将您移动到标记的列。

当处理文件中两个相关的部分时，标记非常有用。假设您需要在文件开头附近查看一些文本，同时在文件末尾附近处理一些文本。
   移动到开头的文本并在那里放置 s (start) 标记： >

	ms

然后移动到您想要处理的文本并在那里放置 e (end) 标记： >

	me

现在您可以四处移动，当您想查看文件开头时，使用这个跳转到那里： >

	's

然后您可以使用 '' 跳回到您之前的位置，或者 'e 跳转到您在末尾处理的文本。
   使用 s 表示开始和 e 表示结束并没有什么特别，它们只是容易记住。

您可以使用此命令获取标记列表： >

	:marks

您会注意到一些特殊的标记。其中包括：

	'	执行跳转前的光标位置
	"	上次编辑文件时的光标位置
	[	最后一次更改的开始
	]	最后一次更改的结束

==============================================================================

下一章: |usr_04.txt|  做小的改动

版权: 见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
