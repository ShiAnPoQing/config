*usr_05.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar

			       设置您的设置


Vim 可以调整为您想要的工作方式。本章向您展示如何让 Vim 启动时设置不同的选项值。添加插件以扩展 Vim 的功能。或者定义您自己的宏。

|05.1|	vimrc 文件
|05.2|	vimrc 内容示例
|05.3|	简单映射
|05.4|	添加一个包
|05.5|	添加一个插件
|05.6|	添加帮助文件
|05.7|	选项窗口
|05.8|	常用选项

     下一章: |usr_06.txt|  使用语法高亮
 上一章: |usr_04.txt|  做小的改动
目录: |usr_toc.txt|

==============================================================================
*05.1*	vimrc 文件				*vimrc-intro*

您可能厌倦了键入您经常使用的命令。为了让 Vim 启动时带有您所有喜爱的选项设置和映射，您可以将它们写入所谓的 init.vim 文件中。Vim 在启动时会执行此文件中的命令。

如果您已经有一个 init.vim 文件（例如，您的系统管理员为您设置了一个），您可以这样编辑它： >

	:edit $MYVIMRC

如果您还没有 vimrc 文件，请参阅 |init.vim| 了解可以在哪里创建 vimrc 文件。

始终使用并推荐此文件：

	~/.config/nvim/init.vim         (Unix 和 OSX) ~
	~/AppData/Local/nvim/init.vim   (Windows) ~

vimrc 文件可以包含您在冒号后键入的所有命令。最简单的是设置选项。例如，如果您希望 Vim 始终以 'ignorecase' 选项开启启动，请将以下行添加到您的 vimrc 文件中： >

	set ignorecase

要使此新行生效，您需要退出 Vim 并重新启动它。稍后您将学习如何在不退出 Vim 的情况下执行此操作。

本章仅解释最基本的项目。有关如何编写 Vim 脚本文件的更多信息：|usr_41.txt|。

==============================================================================
*05.2*	vimrc 内容示例                          *vimrc_example.vim*

在第一章中解释了如何创建 vimrc 文件。 >

	:exe 'edit' stdpath('config').'/init.vim'

在本节中，我们将解释可以在此文件中指定的各种命令。这将为您提供有关如何设置自己偏好的提示。但并非所有内容都会解释。使用 ":help" 命令了解更多信息。
>
	set backup

这告诉 Vim 在覆盖文件时保留文件的备份副本。备份文件将与原始文件同名，并添加 "~"。参见 |07.4|
>
	set history=50
<
在历史记录中保留 50 个命令和 50 个搜索模式。如果您想记住更少或更多的行，请使用其他数字。
>
	map Q gq

这定义了一个键映射。更多关于映射的内容在下一节。这将 "Q" 命令定义为使用 "gq" 操作符进行格式化。否则 "Q" 命令会重复最后记录的寄存器。
>
	vnoremap _g y:exe "grep /" .. escape(@", '\\/') .. "/ *.c *.h"<CR>

此映射拉取视觉选择的文本并在 C 文件中搜索它。这是一个复杂的映射。您可以看到映射可用于执行相当复杂的操作。不过，它只是一个命令序列，就像您键入它们一样执行。

							*vimrc-filetype*
>
	filetype plugin indent on

这开启了三个非常聪明的机制：
1. 文件类型检测。
   每当您开始编辑文件时，Vim 将尝试弄清楚这是哪种文件。当您编辑 "main.c" 时，Vim 将看到 ".c" 扩展名并将其识别为 "c" 文件类型。当您编辑以 "#!/bin/sh" 开头的文件时，Vim 将将其识别为 "sh" 文件类型。
   文件类型检测用于语法高亮和下面其他两项。
   参见 |filetypes|。

2. 使用文件类型插件文件
   许多不同的文件类型使用不同的选项进行编辑。例如，当您编辑 "c" 文件时，设置 'cindent' 选项以自动缩进行非常有用。这些通常有用的选项设置随 Vim 包含在文件类型插件中。您也可以添加自己的，参见 |write-filetype-plugin|。

3. 使用缩进文件
   编辑程序时，行的缩进通常可以自动计算。Vim 为许多文件类型提供了这些缩进规则。参见 |:filetype-indent-on| 和 'indentexpr'。


				*restore-cursor* *last-position-jump*  >vim
    augroup RestoreCursor
      autocmd!
      autocmd BufReadPre * autocmd FileType <buffer> ++once
        \ let s:line = line("'\"")
        \ | if s:line >= 1 && s:line <= line("$") && &filetype !~# 'commit'
        \      && index(['xxd', 'gitrebase'], &filetype) == -1
        \      && !&diff
        \ |   execute "normal! g`\""
        \ | endif
    augroup END

另一个自动命令。这次它在读取任何文件后使用。其后的复杂内容检查 '" 标记是否已定义，如果是则跳转到该标记。在以下情况下它不会这样做：
 - 编辑提交或变基消息，这些消息可能与上次不同，
 - 使用 xxd(1) 过滤和编辑二进制文件，这会来回转换输入文件，可以说使它们具有双重性质（另请参阅 |using-xxd|）以及
 - Vim 处于差异模式

行首的反斜杠用于从前一行继续命令。这避免了行变得很长。参见 |line-continuation|。
这仅在 Vim 脚本文件中有效，在命令行键入命令时无效。

>
	command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis

这添加了 ":DiffOrig" 命令。在修改后的缓冲区中使用此命令以查看与加载它的文件的差异。参见 |diff| 和 |:DiffOrig|。

>
	set nolangremap

防止 langmap 选项应用于映射产生的字符。如果设置（默认），这可能会破坏插件（但它是向后兼容的）。参见 'langremap'。

==============================================================================
*05.3*	简单映射

映射使您能够将一组 Vim 命令绑定到单个键。例如，假设您需要用花括号包围某些单词。换句话说，您需要将诸如 "amount" 之类的单词更改为 "{amount}"。使用 :map 命令，您可以告诉 Vim F5 键完成此工作。命令如下： >

	:map <F5> i{<Esc>ea}<Esc>
<
	注意：
	输入此命令时，您必须通过键入四个字符来输入 <F5>。类似地，<Esc> 不是通过按 <Esc> 键输入，而是通过键入五个字符输入。阅读手册时请注意此差异！

让我们分解一下：
    <F5>	F5 功能键。这是触发键，当按下该键时会导致命令被执行。

    i{<Esc>	插入 { 字符。<Esc> 键结束插入模式。

    e		移动到单词的末尾。

    a}<Esc>	将 } 附加到单词。

执行 ":map" 命令后，您要做的就是用花括号包围一个单词，只需将光标放在第一个字符上并按 F5。

在此示例中，触发器是单个键；它可以是任何字符串。但是当您使用现有的 Vim 命令时，该命令将不再可用。您最好避免这种情况。
   一个可以与映射一起使用的键是反斜杠。因为您可能想定义多个映射，所以请添加另一个字符。例如，您可以将 "\p" 映射为在单词周围添加圆括号，将 "\c" 映射为添加花括号： >

	:map \p i(<Esc>ea)<Esc>
	:map \c i{<Esc>ea}<Esc>

您需要快速连续地键入 \ 和 p，以便 Vim 知道它们属于一起。

":map" 命令（无参数）列出您当前的映射。至少是普通模式的映射。有关映射的更多信息，请参见第 |40.1| 节。

==============================================================================
*05.4*	添加一个包					*add-package*

您可以使用 |:packadd| 来按需启用包。这对于您只想有时启用的插件很有用。要启用 `example_package`，请使用以下命令： >
       packadd example_package

就这样！现在您可以找到关于此插件的帮助： >
       :help example_package

这之所以有效，是因为当 `:packadd` 加载插件时，它还在 'runtimepath' 中添加了包目录，因此可以找到帮助文件。

包是一组可以添加到 Vim 的文件。有两种包：可选包和在启动时自动加载的包。

您可以在 Internet 上的各种地方找到包。它通常以存档或存储库的形式出现。对于存档，您可以按照以下步骤操作：
	1. 创建包目录： >
		mkdir -p ~/.local/share/nvim/site/pack/fancy
<	   "fancy" 可以是您喜欢的任何名称。使用描述包的名称。
	2. 在该目录中解压存档。这假设存档中的顶级目录是 "start"： >
		cd ~/.local/share/nvim/site/pack/fancy
		unzip /tmp/fancy.zip
<	   如果存档布局不同，请确保最终得到如下路径：
		~/.local/share/nvim/site/pack/fancy/start/fancytext/plugin/fancy.vim ~
	   这里 "fancytext" 是包的名称，它可以是任何其他名称。


添加 nohlsearch 包	*nohlsearch-install* *package-nohlsearch*

使用此命令加载插件： >
	packadd nohlsearch
<
在 'updatetime' 之后或进入 |Insert| 模式后自动执行 |:nohlsearch|。
因此，假设默认的 updatetime，hlsearch 将在空闲 4 秒后暂停/关闭。

在插件加载后禁用其效果： >
	au! nohlsearch
<


有关包的更多信息可以在此处找到：|packages|。

==============================================================================
*05.5*	添加一个插件					*add-plugin* *plugin*

Vim 的功能可以通过添加插件来扩展。插件只不过是一个 Vim 脚本文件，在 Vim 启动时自动加载。您可以通过将插件放入您的插件目录来非常轻松地添加插件。

有两种类型的插件：

    全局插件：用于所有类型的文件
  文件类型插件：仅用于特定类型的文件

首先讨论全局插件，然后是文件类型插件 |add-filetype-plugin|。


全局插件						*standard-plugin*

当您启动 Vim 时，它会自动加载许多全局插件。您无需为此做任何事情。它们添加了大多数人希望使用的功能，但这些功能是作为 Vim 脚本实现的，而不是编译到 Vim 中。您可以在帮助索引 |standard-plugin-list| 中找到它们。另请参阅 |load-plugins|。

							*add-global-plugin*
您可以添加一个全局插件来添加在使用 Vim 时始终存在的功能。添加全局插件只需两个步骤：
1. 获取插件的副本。
2. 将其放入正确的目录。


获取全局插件

在哪里可以找到插件？
- 有些总是加载，您可以在目录 $VIMRUNTIME/plugin 中看到它们。
- 有些随 Vim 提供。您可以在目录 $VIMRUNTIME/scripts 及其子目录以及 $VIM/vimfiles/pack/dist/opt/ 下找到它们。
- 从网上下载。在 https://www.vim.org 上有一个大型集合。
- 它们有时会发布在 Vim 邮件列表中。
- 您可以自己编写一个，参见 |write-plugin|。


使用全局插件

首先阅读插件本身的文本以检查任何特殊条件。然后将文件复制到您的插件目录：

	系统		插件目录 ~
	Unix		~/.local/share/nvim/site/plugin

Unix 示例（假设您还没有插件目录）： >

	mkdir -p ~/.local/share/nvim/site/plugin
	cp /tmp/yourplugin.vim ~/.local/share/nvim/site/plugin

就这样！现在您可以使用此插件中定义的命令。

与其将插件直接放入 plugin/ 目录，不如通过将它们放入 plugin/ 下的子目录来更好地组织它们。
例如，考虑对所有 Perl 插件使用 "~/.local/share/nvim/site/plugin/perl/*.vim"。


文件类型插件			*add-filetype-plugin* *ftplugins*

Vim 发行版附带了一组用于不同文件类型的插件，您可以使用以下命令开始使用： >

	:filetype plugin on

就这样！参见 |vimrc-filetype|。

如果您使用的文件类型缺少插件，或者您找到了更好的插件，您可以添加它。添加文件类型插件有两个步骤：
1. 获取插件的副本。
2. 将其放入正确的目录。


获取文件类型插件

您可以在与全局插件相同的地方找到它们。注意是否提到了文件类型，那么您就知道插件是全局的还是文件类型的。$VIMRUNTIME/scripts 中的脚本是全局的，文件类型插件在 $VIMRUNTIME/ftplugin 中。


使用文件类型插件					*ftplugin-name*

您可以通过将文件类型插件放入正确的目录来添加它。此目录的名称与上面提到的全局插件目录相同，但最后一部分是 "ftplugin"。假设您找到了一个用于 "stuff" 文件类型的插件，并且您在 Unix 上。然后您可以将此文件移动到 ftplugin 目录： >

	mkdir -p ~/.local/share/nvim/site/ftplugin
	mv thefile ~/.local/share/nvim/site/ftplugin/stuff.vim

如果该文件已存在，您已经有一个用于 "stuff" 的插件。您可能想检查现有插件是否与您要添加的插件冲突。如果没问题，您可以给新插件另一个名称： >

	mv thefile ~/.local/share/nvim/site/ftplugin/stuff_too.vim

下划线用于将文件类型的名称与其余部分分开，其余部分可以是任何内容。如果您使用 "otherstuff.vim"，它将不起作用，它将为 "otherstuff" 文件类型加载。

文件类型插件的通用名称是： >

	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim

这里 "<name>" 可以是您喜欢的任何名称。
Unix 上 "stuff" 文件类型的示例： >

	~/.local/share/nvim/site/ftplugin/stuff.vim
	~/.local/share/nvim/site/ftplugin/stuff_def.vim
	~/.local/share/nvim/site/ftplugin/stuff/header.vim

<filetype> 部分是插件要使用的文件类型的名称。只有此文件类型的文件才会使用插件中的设置。插件文件的 <name> 部分无关紧要，您可以使用它来为同一文件类型设置多个插件。注意它必须以 ".vim" 或 ".lua" 结尾。


进一步阅读：
|filetype-plugins|	文件类型插件的文档以及有关如何避免映射导致问题的信息。
|load-plugins|		全局插件在启动期间加载的时间。
|ftplugin-overrule|	覆盖全局插件中的设置。
|write-plugin|		如何编写插件脚本。
|plugin-details|	有关使用插件或插件不工作时的更多信息。
|new-filetype|		如何检测新的文件类型。

==============================================================================
*05.6*	添加帮助文件		                   *add-local-help*

如果幸运的话，您安装的插件还附带一个帮助文件。我们将解释如何安装帮助文件，以便您可以轻松找到新插件的帮助。

假设有一个插件（"my-plugin"），它附带一个帮助文件，位于非标准位置（它通常位于名为 `doc/` 的子文件夹中）。

首先，在 'runtimepath' 中的一个目录中创建一个 "doc" 目录： >

	:!mkdir -p ~/.local/share/nvim/site/doc

现在，将帮助文件复制到 "doc" 目录： >

	:!cp my-plugin/my-plugin-doc.txt ~/.local/share/nvim/site/doc

接下来是关键步骤，它允许您跳转到新帮助文件中的主题。使用 |:helptags| 命令生成本地标签文件： >

	:helptags ~/.local/share/nvim/site/doc

当您执行以下操作时，您可以看到本地帮助文件的条目： >

	:help local-additions

本地帮助文件的标题行会自动添加到此部分。在那里您可以看到已添加了哪些本地帮助文件，并通过标签跳转到它们。

有关编写本地帮助文件的信息，请参见 |write-local-help|。

==============================================================================
*05.7*	选项窗口

如果您正在寻找一个能实现您想要功能的选项，您可以在帮助文件中搜索：|options|。另一种方法是使用此命令： >

	:options

这将打开一个新窗口，其中包含选项列表和一行解释。选项按主题分组。将光标移动到主题并按 <Enter> 跳转到那里。再次按 <Enter> 跳回。或使用 CTRL-O。

您可以更改选项的值。例如，移动到"显示文本"主题。然后将光标向下移动到此行：

	set wrap	nowrap ~

当您按 <Enter> 时，该行将更改为：

	set nowrap	wrap ~

该选项现在已关闭。

就在此行之上一行是 'wrap' 选项的简短描述。将光标向上移动一行将其放在此行中。现在按 <Enter>，您将跳转到关于 'wrap' 选项的完整帮助。

对于接受数字或字符串参数的选项，您可以编辑值。然后按 <Enter> 应用新值。例如，将光标向上移动几行到此行：

	set so=0 ~

使用 "$" 将光标定位在零上。用 "r5" 将其更改为五。然后按 <Enter> 应用新值。当您现在移动光标时，您会注意到在到达边界之前文本开始滚动。这就是 'scrolloff' 选项的作用，它指定滚动开始的窗口边界的偏移量。

==============================================================================
*05.8*	常用选项

有非常多的选项。其中大部分您几乎永远不会使用。这里将提到一些更有用的选项。不要忘记您可以使用 ":help" 命令找到关于这些选项的更多帮助，选项名称前后加上单引号。例如： >

	:help 'wrap'

如果您搞乱了选项值，可以通过在选项名称后加上 & 符号 (&) 将其设置回默认值。示例： >

	:set iskeyword&


不换行

Vim 通常换行长行，以便您可以看到所有文本。有时让文本继续在窗口右侧更好。然后您需要左右滚动文本以查看长行的所有内容。使用以下命令关闭换行： >

	:set nowrap

当您移动到未显示的文本时，Vim 会自动滚动文本。要查看十个字符的上下文，请执行以下操作： >

	:set sidescroll=10

这不会更改文件中的文本，只会更改其显示方式。


换行移动命令

大多数移动命令会在行的开头和结尾停止移动。您可以使用 'whichwrap' 选项更改这一点。这将其设置为默认值： >

	:set whichwrap=b,s

这允许 <BS> 键在行的第一个位置使用时，将光标移动到前一行的末尾。而 <Space> 键从行尾移动到下一行的开头。

要允许光标键 <Left> 和 <Right> 也换行，请使用此命令： >

	:set whichwrap=b,s,<,>

这仍然仅适用于普通模式。要让 <Left> 和 <Right> 在插入模式中也这样做： >

	:set whichwrap=b,s,<,>,[,]

还有一些其他标志可以添加，参见 'whichwrap'。


查看制表符

当文件中有制表符时，您看不到它们在哪里。要使它们可见： >

	:set list

现在每个制表符显示为 ^I。并且在每行的末尾显示一个 $，以便您可以发现否则会被忽略的尾随空格。
   一个缺点是当文件中有许多制表符时，这看起来很丑。如果您有彩色终端，或正在使用 GUI，Vim 可以将空格和制表符显示为高亮字符。使用 'listchars' 选项： >

	:set listchars=tab:>-,trail:-

现在每个制表符将显示为 ">---"（带有更多或更少的 "-"），尾随空白显示为 "-"。看起来好多了，不是吗？


关键字

'iskeyword' 选项指定哪些字符可以出现在单词中： >

	:set iskeyword
<	  iskeyword=@,48-57,_,192-255 ~

"@" 代表所有字母字符。"48-57" 代表 ASCII 字符 48 到 57，即数字 0 到 9。"192-255" 是可打印的拉丁字符。
   有时您会希望在关键字中包含破折号，以便像 "w" 这样的命令将 "upper-case" 视为一个单词。您可以这样做： >

	:set iskeyword+=-
	:set iskeyword
<	  iskeyword=@,48-57,_,192-255,- ~

如果您查看新值，您会发现 Vim 为您添加了一个逗号。
   要删除一个字符，请使用 "-="。例如，要删除下划线： >

	:set iskeyword-=_
	:set iskeyword
<	  iskeyword=@,48-57,192-255,- ~

这次会自动删除一个逗号。


消息空间

当 Vim 启动时，底部有一行用于显示消息。当消息很长时，它要么被截断，因此您只能看到它的一部分，要么文本滚动，您必须按 <Enter> 继续。
   您可以将 'cmdheight' 选项设置为用于消息的行数。示例： >

	:set cmdheight=3

这确实意味着编辑文本的空间更少，因此这是一种折衷。

==============================================================================

下一章: |usr_06.txt|  使用语法高亮

版权: 见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
