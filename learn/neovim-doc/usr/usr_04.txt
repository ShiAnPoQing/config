*usr_04.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar

			       做小的改动


本章向您展示了几种进行更正和移动文本的方法。它教您更改文本的三种基本方式：操作符-动作、可视模式和文本对象。

|04.1|	操作符和动作
|04.2|	更改文本
|04.3|	重复更改
|04.4|	可视模式
|04.5|	移动文本
|04.6|	复制文本
|04.7|	使用剪贴板
|04.8|	文本对象
|04.9|	替换模式
|04.10|	结论

     下一章: |usr_05.txt|  设置您的设置
 上一章: |usr_03.txt|  移动
目录: |usr_toc.txt|

==============================================================================
*04.1*	操作符和动作

在第 2 章中，您学习了 "x" 命令来删除单个字符。并且使用计数："4x" 删除四个字符。
   "dw" 命令删除一个单词。您可能认出 "w" 命令是移动单词命令。实际上，"d" 命令后面可以跟任何动作命令，它会从当前位置删除到光标最终到达的位置。
   例如，"4w" 命令将光标移动四个单词。"d4w" 命令删除四个单词。

	To err is human. To really foul up you need a computer. ~
			 ------------------>
				 d4w

	To err is human. you need a computer. ~

Vim 只删除到动作将光标移动到的位置。这是因为 Vim 知道您可能不想删除单词的第一个字符。如果您使用 "e" 命令移动到单词的末尾，Vim 会猜测您确实想包括最后一个字符：

	To err is human. you need a computer. ~
			-------->
			   d2e

	To err is human. a computer. ~

光标下的字符是否被包含取决于您用于移动到该字符的命令。参考手册将其称为"排他性"（当字符不被包含时）和"包含性"（当字符被包含时）。

"$" 命令移动到行尾。"d$" 命令从光标删除到行尾。这是一个包含性动作，因此行的最后一个字符包含在删除操作中：

	To err is human. a computer. ~
		       ------------>
			    d$

	To err is human ~

这里有一个模式：操作符-动作。您首先键入一个操作符命令。例如，"d" 是删除操作符。然后您键入一个动作命令，如 "4l" 或 "w"。这样，您就可以对任何可以移动到的文本进行操作。

==============================================================================
*04.2*	更改文本

另一个操作符是 "c"，更改。它的行为就像 "d" 操作符一样，只是它让您处于插入模式。例如，"cw" 更改一个单词。或者更具体地说，它删除一个单词，然后让您进入插入模式。

	To err is human ~
	   ------->
	     c2wbe<Esc>

	To be human ~

这个 "c2wbe<Esc>" 包含以下部分：

	c	更改操作符
	2w	移动两个单词（它们被删除并启动插入模式）
	be	插入此文本
	<Esc>	返回普通模式

您会注意到一些奇怪的地方："human" 之前的空格没有被删除。有句话说，对于每个问题，都有一个简单、清晰但错误的答案。这就是这里用于 "cw" 命令的示例的情况。c 操作符的工作方式与 d 操作符完全一样，只有一个例外："cw"。它实际上像 "ce" 一样工作，更改到单词末尾。因此单词后的空格不包括在内。这是一个可以追溯到旧 Vi 的例外。由于现在许多人已经习惯了它，这种不一致性在 Vim 中得以保留。


更多更改

就像 "dd" 删除整行一样，"cc" 更改整行。不过它会保留现有的缩进（前导空白）。

就像 "d$" 删除直到行尾一样，"c$" 更改直到行尾。这就像执行 "d$" 删除文本，然后执行 "a" 启动插入模式并附加新文本。


快捷方式

一些操作符-动作命令使用得非常频繁，以至于它们被赋予了单字母命令：

	x  代表  dl  (删除光标下的字符)
	X  代表  dh  (删除光标左侧的字符)
	D  代表  d$  (删除到行尾)
	C  代表  c$  (更改到行尾)
	s  代表  cl  (更改一个字符)
	S  代表  cc  (更改整行)


计数放在哪里

命令 "3dw" 和 "d3w" 都删除三个单词。如果您想非常挑剔，第一个命令 "3dw" 删除一个单词三次；命令 "d3w" 一次删除三个单词。这是一个没有区别的区别。实际上，您可以放入两个计数。例如，"3d2w" 删除两个单词，重复三次，总共六个单词。


用一个字符替换

"r" 命令不是一个操作符。它等待您键入一个字符，并将替换光标下的字符。您可以用 "cl" 或 "s" 命令做同样的事情，但使用 "r" 您不必按 <Esc> 退出插入模式。

	there is somerhing grong here ~
	rT	     rt    rw

	There is something wrong here ~

对 "r" 使用计数会导致那么多字符被替换为同一个字符。示例：

	There is something wrong here ~
			   5rx

	There is something xxxxx here ~

要用换行符替换一个字符，请使用 "r<Enter>"。这会删除一个字符并插入一个换行符。在此处使用计数仅适用于删除的字符数："4r<Enter>" 将四个字符替换为一个换行符。

==============================================================================
*04.3*	重复更改

"." 命令是 Vim 中最简单却最强大的命令之一。它重复最后一次更改。例如，假设您正在编辑一个 HTML 文件，并想要删除所有 <B> 标签。您将光标放在第一个 < 上，并使用命令 "df>" 删除 <B>。然后您转到下一个 </B> 的 < 并使用 "." 命令删除它。"." 命令执行最后一次更改命令（在这种情况下是 "df>"）。要删除另一个标签，将光标放在 < 上并使用 "." 命令。

			      To <B>generate</B> a table of <B>contents ~
	f<   找到第一个 <     --->
	df>  删除到 >	 -->
	f<   找到下一个 <	   --------->
	.    重复 df>			    --->
	f<   找到下一个 <		       ------------->
	.    重复 df>					    -->

"." 命令适用于您进行的所有更改，除了 "u"（撤销）、CTRL-R（重做）和以冒号 (:) 开头的命令。

另一个例子：您想将单词 "four" 更改为 "five"。它在您的文本中出现了几次。您可以使用以下命令序列快速完成此操作：

	/four<Enter>	找到第一个字符串 "four"
	cwfive<Esc>	将单词更改为 "five"
	n		找到下一个 "four"
	.		重复更改为 "five"
	n		找到下一个 "four"
	.		重复更改
			etc.

==============================================================================
*04.4*	可视模式

对于删除简单的项目，操作符-动作更改效果很好。但通常决定哪个命令会移动过您想要更改的文本并不那么容易。然后您可以使用可视模式。

您通过按 "v" 启动可视模式。您将光标移动过想要处理的文本。当您这样做时，文本会高亮显示。最后键入操作符命令。
   例如，要从一个单词的中间删除到另一个单词的中间：

		This is an examination sample of visual mode ~
			       ---------->
				 velllld

		This is an example of visual mode ~

这样做时，您不必真正计算需要按多少次 "l" 才能到达正确的位置。您可以在按 "d" 时立即看到哪些文本将被删除。

如果在任何时候您决定不想对高亮文本执行任何操作，只需按 <Esc>，可视模式将停止而不执行任何操作。


选择行

如果您想处理整行，请使用 "V" 启动可视模式。您会立即看到整行被高亮显示，无需移动。当您向左或向右移动时，没有任何变化。当您向上或向下移动时，选择会一次扩展整行。
   例如，使用 "Vjj" 选择三行：

			  +------------------------+
			  | text more text	   |
		       >> | more text more text    | |
	选中的行 >> | text text text	   | | Vjj
		       >> | text more		   | V
			  | more text more	   |
			  +------------------------+


选择块

如果您想处理一个矩形的字符块，请使用 CTRL-V 启动可视模式。这在处理表格时非常有用。

		name		Q1	Q2	Q3
		pierre		123	455	234
		john		0	90	39
		steve		392	63	334

要删除中间的 "Q2" 列，将光标移动到 "Q2" 的 "Q"。按 CTRL-V 启动块状可视模式。现在用 "3j" 将光标向下移动三行，并用 "w" 移动到下一个单词。您可以看到最后一列的第一个字符被包括在内。要排除它，请使用 "h"。现在按 "d"，中间列就消失了。


转到另一端

如果您在可视模式下选择了一些文本，并发现需要更改选择的另一端，请使用 "o" 命令（提示：o 代表 other end）。光标将转到另一端，您可以移动光标来更改选择开始的位置。再次按 "o" 会将您带回到另一端。

使用块状选择时，您有四个角。"o" 只将您带到对角线上的另一个角。使用 "O" 移动到同一行中的另一个角。

请注意，可视模式下的 "o" 和 "O" 与普通模式下的工作方式非常不同，在普通模式下它们会在光标下方或上方打开新行。

==============================================================================
*04.5*	移动文本

当您用 "d"、"x" 或其他命令删除某些内容时，文本会被保存。您可以使用 "p" 命令将其粘贴回来。（Vim 中对此的名称是 put）。
   看看这是如何工作的。首先您将删除整行，通过将光标放在要删除的行上并键入 "dd"。现在您将光标移动到要放置该行的位置并使用 "p" (put) 命令。该行被插入到光标下方的行。

	a line		a line	      a line
	line 2	  dd	line 3	  p   line 3
	line 3			      line 2

因为您删除了整行，"p" 命令将文本行放置在光标下方。如果您删除了一行的一部分（例如一个单词），"p" 命令会将其放在光标之后。

	Some more boring try text to out commands. ~
			 ---->
			  dw

	Some more boring text to out commands. ~
			 ------->
			    welp

	Some more boring text to try out commands. ~


关于放置的更多内容

"P" 命令像 "p" 一样放置文本，但是在光标之前。当您用 "dd" 删除整行时，"P" 会将其放回光标上方。当您用 "dw" 删除一个单词时，"P" 会将其放回光标之前。

您可以根据需要重复放置多次。将使用相同的文本。

您可以将计数与 "p" 和 "P" 一起使用。文本将重复计数指定的次数。因此 "dd" 然后 "3p" 会放置三个相同的已删除行的副本。


交换两个字符

通常在您打字时，您的手指会跑在您的大脑前面（或者反过来？）。结果是出现拼写错误，例如 "teh" 而不是 "the"。Vim 使得纠正此类问题变得容易。只需将光标放在 "teh" 的 e 上并执行命令 "xp"。其工作方式如下："x" 删除字符 e 并将其放在寄存器中。"p" 将文本放在光标之后，即在 h 之后。

	teh     th     the ~
	 x       p

==============================================================================
*04.6*	复制文本

要将文本从一个地方复制到另一个地方，您可以删除它，使用 "u" 撤销删除，然后使用 "p" 将其放在其他地方。有一个更简单的方法：拉取。"y" 操作符将文本复制到寄存器中。然后可以使用 "p" 命令将其放入。
   拉取只是 Vim 对复制的称呼。字母 "c" 已经用于更改操作符，而 "y" 仍然可用。将此操作符称为 "yank" 使得更容易记住使用 "y" 键。

由于 "y" 是一个操作符，您使用 "yw" 来拉取一个单词。像往常一样可以使用计数。要拉取两个单词，请使用 "y2w"。示例：

	let sqr = LongVariable * ~
		 -------------->
		       y2w

	let sqr = LongVariable * ~
			       p

	let sqr = LongVariable * LongVariable ~

请注意，"yw" 包括单词后的空白。如果您不想要这个，请使用 "ye"。

"yy" 命令拉取整行，就像 "dd" 删除整行一样。

	a text line   yy	a text line	       a text line
	line 2			line 2		p      line 2
	last line		last line	       a text line
						       last line

"Y" 最初等同于"拉取整行"，与 "D" 是"删除到行尾"相对。因此 "Y" 已被重新映射为表示"拉取到行尾"，以使其与 "D" 的行为一致。映射将在后面的章节中介绍。

==============================================================================
*04.7*	使用剪贴板

如果您使用的是 Vim 的 GUI 版本 (gvim)，您可以在"编辑"菜单中找到"复制"项。首先使用可视模式选择一些文本，然后使用编辑/复制菜单项。所选文本现在被复制到剪贴板。您可以将文本粘贴到其他程序中。在 Vim 本身中也可以。

如果您在另一个应用程序中将文本复制到剪贴板，您可以使用编辑/粘贴菜单项将其粘贴到 Vim 中。这适用于普通模式和插入模式。在可视模式下，选定的文本将被粘贴的文本替换。

"剪切"菜单项在将文本放入剪贴板之前先删除它。"复制"、"剪切"和"粘贴"项在弹出菜单中也可用（当然，仅当有弹出菜单时）。如果您的 Vim 有工具栏，您也可以在那里找到这些项。

如果您没有使用 GUI，或者如果您不喜欢使用菜单，您必须使用其他方式。您使用正常的 "y" (yank) 和 "p" (put) 命令，但在其前面加上 "*（双引号星号）。要将一行复制到剪贴板： >

	"*yy

要将文本从剪贴板放回文本中： >

	"*p

这仅适用于包含剪贴板支持的 Vim 版本。关于剪贴板的更多信息可以在第 |09.3| 节和此处找到：|clipboard|。

==============================================================================
*04.8*	文本对象

如果光标在一个单词的中间，并且您想删除该单词，您需要先回到它的开头，然后才能执行 "dw"。有一个更简单的方法可以做到这一点："daw"。

	this is some example text. ~
		       daw

	this is some text. ~

"daw" 中的 "d" 是删除操作符。"aw" 是一个文本对象。提示："aw" 代表 "A Word"。因此 "daw" 是 "Delete A Word"。准确地说，单词后的空白也被删除（或者如果在一行的末尾，则删除单词前的空白）。

使用文本对象是在 Vim 中进行更改的第三种方式。我们已经有了操作符-动作和可视模式。现在我们添加操作符-文本对象。
   它与操作符-动作非常相似，但不是操作移动命令前后光标位置之间的文本，而是将文本对象作为一个整体使用。光标在对象中的哪个位置并不重要。

要更改整个句子，请使用 "cis"。以这段文本为例：

	Hello there.  This ~
	is an example.  Just ~
	some text. ~

移动到第二行的开头，在 "is an" 上。现在使用 "cis"：

	Hello there.    Just ~
	some text. ~

光标在第一行的空白之间。现在您键入新句子 "Another line."：

	Hello there.  Another line.  Just ~
	some text. ~

"cis" 由 "c" (change) 操作符和 "is" 文本对象组成。这代表 "Inner Sentence"。还有 "as" ("A Sentence") 对象。区别在于 "as" 包括句子后的空白，而 "is" 不包括。如果您要删除一个句子，您希望同时删除空白，因此使用 "das"。如果您要键入新文本，空白可以保留，因此您使用 "cis"。

您也可以在可视模式下使用文本对象。它将在可视选择中包括文本对象。可视模式继续，因此您可以多次执行此操作。例如，使用 "v" 启动可视模式，并使用 "as" 选择一个句子。现在您可以重复 "as" 以包括更多句子。最后您使用一个操作符来处理选定的句子。

您可以在此处找到文本对象的详细列表：|text-objects|。

==============================================================================
*04.9*	替换模式

"R" 命令使 Vim 进入替换模式。在此模式下，您键入的每个字符都会替换光标下的字符。这会一直持续到您键入 <Esc>。
   在此示例中，您在 "text" 的第一个 "t" 上启动替换模式：

	This is text. ~
		Rinteresting.<Esc>

	This is interesting. ~

您可能已经注意到，此命令将行中的 5 个字符替换为十二个其他字符。"R" 命令在字符用完时会自动扩展该行。它不会继续到下一行。

您可以使用 <Insert> 键在插入模式和替换模式之间切换。

当您使用 <BS> (backspace) 进行更正时，您会注意到旧文本被放回。因此，它就像对先前键入字符的撤销命令一样工作。

==============================================================================
*04.10*	结论

操作符、移动命令和文本对象使您有可能进行多种组合。既然您知道它们是如何工作的，您可以使用 N 个操作符和 M 个移动命令来制作 N * M 个命令！

您可以在此处找到操作符列表：|operator|。

例如，还有许多其他方法可以删除文本片段。以下是一些常见的方法：

x	删除光标下的字符（"dl" 的简写）
X	删除光标前的字符（"dh" 的简写）
D	从光标删除到行尾（"d$" 的简写）
dw	从光标删除到下一个单词开头
db	从光标删除到前一个单词开头
diw	删除光标下的单词（不包括空白）
daw	删除光标下的单词（包括空白）
dG	删除直到文件末尾
dgg	删除直到文件开头

如果您使用 "c" 代替 "d"，它们就变成更改命令。使用 "y" 则拉取文本。依此类推。


还有一些常见的用于进行更改的命令，它们不适合放在其他地方：

	~	更改光标下字符的大小写，并将光标移动到下一个字符。这不是一个操作符（除非设置了 'tildeop'），因此您不能将其与动作命令一起使用。它在可视模式下有效，在那里它会更改所有选定文本的大小写。

	I	在将光标移动到行中第一个非空白后启动插入模式。

	A	在将光标移动到行尾后启动插入模式。

==============================================================================

下一章: |usr_05.txt|  设置您的设置

版权: 见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
