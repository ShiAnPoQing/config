*usr_08.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

			       分割窗口


上下显示两个不同的文件。或者同时查看文件中的两个位置。通过将两个文件并排放置来查看它们之间的差异。所有这些都可以通过分割窗口实现。

|08.1|	分割窗口
|08.2|	在另一个文件上分割窗口
|08.3|	窗口大小
|08.4|	垂直分割
|08.5|	移动窗口
|08.6|	适用于所有窗口的命令
|08.7|	使用差异模式查看差异
|08.8|	杂项
|08.9|	标签页

     下一章: |usr_09.txt|  使用 GUI
 上一章: |usr_07.txt|  编辑多个文件
     目录: |usr_toc.txt|

==============================================================================
*08.1*	分割窗口

打开新窗口最简单的方法是使用以下命令：>

	:split

此命令将屏幕分割成两个窗口，并将光标留在顶部窗口中：
>
	+----------------------------------+
	|/* file one.c */		   |
	|~				   |
	|~				   |
	|one.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+
<
您在这里看到的是同一文件上的两个窗口。带有 "====" 的行是状态行。它显示关于其上方窗口的信息。（实际上状态行会以反色显示。）
   这两个窗口允许您查看同一文件的两个部分。例如，您可以让顶部窗口显示程序的变量声明，底部窗口显示使用这些变量的代码。

CTRL-W w 命令可用于在窗口之间跳转。如果您在顶部窗口，CTRL-W w 跳转到其下方的窗口。如果您在底部窗口，它将跳转到第一个窗口。（CTRL-W CTRL-W 作用相同，以防您稍后松开 CTRL 键。）


关闭窗口

要关闭窗口，使用命令：>

	:close

实际上，任何退出编辑文件的命令都有效，例如 ":quit" 和 "ZZ"。但是 ":close" 可以防止您在关闭最后一个窗口时意外退出 Vim。


关闭所有其他窗口

如果您打开了一大堆窗口，但现在想专注于其中一个，这个命令会很有用：>

	:only

这将关闭所有窗口，除了当前窗口。如果任何其他窗口有更改，您将收到错误消息并且该窗口不会被关闭。

==============================================================================
*08.2*	在另一个文件上分割窗口

以下命令打开第二个窗口并开始编辑给定文件：
>
	:split two.c

如果您正在编辑 one.c，则结果如下所示：
>
	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+
<
要在新的空文件上打开窗口，请使用：>

	:new

您可以重复 ":split" 和 ":new" 命令来创建任意多的窗口。

==============================================================================
*08.3*	窗口大小

":split" 命令可以接受一个数字参数。如果指定，这将是新窗口的高度。例如，以下命令打开一个三行高的新窗口并开始编辑文件 alpha.c：>

	:3split alpha.c

对于现有窗口，您可以通过几种方式更改大小。当您有可用的鼠标时，这很容易：将鼠标指针移动到分隔两个窗口的状态行，然后向上或向下拖动它。

要增加窗口大小：>

	CTRL-W +

要减小它：>

	CTRL-W -

这两个命令都接受一个计数，并按该行数增加或减少窗口大小。因此 "4 CTRL-W +" 使窗口增加四行高。

要将窗口高度设置为指定行数：>

	{height}CTRL-W _

即：一个数字 {height}，CTRL-W，然后是一个下划线（在美式英语键盘上是 Shift + - 键）。
   要使窗口尽可能高，请使用不带计数的 CTRL-W _ 命令。


使用鼠标

在 Vim 中，您可以通过键盘非常快速地完成许多操作。不幸的是，调整窗口大小的命令需要相当多的输入。在这种情况下，使用鼠标更快。将鼠标指针放在状态行上。现在按下鼠标左键并拖动。状态行将移动，从而使一侧的窗口变高，另一侧的窗口变小。


选项

'winheight' 选项可以设置为窗口的最小期望高度，'winminheight' 设置为硬性最小高度。
   同样，'winwidth' 用于最小期望宽度，'winminwidth' 用于硬性最小宽度。
   当设置 'equalalways' 选项时，Vim 会在窗口关闭或打开时均衡窗口大小。

==============================================================================
*08.4*	垂直分割

":split" 命令在当前窗口上方创建新窗口。要让窗口出现在左侧，请使用：>

	:vsplit

或：>
	:vsplit two.c

结果看起来像这样：
>
	+--------------------------------------+
	|/* file two.c */   |/* file one.c */  |
	|~		    |~		       |
	|~		    |~		       |
	|~		    |~		       |
	|two.c===============one.c=============|
	|				       |
	+--------------------------------------+
<
实际上，中间的 | 线将以反色显示。这称为垂直分隔线。它分隔其左右的两个窗口。

还有 ":vnew" 命令，用于在新的空文件上打开垂直分割的窗口。另一种方法是：>

	:vertical new

":vertical" 命令可以插入到另一个分割窗口的命令之前。这将导致该命令垂直分割窗口而不是水平分割。（如果该命令不分割窗口，则它正常工作。）


在窗口之间移动

由于您可以随意水平和垂直分割窗口，因此您可以创建几乎任何窗口布局。然后您可以使用这些命令在它们之间移动：

	CTRL-W h	移动到左侧的窗口
	CTRL-W j	移动到下方的窗口
	CTRL-W k	移动到上方的窗口
	CTRL-W l	移动到右侧的窗口

	CTRL-W t	移动到最顶部 (TOP) 的窗口
	CTRL-W b	移动到最底部 (BOTTOM) 的窗口

您会注意到与移动光标相同的字母。如果您愿意，也可以使用光标键。
   移动到其他窗口的更多命令：|Q_wi|。

==============================================================================
*08.5*	移动窗口

您分割了几个窗口，但它们现在位置不对。那么您需要一个命令将窗口移动到其他地方。例如，您有三个窗口如下：
>
	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file three.c */		   |
	|~				   |
	|~				   |
	|three.c===========================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+
<
显然最后一个应该在顶部。进入该窗口（使用 CTRL-W w）然后键入此命令：>

	CTRL-W K

这里使用了大写字母 K。结果是窗口被移动到最顶部。您会注意到 K 再次用于向上移动。
   当您有垂直分割时，CTRL-W K 将把当前窗口移动到顶部并使其占据 Vim 窗口的完整宽度。如果您的布局是这样的：
>
	+-------------------------------------------+
	|/* two.c */  |/* three.c */  |/* one.c */  |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|two.c=========three.c=========one.c========|
	|					    |
	+-------------------------------------------+
<
然后在中间窗口 (three.c) 中使用 CTRL-W K 将导致：
>
	+-------------------------------------------+
	|/* three.c */				    |
	|~					    |
	|~					    |
	|three.c====================================|
	|/* two.c */	       |/* one.c */	    |
	|~		       |~		    |
	|two.c==================one.c===============|
	|					    |
	+-------------------------------------------+
<
其他三个类似的命令（您现在可能可以猜到了）：

	CTRL-W H	将窗口移动到最左边
	CTRL-W J	将窗口移动到底部
	CTRL-W L	将窗口移动到最右边

==============================================================================
*08.6*	适用于所有窗口的命令

当您打开多个窗口并想要退出 Vim 时，可以分别关闭每个窗口。更快的方法是使用此命令：>

	:qall

这代表 "quit all"。如果任何窗口包含更改，Vim 将不会退出。光标将自动定位在有更改的窗口中。然后您可以使用 ":write" 保存更改，或者使用 ":quit!" 丢弃它们。

如果您知道有窗口包含更改，并且想要保存所有这些更改，请使用此命令：>

	:wall

这代表 "write all"。但实际上，它只写入有更改的文件。Vim 知道写入未更改的文件没有意义。
   然后是 ":qall" 和 ":wall" 的组合："write and quit all" 命令：>

	:wqall

这将写入所有修改过的文件并退出 Vim。
   最后，有一个命令可以退出 Vim 并丢弃所有更改：>

	:qall!

小心，此命令无法撤销！


为所有参数打开窗口

要让 Vim 为每个文件打开一个窗口，请使用 "-o" 参数启动它：>

	vim -o one.txt two.txt three.txt

这将导致：
>
	+-------------------------------+
	|file one.txt			|
	|~				|
	|one.txt========================|
	|file two.txt			|
	|~				|
	|two.txt========================|
	|file three.txt			|
	|~				|
	|three.txt======================|
	|				|
	+-------------------------------+
<
"-O" 参数用于获得垂直分割的窗口。
   当 Vim 已经在运行时，":all" 命令为参数列表中的每个文件打开一个窗口。":vertical all" 以垂直分割的方式执行。

==============================================================================
*08.7*	使用差异模式查看差异

有一种启动 Nvim 的特殊方式，可以显示两个文件之间的差异。让我们以一个文件 "main.c" 为例，在其中一行的开头插入几个字符。在设置 'backup' 选项的情况下写入此文件，以便备份文件 "main.c~" 将包含文件的先前版本。
在 shell 中键入此命令以在差异模式下启动 Nvim：>

	nvim -d main.c~ main.c

Vim 将启动，两个窗口并排显示。您将只看到添加了字符的那一行，以及它上面和下面的几行。
>
	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- 折叠
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	changed text	  |  <- 更改的行
	|  text		     |	text		  |
	|  text		     |	------------------|  <- 删除的行
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|+ +--432 lines: text|+ +--432 lines: text|  <- 折叠
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+
<
（此图片未显示高亮，请使用 "nvim -d" 查看。）

未修改的行已被折叠成一行。这称为关闭的折叠。它们在图片中用 "<- 折叠" 表示。因此顶部的单个折叠行代表 123 行文本。这些行在两个文件中是相同的。
   标记为 "<- 更改的行" 的行被高亮显示，插入的文本以另一种颜色显示。这清楚地显示了两个文件之间的差异。
   被删除的行在 main.c 窗口中显示为 "---"。请参见图片中的 "<- 删除的行" 标记。这些字符并不真正存在。它们只是填充 main.c，使其显示与另一个窗口相同的行数。


折叠列

每个窗口左侧都有一个背景稍有不同的列。在上面的图片中，这些用 "VV" 表示。您会注意到那里有一个加号字符，在每个关闭的折叠前面。将鼠标指针移到该加号上并单击左键。折叠将打开，您可以看到它包含的文本。
   折叠列对于打开的折叠包含一个减号。如果您单击这个 -，折叠将关闭。
   显然，这仅在您有可用的鼠标时才有效。您也可以使用 "zo" 打开折叠，使用 "zc" 关闭它。


在 VIM 中进行差异比较

在差异模式下启动的另一种方法可以从 Vim 内部完成。编辑 "main.c" 文件，然后进行分割并显示差异：>

	:edit main.c
	:vertical diffsplit main.c~

":vertical" 命令用于使窗口垂直分割。如果省略此命令，您将获得水平分割。

如果您有补丁或差异文件，可以使用第三种方式启动差异模式。首先编辑补丁所应用的文件。然后告诉 Vim 补丁文件的名称：>

	:edit main.c
	:vertical diffpatch main.c.diff

警告：补丁文件必须仅包含一个适用于您正在编辑的文件的补丁。否则您将收到大量错误消息，并且某些文件可能会被意外地打补丁。
   打补丁将仅对 Vim 中的文件副本进行。硬盘上的文件将保持未修改状态（直到您决定写入文件）。


滚动绑定

当文件有更多更改时，您可以以通常的方式滚动。Vim 将尝试使两个窗口从相同的位置开始，因此您可以轻松地并排查看差异。
   当您暂时不需要此功能时，请使用此命令：>

	:set noscrollbind


跳转到更改

当您以某种方式禁用了折叠时，可能很难找到更改。使用此命令向前跳转到下一个更改：>

	]c

要朝另一个方向跳转，请使用：>

	[c

在前面加上计数以跳得更远。


移除更改

您可以将文本从一个窗口移动到另一个窗口。这要么消除差异，要么增加新的差异。Vim 不会在所有情况下都保持高亮更新。要更新它，请使用此命令：>

	:diffupdate

要消除差异，您可以将高亮块中的文本从一个窗口移动到另一个窗口。以上面的 "main.c" 和 "main.c~" 为例。将光标移动到左窗口，位于在另一个窗口中被删除的行上。现在键入此命令：>

	dp

通过将当前窗口的文本放入另一个窗口来消除更改。"dp" 代表 "diff put"。
   您也可以反过来操作。将光标移动到右窗口，到插入 "changed" 的那一行。现在键入此命令：>

	do

现在通过从另一个窗口获取文本来消除更改。由于现在没有更改了，Vim 将所有文本放入一个关闭的折叠中。"do" 代表 "diff obtain"。"dg" 本来更好，但它已经有不同的含义了（"dgg" 从光标删除直到第一行）。

有关差异模式的详细信息，请参阅 |diff-mode|。

==============================================================================
*08.8*	杂项

'laststatus' 选项可用于指定何时最后一个窗口具有状态行：

	0	从不
	1	仅当有分割窗口时（默认）
	2	总是
	3	在底部有一个全局状态行，而不是每个窗口一个

许多编辑另一个文件的命令都有一个分割窗口的变体。对于命令行命令，这是通过在前面加上 "s" 来完成的。例如：":tag" 跳转到一个标签，":stag" 分割窗口并跳转到一个标签。
   对于普通模式命令，在前面加上 CTRL-W。CTRL-^ 跳转到交替文件，CTRL-W CTRL-^ 分割窗口并编辑交替文件。

'splitbelow' 选项可以设置以使新窗口出现在当前窗口下方。'splitright' 选项可以设置以使垂直分割的窗口出现在当前窗口右侧。

当分割窗口时，您可以在前面加上修饰符命令以告知窗口出现的位置：

	:leftabove {cmd}	在当前窗口的左侧或上方
	:aboveleft {cmd}	同上
	:rightbelow {cmd}	在当前窗口的右侧或下方
	:belowright {cmd}	同上
	:topleft {cmd}		在 Vim 窗口的顶部或左侧
	:botright {cmd}		在 Vim 窗口的底部或右侧


==============================================================================
*08.9*	标签页

您会注意到窗口从不重叠。这意味着您很快会耗尽屏幕空间。解决这个问题的方法称为标签页。

假设您正在编辑 "thisfile"。要创建新的标签页，请使用此命令：>

	:tabedit thatfile

这将在占据整个 Vim 窗口的窗口中编辑文件 "thatfile"。并且您会注意到顶部有一个带有两个文件名的栏：
>
	+----------------------------------+
	| thisfile | /thatfile/ __________X|    (thatfile 为粗体)
	|/* thatfile */			   |
	|that				   |
	|that				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+
<
您现在有两个标签页。第一个有一个用于 "thisfile" 的窗口，第二个有一个用于 "thatfile" 的窗口。这就像两页叠在一起，每个页面伸出一个标签显示文件名。

现在使用鼠标点击顶部行中的 "thisfile"。结果是
>
	+----------------------------------+
	| /thisfile/ | thatfile __________X|    (thisfile 为粗体)
	|/* thisfile */			   |
	|this				   |
	|this				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+
<
因此，您可以通过点击顶部行中的标签在标签页之间切换。如果您没有鼠标或不想使用它，可以使用 "gt" 命令。助记符：Goto Tab。

现在让我们使用命令创建另一个标签页：>

	:tab split

这将创建一个新的标签页，其中包含一个窗口，该窗口编辑与我们所在窗口相同的缓冲区：
>
	+-------------------------------------+
	| thisfile | /thisfile/ | thatfile __X|   (thisfile 为粗体)
	|/* thisfile */			      |
	|this				      |
	|this				      |
	|~				      |
	|~				      |
	|~				      |
	|				      |
	+-------------------------------------+
<
您可以在任何打开窗口的 Ex 命令前加上 ":tab"。该窗口将在新的标签页中打开。另一个例子：>

	:tab help gt

将在新的标签页中显示 "gt" 的帮助文本。

您可以使用标签页做更多事情：

- 用鼠标点击最后一个标签后面的空白处
	下一个标签页将被选中，就像使用 "gt" 一样。

- 用鼠标点击右上角的 "X"
	当前标签页将被关闭。除非当前标签页中有未保存的更改。

- 用鼠标双击顶部行
	将创建一个新的标签页。

- "tabonly" 命令
	关闭除当前标签页之外的所有标签页。除非其他标签页中有未保存的更改。

有关标签页的更多信息，请参阅 |tab-page|。

==============================================================================

下一章: |usr_09.txt|  使用 GUI

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
