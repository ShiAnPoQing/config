*usr_20.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

			     快速输入命令行命令


Vim 有一些通用功能，使输入命令更加容易。冒号命令可以缩写、编辑和重复。几乎所有内容都支持补全。

|20.1|	命令行编辑
|20.2|	命令行缩写
|20.3|	命令行补全
|20.4|	命令行历史
|20.5|	命令行窗口

     下一章: |usr_21.txt|  离开并返回
 上一章: |usr_12.txt|  巧妙技巧
     目录: |usr_toc.txt|

==============================================================================
*20.1*	命令行编辑

当您使用冒号 (:) 命令或使用 / 或 ? 搜索字符串时，Vim 将光标放在屏幕底部。您在那里输入命令或搜索模式。这称为命令行。当它用于输入搜索命令时也是如此。

编辑您输入的命令最明显的方法是按 <BS> 键。这会删除光标前的字符。要删除之前键入的另一个字符，首先使用光标键移动光标。
   例如，您键入了：>

	:s/col/pig/

在您按 <Enter> 之前，您注意到 "col" 应该是 "cow"。要更正此问题，您按 <Left> 五次。光标现在在 "col" 之后。输入 <BS> 和 "w" 来更正：>

	:s/cow/pig/

现在您可以直接按 <Enter>。在执行命令之前，您不必将光标移动到行尾。

在命令行中最常用的移动键：

	<Left>			向左一个字符
	<Right>			向右一个字符
	<S-Left> 或 <C-Left>	向左一个单词
	<S-Right> 或 <C-Right>	向右一个单词
	CTRL-B 或 <Home>	到命令行开头
	CTRL-E 或 <End>		到命令行末尾

	注意:
	<S-Left>（按 Shift 键的光标左键）和 <C-Left>（按 Control 键的光标左键）并非在所有键盘上都有效。其他 Shift 和 Control 组合也是如此。

您也可以使用鼠标移动光标。


删除

如前所述，<BS> 删除光标前的字符。要删除整个单词，请使用 CTRL-W。

	/the fine pig ~

		     CTRL-W

	/the fine ~

CTRL-U 删除所有文本，从而允许您重新开始。


覆盖

<Insert> 键在插入字符和替换现有字符之间切换。从此文本开始：

	/the fine pig ~

使用 <S-Left> 两次（或者如果 <S-Left> 无效，则使用 <Left> 八次）将光标移动到 "fine" 的开头。现在按 <Insert> 切换到覆盖模式并输入 "great"：

	/the greatpig ~

哎呀，我们丢失了空格。现在，不要使用 <BS>，因为它会删除 "t"（这与替换模式不同）。而是按 <Insert> 从覆盖模式切换到插入模式，并输入空格：

	/the great pig ~


取消

您想执行 : 或 / 命令，但改变了主意。要摆脱已经输入的内容而不执行它，请按 CTRL-C 或 <Esc>。

	注意:
	<Esc> 是通用的"退出"键。不幸的是，在古老的 Vi 中，在命令行中按 <Esc> 会执行命令！由于这可能被认为是一个错误，Vim 使用 <Esc> 来取消命令。但是使用 'cpoptions' 选项可以使其与 Vi 兼容。并且当使用映射（可能是为 Vi 编写的）时，<Esc> 也以 Vi 兼容的方式工作。因此，使用 CTRL-C 是一种总是有效的方法。

如果您在命令行的开头，按 <BS> 将取消命令。就像删除行首的 ":" 或 "/" 一样。

==============================================================================
*20.2*	命令行缩写

一些 ":" 命令非常长。我们已经提到 ":substitute" 可以缩写为 ":s"。这是一个通用机制，所有 ":" 命令都可以缩写。

命令可以有多短？有 26 个字母，但命令更多。例如，":set" 也以 ":s" 开头，但 ":s" 不启动 ":set" 命令。相反，":set" 可以缩写为 ":se"。
   当命令的较短形式可能用于两个命令时，它仅代表其中一个。这背后没有逻辑，您必须学习它们。在帮助文件中提到了可用的最短形式。例如：>

	:s[ubstitute]

这意味着 ":substitute" 的最短形式是 ":s"。后面的字符是可选的。因此 ":su" 和 ":sub" 也有效。

在用户手册中，我们将使用命令的全名，或使用仍然可读的简短版本。例如，":function" 可以缩写为 ":fu"。但由于大多数人不理解那代表什么，我们将使用 ":fun"。（Vim 没有 ":funny" 命令，否则 ":fun" 也会令人困惑。）

建议在 Vim 脚本中编写完整的命令名称。这样在以后进行更改时更容易阅读。除了一些常用的命令，如 ":w"（":write"）和 ":r"（":read"）。
   一个特别令人困惑的是 ":end"，它可能代表 ":endif"、":endwhile" 或 ":endfunction"。因此，请始终使用全名。


短选项名

在用户手册中，使用选项名的长版本。许多选项也有短名称。与 ":" 命令不同，只有一个短名称有效。例如，'autoindent' 的短名称是 'ai'。因此这两个命令做同样的事情：>

	:set autoindent
	:set ai

您可以在此处找到长名称和短名称的完整列表：|option-list|。

==============================================================================
*20.3*	命令行补全

这是 Vim 的那些功能之一，其本身就是从 Vi 切换到 Vim 的一个理由。一旦您使用了这个功能，您就无法离开它。

假设您有一个包含这些文件的目录：

	info.txt
	intro.txt
	bodyofthepaper.txt

要编辑最后一个，您使用命令：>

	:edit bodyofthepaper.txt

这很容易输错。一个快得多的方法是：>

	:edit b<Tab>

这将产生相同的命令。发生了什么？<Tab> 键补全光标前的单词。在这种情况下是 "b"。Vim 在目录中查找，并找到一个以 "b" 开头的文件。那一定是您要找的那个，因此 Vim 为您补全了文件名。

现在输入：>

	:edit i<Tab>

Vim 将发出蜂鸣声，并给出：>

	:edit info.txt

蜂鸣声意味着 Vim 找到了多个匹配项。然后它使用它找到的第一个匹配项（按字母顺序）。如果您再次按 <Tab>，您会得到：>

	:edit intro.txt

因此，如果第一次按 <Tab> 没有给出您要找的文件，请再次按它。如果有更多匹配项，您将一次看到所有匹配项。
   如果您在最后一个匹配条目上按 <Tab>，您将回到您最初输入的内容：>

	:edit i

然后它重新开始。因此 Vim 在匹配列表中循环。使用 CTRL-P 在另一个方向遍历列表：

	      <------------------- <Tab> -------------------------+
								  |
		  <Tab> -->		       <Tab> -->
	:edit i		      :edit info.txt		   :edit intro.txt
		  <-- CTRL-P		       <-- CTRL-P
	   |
	   +---------------------- CTRL-P ------------------------>


上下文

当您输入 ":set i" 而不是 ":edit i" 并按 <Tab> 时，您会得到：>

	:set icon

嘿，为什么没有得到 ":set info.txt"？这是因为 Vim 具有上下文敏感的补全。Vim 将查找的单词类型取决于其前面的命令。Vim 知道在 ":set" 命令之后不能使用文件名，但可以使用选项名。
   同样，如果您重复按 <Tab>，Vim 将遍历所有匹配项。有很多匹配项，最好先输入更多字符：>

	:set isk<Tab>

给出：>

	:set iskeyword

现在输入 "=" 并按 <Tab>：>

	:set iskeyword=@,48-57,_,192-255

这里发生的是 Vim 插入了选项的旧值。现在您可以编辑它。
   用 <Tab> 补全的是 Vim 在该位置期望的内容。只需尝试一下看看它是如何工作的。在某些情况下，您不会得到您想要的内容。这要么是因为 Vim 不知道您想要什么，要么是因为该情况未实现补全。在这种情况下，将插入一个 <Tab>（显示为 ^I）。


列出匹配项

当有许多匹配项时，您希望看到一个概览。通过按 CTRL-D 来实现。例如，在以下之后按 CTRL-D：>

	:set is

结果是：>

	:set is
	incsearch  isfname    isident    iskeyword  isprint
	:set is

Vim 列出匹配项，然后返回您输入的文本。您现在可以检查列表中找到您想要的项。如果它不在那里，您可以使用 <BS> 更正单词。如果有许多匹配项，在按 <Tab> 补全其余部分之前多输入几个字符。
   如果您仔细观察，您会注意到 "incsearch" 不是以 "is" 开头。在这种情况下，"is" 代表 "incsearch" 的短名称。（许多选项有短名称和长名称。）Vim 足够聪明，知道您可能希望将选项的短名称扩展为长名称。


还有更多

CTRL-L 命令将单词补全为最长的明确字符串。如果您输入 ":edit i" 并且有文件 "info.txt" 和 "info_backup.txt"，您将得到 ":edit info"。

'wildmode' 选项可用于更改补全的工作方式。
'wildmenu' 选项可用于获得菜单式的匹配列表。
使用 'suffixes' 选项指定不太重要的文件，这些文件出现在文件列表的末尾。
'wildignore' 选项指定根本不列出的文件。

有关所有这些的更多信息，请参阅：|cmdline-completion|

==============================================================================
*20.4*	命令行历史

在第3章中，我们简要提到了历史记录。基本知识是您可以使用 <Up> 键调出较旧的命令行。<Down> 则将您带回到较新的命令。

实际上有五个历史记录。我们这里要提到的是 ":" 命令和 "/" 和 "?" 搜索命令的历史记录。"/" 和 "?" 命令共享同一个历史记录，因为它们都是搜索命令。另外三个历史记录用于表达式、调试模式命令和 input() 函数的输入行。|cmdline-history|

假设您执行了一个 ":set" 命令，键入了另外十个冒号命令，然后想要再次重复那个 ":set" 命令。您可以按 ":" 然后按十次 <Up>。有一个更快的方法：>

	:se<Up>

Vim 现在将回到以前以 "se" 开头的命令。您有很大机会这就是您要找的 ":set" 命令。至少您不必经常按 <Up>（除非您只做了 ":set" 命令）。

<Up> 键将使用到目前为止键入的文本，并将其与历史记录中的行进行比较。只有匹配的行才会被使用。
   如果您找不到您要找的行，使用 <Down> 回到您输入的内容并进行更正。或者使用 CTRL-U 重新开始。

要查看历史记录中的所有行：>

	:history

那是 ":" 命令的历史记录。搜索历史记录用此命令显示：>

	:history /

CTRL-P 将像 <Up> 一样工作，只是它不在乎您已经键入了什么。类似地，CTRL-N 和 <Down> 也是如此。CTRL-P 代表 previous（上一个），CTRL-N 代表 next（下一个）。

==============================================================================
*20.5*	命令行窗口

在命令行中键入文本与在插入模式下键入文本的工作方式不同。它不允许许多命令来更改文本。对于大多数命令来说这没问题，但有时您必须键入一个复杂的命令。这就是命令行窗口有用的地方。

用此命令打开命令行窗口：>

	q:

Vim 现在在底部打开一个（小）窗口。它包含命令行历史记录，并在末尾有一个空行：
>
	+-------------------------------------+
	|其他窗口			      |
	|~				      |
	|file.txt=============================|
	|:e c				      |
	|:e config.h.in			      |
	|:set path=.,/usr/include,,	      |
	|:set iskeyword=@,48-57,_,192-255     |
	|:set is			      |
	|:q				      |
	|:				      |
	|command-line=========================|
	|				      |
	+-------------------------------------+
<
您现在处于正常模式。您可以使用 "hjkl" 键移动。例如，用 "5k" 向上移动到 ":e config.h.in" 行。输入 "$h" 转到 "in" 的 "i" 并输入 "cwout"。现在您已将行更改为：

	:e config.h.out ~

现在按 <Enter>，此命令将被执行。命令行窗口将关闭。
   <Enter> 命令将执行光标下的行。无论 Vim 处于插入模式还是正常模式都无关紧要。
   命令行窗口中的更改会丢失。它们不会导致历史记录被更改。除了您执行的命令将被添加到历史记录的末尾，就像所有执行的命令一样。

当您想要概览历史记录、查找类似命令、稍作更改并执行它时，命令行窗口非常有用。可以使用搜索命令来查找某些内容。
   在前面的示例中，本可以使用 "?config" 搜索命令来查找包含 "config" 的前一个命令。这有点奇怪，因为您正在使用命令行来搜索命令行窗口。在键入该搜索命令时，您无法打开另一个命令行窗口，只能有一个。

==============================================================================

下一章: |usr_21.txt|  离开并返回

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
