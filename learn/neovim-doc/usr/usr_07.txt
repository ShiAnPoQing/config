*usr_07.txt*	Nvim

		     VIM 用户手册 - 作者：Bram Moolenaar

			      编辑多个文件


无论您有多少文件，都可以在不离开 Vim 的情况下编辑它们。
定义一个要处理的文件列表，并在文件之间跳转。将文本从一个文件复制并放入另一个文件。

|07.1|	编辑另一个文件
|07.2|	文件列表
|07.3|	在文件间跳转
|07.4|	备份文件
|07.5|	在文件间复制文本
|07.6|	查看文件
|07.7|	更改文件名

     下一章: |usr_08.txt|  分割窗口
 上一章: |usr_06.txt|  使用语法高亮
     目录: |usr_toc.txt|

==============================================================================
*07.1*	编辑另一个文件

到目前为止，您必须为每个要编辑的文件启动 Vim。有一个更简单的方法。要开始编辑另一个文件，请使用此命令：>

	:edit foo.txt

您可以使用任何文件名代替 "foo.txt"。Vim 将关闭当前文件并打开新文件。但是，如果当前文件有未保存的更改，Vim 将显示错误消息并且不打开新文件：

	E37: 自上次更改后未写入 (使用 ! 强制执行) ~

	注意:
	Vim 在每个错误消息的开头放置一个错误 ID。如果您不理解该消息或其产生原因，请在帮助系统中查找此 ID。在这种情况下：>

		:help E37

此时，您有几种选择。您可以使用此命令写入文件：>

	:write

或者您可以使用强制 (!) 字符强制 Vim 放弃您的更改并编辑新文件：>

	:edit! foo.txt

如果您想编辑另一个文件，但还不想保存当前文件中的更改，可以将其设为隐藏：>

	:hide edit foo.txt

包含更改的文本仍然存在，但您看不到它。这将在第 |22.4| 节中进一步解释：缓冲区列表。

==============================================================================
*07.2*	文件列表

您可以启动 Vim 来编辑一系列文件。例如：>

	vim one.c two.c three.c

此命令启动 Vim 并告知您将编辑三个文件。Vim 仅显示第一个文件。当您在此文件中完成操作后，要编辑下一个文件，请使用此命令：>

	:next

如果您在当前文件中有未保存的更改，您将收到错误消息，并且 ":next" 将不起作用。这与上一节中提到的 ":edit" 的问题相同。要放弃更改：>

	:next!

但大多数情况下，您希望保存更改并继续处理下一个文件。有一个特殊的命令用于此：>

	:wnext

这与使用两个单独的命令作用相同：>

	:write
	:next


我在哪里？

要查看您正在编辑参数列表中的哪个文件，请查看窗口标题。它应显示类似 "(2 of 3)" 的内容。这意味着您正在编辑三个文件中的第二个文件。
   如果要查看文件列表，请使用此命令：>

	:args

这是 "arguments" 的缩写。输出可能如下所示：

	one.c [two.c] three.c ~

这些是您启动 Vim 时使用的文件。您当前正在编辑的文件 "two.c" 用方括号括起。


移动到其他参数

要返回上一个文件：>

	:previous

这就像 ":next" 命令，只是它向另一个方向移动。同样，有一个快捷命令用于当您想先写入文件时：>

	:wprevious

要移动到列表中的最后一个文件：>

	:last

要移回第一个文件：>

	:first

不过，没有 ":wlast" 或 ":wfirst" 命令！

您可以为 ":next" 和 ":previous" 使用计数。要向前跳过两个文件：>

	:2next


自动写入

在文件之间移动并进行更改时，您必须记住使用 ":write"。否则您将收到错误消息。如果您确定总是要写入修改过的文件，可以告诉 Vim 自动写入它们：>

	:set autowrite

当您编辑一个可能不想写入的文件时，再次关闭它：>

	:set noautowrite


编辑另一个文件列表

您无需退出 Vim 并重新启动即可重新定义文件列表。使用此命令编辑另外三个文件：>

	:args five.c six.c seven.h

或者使用通配符，就像在 shell 中使用的那样：>

	:args *.txt

Vim 将带您到列表中的第一个文件。同样，如果当前文件有更改，您可以先写入文件，或者使用 ":args!"（添加了 !）来放弃更改。


您编辑了最后一个文件吗？
							*arglist-quit*
当您使用文件列表时，Vim 假定您想要编辑所有文件。为了保护您不过早退出，当您尚未编辑列表中的最后一个文件时，您将收到此错误：

	E173: 还有 46 个文件要编辑 ~

如果您真的想退出，只需再执行一次退出命令。然后它就会起作用（但当您在中间执行了其他命令时则不行）。

==============================================================================
*07.3*	在文件间跳转

要快速在两个文件之间跳转，请按 CTRL-^（在美式英语键盘上，^ 在 6 键上方）。示例：>

	:args one.c two.c three.c

您现在在 one.c 中。>

	:next

现在您在 two.c 中。现在使用 CTRL-^ 返回到 one.c。再按一次 CTRL-^，您又回到了 two.c。再按一次 CTRL-^，您又回到了 one.c。如果您现在执行：>

	:next

您在 three.c 中。请注意，CTRL-^ 命令不会改变您在文件列表中的位置概念。只有像 ":next" 和 ":previous" 这样的命令才会改变。

您之前编辑的文件称为 "交替" 文件。当您刚启动 Vim 时，CTRL-^ 将不起作用，因为还没有上一个文件。


预定义标记

跳转到另一个文件后，您可以使用两个非常有用的预定义标记：>

	`"

这将带您到离开文件时光标所在的位置。记住的另一个标记是您最后一次更改的位置：>

	`.

假设您正在编辑文件 "one.txt"。在文件的某个中间位置，您使用 "x" 删除了一个字符。然后您用 "G" 转到最后一行，并用 ":w" 写入文件。您编辑了几个其他文件，然后使用 ":edit one.txt" 返回到 "one.txt"。如果您现在使用 `"，Vim 将跳转到文件的最后一行。使用 `. 将带您到删除字符的位置。即使您在文件中移动，`" 和 `. 也会将您带到记住的位置。至少在您进行另一个更改或离开文件之前是这样。


文件标记

在 |03.10| 节中解释了如何用 "mx" 在文件中放置标记，并用 "`x" 跳转到该位置。这在一个文件内有效。如果您编辑另一个文件并在那里放置标记，这些标记是该文件特定的。因此每个文件都有自己的一组标记，它们是文件局部的。
   到目前为止，我们一直在使用小写字母的标记。还有大写字母的标记。这些是全局的，可以从任何文件使用。例如，假设我们正在编辑文件 "foo.txt"。转到文件的一半位置（"50%"）并在那里放置 F 标记（F 代表 foo）：>

	50%mF

现在编辑文件 "bar.txt" 并将其 B 标记（B 代表 bar）放在其最后一行：
>
	GmB

现在您可以使用 "'F" 命令跳回到 foo.txt 的一半位置。或者编辑另一个文件，输入 "'B"，您将跳转到 bar.txt 的末尾。

文件标记会被记住，直到它们被放置在其他地方。因此，您可以放置标记，进行数小时的编辑，然后仍然能够跳回该标记。
   在标记字母和其放置位置之间建立一个简单的联系通常很有用。例如，在头文件中使用 H 标记，在 Makefile 中使用 M 标记，在 C 代码文件中使用 C 标记。

要查看特定标记的位置，请给 ":marks" 命令一个参数：>

	:marks M

您也可以给出几个参数：>

	:marks MCP

不要忘记，您可以使用 CTRL-O 和 CTRL-I 跳转到较旧和较新的位置，而无需在那里放置标记。

==============================================================================
*07.4*	备份文件

通常 Vim 不会生成备份文件。如果您想要一个，您需要做的就是执行以下命令：>

	:set backup

备份文件的名称是原始文件末尾添加了一个 ~。例如，如果您的文件名为 data.txt，则备份文件名为 data.txt~。
   如果您不喜欢备份文件以 ~ 结尾，可以更改扩展名：>

	:set backupext=.bak

这将使用 data.txt.bak 而不是 data.txt~。
   另一个相关的选项是 'backupdir'。它指定备份文件的写入位置。默认值，即在原始文件所在目录写入备份，在大多数情况下是正确的。

	注意:
	当未设置 'backup' 选项但设置了 'writebackup' 时，Vim 仍将创建备份文件。但是，一旦文件成功写入完成，它就会被删除。这可以作为一种安全措施，防止在写入以某种方式失败时丢失原始文件（磁盘满是最常见的原因；被雷击可能是另一个原因，尽管不太常见）。


保留原始文件

如果您正在编辑源文件，您可能希望在您进行任何更改之前保留文件。但是备份文件会在每次写入文件时被覆盖。因此它只包含前一个版本，而不是第一个版本。
   要让 Vim 保留原始文件，请设置 'patchmode' 选项。这指定了更改文件的第一个备份所使用的扩展名。通常您会这样做：>

	:set patchmode=.orig

当您现在第一次编辑文件 data.txt，进行更改并写入文件时，Vim 将保留未更改文件的副本，名为 "data.txt.orig"。
   如果您对文件进行进一步更改，Vim 会注意到 "data.txt.orig" 已经存在并且不去动它。进一步的备份文件将被称为 "data.txt~"（或者您用 'backupext' 指定的任何名称）。
   如果您将 'patchmode' 留空（这是默认值），则不会保留原始文件。

==============================================================================
*07.5*	在文件间复制文本

这解释了如何将文本从一个文件复制到另一个文件。让我们从一个简单的例子开始。编辑包含您要复制的文本的文件。将光标移动到文本的开头并按 "v"。这将启动可视模式。现在将光标移动到文本的末尾并按 "y"。这将拉取（复制）选定的文本。
   要复制上面的段落，您可以这样做：>

	:edit thisfile
	/This
	vjjjj$y

现在编辑您想要放入文本的文件。将光标移动到您希望文本出现在其后的字符处。使用 "p" 将文本放在那里。>
	:edit otherfile
	/There
	p

当然，您可以使用许多其他命令来拉取文本。例如，要选择整行，请使用 "V" 启动可视模式。或者使用 CTRL-V 选择一个矩形块。或者使用 "yy" 拉取单行，"yaw" 拉取一个单词，等等。
   "p" 命令将文本放在光标之后。使用 "P" 将文本放在光标之前。请注意，Vim 会记住您是拉取了整行还是一个块，并以相同的方式放回。


使用寄存器

当您想将多个文本片段从一个文件复制到另一个文件时，必须在文件之间切换并写入目标文件会花费大量时间。为了避免这种情况，将每个文本片段复制到它自己的寄存器中。
   寄存器是 Vim 存储文本的地方。这里我们将使用名为 a 到 z 的寄存器（稍后您会发现还有其他寄存器）。让我们将一个句子复制到 f 寄存器（f 代表 First）：>

	"fyas

"yas" 命令像以前一样拉取一个句子。"f 告诉 Vim 文本应该放在 f 寄存器中。这必须紧接在拉取命令之前。
   现在将三整行拉取到 l 寄存器（l 代表 line）：>

	"l3yy

计数也可以放在 "l 之前。要将一个文本块拉取到 b（代表 block）寄存器：>

	CTRL-Vjjww"by

请注意，寄存器指定 "b 就在 "y" 命令之前。这是必需的。如果您将其放在 "w" 命令之前，它将不起作用。
   现在您在 f、l 和 b 寄存器中有三个文本片段。编辑另一个文件，移动并将文本放在您想要的位置：>

	"fp

同样，寄存器指定 "f 在 "p" 命令之前。
   您可以按任何顺序放置寄存器。并且文本会保留在寄存器中，直到您将其他内容拉取到其中。因此您可以随意放置多次。

当您删除文本时，也可以指定一个寄存器。使用它来移动多个文本片段。例如，要删除一个单词并将其写入 w 寄存器：>

	"wdaw

同样，寄存器指定出现在删除命令 "d" 之前。


附加到文件

当将多行文本收集到一个文件中时，您可以使用此命令：>

	:write >> logfile

这将当前文件的文本写入 "logfile" 的末尾。因此它是附加的。这避免了您必须复制这些行、编辑日志文件并将它们放在那里。因此您节省了两个步骤。但您只能附加到文件的末尾。
   要仅附加几行，请在输入 ":write" 之前在可视模式下选择它们。在第 10 章中，您将学习选择一行范围的其他方法。

==============================================================================
*07.6*	查看文件

有时您只想查看文件内容，而不打算写回它。存在您不假思索地输入 ":w" 并覆盖原始文件的风险。为避免这种情况，以只读方式编辑文件。
   要以只读模式启动 Vim，请使用此命令：>

	vim -R file

在 Unix 上，此命令应执行相同的操作：>

	view file

您现在正在以只读模式编辑 "file"。当您尝试使用 ":w" 时，您将收到错误消息并且文件不会被写入。
   当您尝试更改文件时，Vim 会给您警告：

	W10: 警告: 正在更改只读文件 ~

但更改仍会进行。这允许格式化文件，例如，以便能够轻松阅读它。
   如果您对文件进行了更改并忘记它是只读的，您仍然可以写入它。在写入命令中添加 ! 以强制写入。

如果您真的想禁止在文件中进行更改，请执行以下操作：>

	vim -M file

现在每次更改文本的尝试都会失败。例如，帮助文件就是这样的。如果您尝试进行更改，您会收到此错误消息：

	E21: 无法进行更改，'modifiable' 已关闭 ~

您可以使用 -M 参数来设置 Vim 以查看器模式工作。但这只是自愿的，因为以下命令将移除保护：>

	:set modifiable
	:set write

==============================================================================
*07.7*	更改文件名

开始编辑新文件的一种巧妙方法是使用包含您所需大部分内容的现有文件。例如，您开始编写一个移动文件的新程序。您知道您已经有一个复制文件的程序，因此您从以下开始： >

	:edit copy.c

您可以删除不需要的内容。现在您需要以新名称保存文件。":saveas" 命令可用于此： >

	:saveas move.c

Vim 将以给定名称写入文件，并编辑该文件。因此，下次您执行 ":write" 时，它将写入 "move.c"。"copy.c" 保持不变。
   当您想更改正在编辑的文件名，但还不想写入文件时，可以使用此命令：>

	:file move.c

Vim 会将文件标记为 "未编辑"。这意味着 Vim 知道这不是您开始编辑的文件。当您尝试写入文件时，您可能会收到此消息：

	E13: 文件已存在 (使用 ! 强制执行) ~

这可以保护您意外覆盖另一个文件。

==============================================================================

下一章: |usr_08.txt|  分割窗口

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
