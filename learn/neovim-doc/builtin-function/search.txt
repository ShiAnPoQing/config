search({pattern} [, {flags} [, {stopline} [, {timeout} [, {skip}]]]]) *search()*
		搜索正则表达式模式 {pattern}。
		搜索从光标位置开始（您可以使用 |cursor()| 来设置它）。

		当找到匹配项时，返回其行号。
		如果没有匹配项，则返回 0 且光标不移动。不给出错误消息。
		要获取匹配的字符串，请使用 |matchbufline()|。

		{flags} 是一个字符串，可以包含以下字符标志：
		'b'	向后搜索而不是向前
		'c'	接受光标位置的匹配
		'e'	移动到匹配的末尾
		'n'	不移动光标
		'p'	返回匹配的子模式编号（见下文）
		's'	在光标先前位置设置 ' 标记
		'w'	在文件末尾环绕
		'W'	不在文件末尾环绕
		'z'	从光标列开始搜索而不是从零列开始
		如果既未给出 'w' 也未给出 'W'，则应用 'wrapscan' 选项。

		如果提供了 's' 标志，则仅当光标移动时才设置 ' 标记。's' 标志不能与 'n' 标志组合使用。

		使用 'ignorecase'、'smartcase' 和 'magic'。

		当未给出 'z' 标志时，向前搜索总是从第零列开始，然后跳过光标前的匹配。当 'cpo' 中存在 'c' 标志时，下一次搜索在匹配之后开始。没有 'c' 标志时，下一次搜索在匹配开始之后的一列开始。这对于重叠匹配很重要。参见 |cpo-c|。您也可以插入 "\ze" 来更改匹配结束的位置，参见 |/\ze|。

		当向后搜索且给定了 'z' 标志时，搜索从第零列开始，因此不会找到当前行中的匹配项（除非环绕文件末尾）。

		当给出 {stopline} 参数时，搜索在搜索完该行后停止。这对于将搜索限制在行范围内很有用。示例： >vim
			let match = search('(', 'b', line("w0"))
			let end = search('END', '', line("w$"))
<		当使用 {stopline} 且其不为零时，这也意味着搜索不会环绕文件末尾。零值等同于不给出该参数。

		当给出 {timeout} 参数时，搜索在超过这么多毫秒后停止。因此当 {timeout} 为 500 时，搜索在半秒后停止。该值不能为负。零值等同于不给出该参数。

		注意：超时仅在搜索时考虑，而在计算 {skip} 表达式时不考虑。

		如果给出 {skip} 表达式，则在光标位于匹配开始时计算它。如果它计算为非零，则跳过此匹配。这可以用于，例如，跳过注释或字符串中的匹配。
		{skip} 可以是一个字符串，它被作为表达式计算，也可以是一个函数引用或 lambda。
		当 {skip} 被省略或为空时，接受每个匹配。
		当计算 {skip} 导致错误时，搜索中止并返回 -1。
							*search()-sub-match*
		使用 'p' 标志时，返回值比 \(\) 中第一个子匹配的编号多一。如果它们都没有匹配但整个模式匹配了，则返回一。
		要同时获取列号，请使用 |searchpos()|。

		光标将定位在匹配处，除非使用 'n' 标志。

		示例（遍历参数列表中的所有文件）： >vim
		    let n = 1
		    while n <= argc()	    " 遍历参数列表中的所有文件
		      exe "argument " .. n
		      " 从文件的最后一个字符开始，并为第一次搜索环绕以在文件开头找到匹配
		      normal G$
		      let flags = "w"
		      while search("foo", flags) > 0
		        s/foo/bar/g
		        let flags = "W"
		      endwhile
		      update		    " 如果修改了则写入文件
		      let n = n + 1
		    endwhile
<
		使用某些标志的示例： >vim
		    echo search('\<if\|\(else\)\|\(endif\)', 'ncpe')
<		这将在光标下方或之后搜索关键字 "if"、"else" 和 "endif"。由于 'p' 标志，它返回 1、2 或 3，具体取决于找到哪个关键字，如果搜索失败则返回 0。当光标位于行的第一个单词上时：
		    if (foo == 0) | let foo = foo + 1 | endif ~
		函数返回 1。没有 'c' 标志时，函数找到 "endif" 并返回 3。如果光标在 "if" 的 "f" 上，没有 'e' 标志也会发生同样的情况。
		'n' 标志告诉函数不要移动光标。

                参数： ~
                  • {pattern} (`string`)
                  • {flags} (`string?`)
                  • {stopline} (`integer?`)
                  • {timeout} (`integer?`)
                  • {skip} (`string|function?`)

                返回： ~
                  (`integer`)

  vim:tw=78:ts=8:noet:ft=help:norl:
