nvim_create_user_command(name: string, command: fun|string, opts: table)
  创建一个全局 user-commands 命令。

示例：>vim
    :call nvim_create_user_command('SayHello', 'echo "Hello world!"', {'bang': v:true})
    :SayHello
    Hello world!
    <

属性：~

参数：~
  • {name} 新用户命令的名称。必须以大写字母开头。
  • {command} 执行此用户命令时要执行的替换命令。

从 Lua 调用时，该命令也可以是 Lua 函数。
该函数使用单个表参数调用，该参数包含以下键：

    • name：（字符串）命令名称
    • args：（字符串）传递给命令的参数（如果有）<args>
    • fargs：（表）由未转义的空格分隔的参数（当允许多个参数时），如果有 <f-args>
    • nargs：（字符串）参数数量 |:command-nargs|
    • bang：（布尔值）如果命令是使用执行的，则为“true”！修饰符 <bang>
    • line1：（数字）命令范围的起始行<line1>
    • line2：（数字）命令范围的最后一行<line2>
    • range：（数字）命令范围内的项目数：0、1 或 2 <range>
    • count：（数字）提供的任何计数 <count>
    • reg：（字符串）可选寄存器（如果指定）<reg>
    • mods：（字符串）命令修饰符（如果有）<mods>
    • smods：（表）结构化格式的命令修饰符。
    与 |nvim_parse_cmd()| 的“mods”键具有相同的结构。

• {opts} 可选 command-attributes。
      • 设置布尔属性，
          例如 |:command-bang| 或|:command-bar|为 true
          （但不是 |:command-buffer|，而是使用|nvim_buf_create_user_command()|）。
      • “complete” |:command-complete| 还接受 Lua 函数，
          其工作方式类似于|:command-completion-customlist|。

      • desc：string      用于在 Lua 函数用于 {command} 时列出命令。
      • force：boolean，  默认为 true覆盖任何先前的定义。
      • preview：fun      “inccommand”的预览回调|:command-preview|





nvim_del_user_command({name})                        *nvim_del_user_command()*
    Delete a user-defined command.

    Attributes: ~
        Since: 0.7.0

    Parameters: ~
      • {name}  Name of the command to delete.

nvim_get_commands({opts})                                *nvim_get_commands()*
    Gets a map of global (non-buffer-local) Ex commands.

    Currently only |user-commands| are supported, not builtin Ex commands.

    Attributes: ~
        Since: 0.3.0

    Parameters: ~
      • {opts}  Optional parameters. Currently only supports {"builtin":false}

    Return: ~
        Map of maps describing commands.

    See also: ~
      • |nvim_get_all_options_info()|

nvim_parse_cmd({str}, {opts})                               *nvim_parse_cmd()*
    Parse command line.

    Doesn't check the validity of command arguments.

    Attributes: ~
        |api-fast|
        Since: 0.8.0

    Parameters: ~
      • {str}   Command line string to parse. Cannot contain "\n".
      • {opts}  Optional parameters. Reserved for future use.

    Return: ~
        Dict containing command information, with these keys:
        • cmd: (string) Command name.
        • range: (array) (optional) Command range (<line1> <line2>). Omitted
          if command doesn't accept a range. Otherwise, has no elements if no
          range was specified, one element if only a single range item was
          specified, or two elements if both range items were specified.
        • count: (number) (optional) Command <count>. Omitted if command
          cannot take a count.
        • reg: (string) (optional) Command <register>. Omitted if command
          cannot take a register.
        • bang: (boolean) Whether command contains a <bang> (!) modifier.
        • args: (array) Command arguments.
        • addr: (string) Value of |:command-addr|. Uses short name or "line"
          for -addr=lines.
        • nargs: (string) Value of |:command-nargs|.
        • nextcmd: (string) Next command if there are multiple commands
          separated by a |:bar|. Empty if there isn't a next command.
        • magic: (dict) Which characters have special meaning in the command
          arguments.
          • file: (boolean) The command expands filenames. Which means
            characters such as "%", "#" and wildcards are expanded.
          • bar: (boolean) The "|" character is treated as a command separator
            and the double quote character (") is treated as the start of a
            comment.
        • mods: (dict) |:command-modifiers|.
          • filter: (dict) |:filter|.
            • pattern: (string) Filter pattern. Empty string if there is no
              filter.
            • force: (boolean) Whether filter is inverted or not.
          • silent: (boolean) |:silent|.
          • emsg_silent: (boolean) |:silent!|.
          • unsilent: (boolean) |:unsilent|.
          • sandbox: (boolean) |:sandbox|.
          • noautocmd: (boolean) |:noautocmd|.
          • browse: (boolean) |:browse|.
          • confirm: (boolean) |:confirm|.
          • hide: (boolean) |:hide|.
          • horizontal: (boolean) |:horizontal|.
          • keepalt: (boolean) |:keepalt|.
          • keepjumps: (boolean) |:keepjumps|.
          • keepmarks: (boolean) |:keepmarks|.
          • keeppatterns: (boolean) |:keeppatterns|.
          • lockmarks: (boolean) |:lockmarks|.
          • noswapfile: (boolean) |:noswapfile|.
          • tab: (integer) |:tab|. -1 when omitted.
          • verbose: (integer) |:verbose|. -1 when omitted.
          • vertical: (boolean) |:vertical|.
          • split: (string) Split modifier string, is an empty string when
            there's no split modifier. If there is a split modifier it can be
            one of:
            • "aboveleft": |:aboveleft|.
            • "belowright": |:belowright|.
            • "topleft": |:topleft|.
            • "botright": |:botright|.

