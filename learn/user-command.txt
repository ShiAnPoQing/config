nvim_create_user_command(name: string, command: fun|string, opts: table): void

  创建一个全局 user-commands 命令


name    string                                      
              必须大写开头
command string|(param: CommandFuncParam) => void
              Vim 命令或 lua 函数
opts    table: Opts

CommandFuncParam: 
  name: string 
                命令名称
  args: string 
                传递给命令的参数（如果有）<args>
  fargs: table 
                由未转义的空格分隔的参数（当允许多个参数时），如果有 <f-args>
  nargs: string 
                参数数量 |:command-nargs|
  bang: boolean 
                如果命令是使用执行的，则为“true”！修饰符 <bang>
  line1: number 
                命令范围的起始行<line1>
  line2: number 
                命令范围的最后一行<line2>
  range: number 
                命令范围内的项目数：0、1 或 2 <range>
                0	用户 没有提供任何范围或计数（命令无范围或仅作为普通命令调用）。	:MyCommand
                1	用户提供了 单个行号或计数（如 :NMyCommand 或 :MyCommand N）。	:10MyCommand
                2	用户提供了 明确的行范围（如 :start,endMyCommand）。	:5,15MyCommand
  count: number 
                提供的任何计数 <count>
  reg: string
                可选寄存器（如果指定）<reg>
  mods: string
                命令修饰符（如果有）<mods>
  smods: table
                结构化格式的命令修饰符。

Opts:
  desc：string      
          用于在 Lua 函数用于 {command} 时列出命令。
  force：boolean
          默认为 true覆盖任何先前的定义。
  preview：fun(opts, ns, buf)
          “ns”是突出显示的预览命名空间 ID，
          “buf”是预览例程将直接修改以显示预览结果的缓冲区（对于“inccommand=split”，或对于“inccommand=nosplit”为 nil）
          “inccommand”的预览回调|:command-preview|
  complete: fun(ArgLead, CmdLine, CursorPos) |
            "arglist"       参数列表中的文件名
            "augroup"       自动命令组
            "breakpoint"    |:breakadd| 子选项
            "buffer"        缓冲区名称
            "color"         颜色方案
            "command"       Ex 命令（和参数）
            "compiler"      编译器
            "diff_buffer"   差异缓冲区名称
            "dir            目录名称
            "dir_in_path    |'cdpath'| 中的目录名称
            "environment    环境变量名称
            "event          自动命令事件
            "expression     Vim 表达式
            "file           文件和目录名称
            "file_in_path   |'path'| 中的文件和目录名称
            "filetype       文件类型名称 |'filetype'|
            "function       函数名称
            "help           帮助主题
            "highlight      高亮组
            "history        |:history|子选项
            "keymap         键盘映射
            "locale         语言环境名称（作为 locale -a 的输出）
            "lua Lua        表达式 |:lua|
            "mapclear       缓冲区参数
            "mapping        映射名称
            "menu           菜单
            "messages       |:messages| 子选项
            "option         选项
            "packadd        可选包 |pack-add| 名称
            "runtime"       文件和目录名称（位于 |'runtimepath'|）
            "scriptnames    源脚本名称
            "shellcmd       Shell 命令
            "shellcmdline   第一个是 shell 命令，后续的是文件名。与 |:!cmd| 的行为相同
            "sign           |:sign| 子选项
            "syntax         语法文件名 |'syntax'|
            "syntime        |:syntime|子选项
            "tag            标签
            "tag_listfiles  标签，按 CTRL-D 键时显示文件名
            "user           用户名
            "var            用户变量

          ArgLead     当前正在完成的参数的前导部分
          CmdLine     整个命令行
          CursorPos   光标在其中的位置（字节索引）

  nargs: number| "*" | "?" | "+"
          命令参数数量
          nargs=0 不允许使用任何参数（默认）
          nargs=1 只需要一个参数，包括空格
          nargs=* 允许使用任意数量的参数（0、1 或多个），以空格分隔
          nargs=? 允许使用 0 或 1 个参数
          nargs=+ 必须提供参数，但允许使用任意数量的参数
          在这种情况下，参数被视为由（未转义的）空格或制表符分隔，除非有一个参数，那么空格是参数的一部分。

  range: boolean | number | "%"
          range=true      允许范围
          range=false     不允许范围
          range=number    指定计数count
          range="%"       默认整个文件 (1,$)


示例：
:call nvim_create_user_command('SayHello', 'echo "Hello world!"', {'bang': v:true})
:SayHello

vim.api.nvim_create_user_command('Upper',
  function(opts)
    print(string.upper(opts.fargs[1]))
  end,
  {
    nargs = 1,
    complete = function(ArgLead, CmdLine, CursorPos)
      return { "foo", "bar", "baz" }
    end,
})
vim.cmd.Upper('foo')
--> FOO










nvim_del_user_command(name: string)
  删除用户定义的命令

nvim_get_commands({opts})
    获取全局（非缓冲区本地）Ex 命令的映射

当前仅支持 |user-commands|，不支持内置 Ex 命令。

参数：~
    • {opts} 可选参数。
    当前仅支持 {"builtin":false}

返回：~
    描述命令的映射的映射。

另请参阅：~
• |nvim_get_all_options_info()|


nvim_parse_cmd({str}, {opts})
    解析命令行

不检查命令参数的有效性。


参数：~
   {str} 要解析的命令行字符串。不能包含“\n”。
   {opts} 可选参数。保留以备将来使用。

返回：~
包含命令信息的字典，具有以下键：
• cmd：（字符串）命令名称。
• range：（数组）（可选）命令范围（<line1> <line2>）。如果命令不接受范围，则省略。否则，如果未指定范围，则没有元素；如果仅指定了一个范围项，则有一个元素；如果指定了两个范围项，则有两个元素。
• count：（数字）（可选）命令 <count>。如果命令不能进行计数，则省略。
• reg：（字符串）（可选）命令 <register>。如果命令不能使用寄存器，则省略。
• bang：（布尔值）命令是否包含 <bang> (!) 修饰符。
• args：（数组）命令参数。
• addr：（字符串）|:command-addr| 的值。对于 -addr=lines，使用短名称或“line”。
• nargs：（字符串）|:command-nargs| 的值。
• nextcmd：（字符串）如果有多个命令，则为下一个命令，这些命令由 |:bar| 分隔。如果没有下一个命令，则为空。
• magic：（字典）命令参数中哪些字符具有特殊含义。
• file：（布尔值）该命令扩展文件名。这意味着扩展了诸如“%”、“#”和通配符之类的字符。
• bar：（布尔值）“|”字符被视为命令分隔符
，双引号字符 (") 被视为注释的开头。
• mods：（字典）|:command-modifiers|。
• filter：（字典）|:filter|。
• pattern：（字符串）过滤器模式。如果没有过滤器，则为空字符串。
• force：（布尔值）过滤器是否反转。
• silent：（布尔值）|:silent|。
• emsg_silent：（布尔值）|:silent!|。
• unsilent：（布尔值）|:unsilent|。
• sandbox：（布尔值）|:sandbox|。
• noautocmd：（布尔值）|:noautocmd|。
• browser：（布尔值）|:browse|。
• confirmed：（布尔值）|:confirm|。
• hide：（布尔值）|:hide|。
• Horizontal：（布尔值）|:horizontal|。
• keepalt： (布尔值) |:keepalt|。
• keepjumps: (布尔值) |:keepjumps|。
• keepmarks: (布尔值) |:keepmarks|。
• keeppatterns: (布尔值) |:keeppatterns|。
• lockmarks: (布尔值) |:lockmarks|。
• noswapfile: (布尔值) |:noswapfile|。
• tab: (整数) |:tab|。省略时为 -1。
• verbose: (整数) |:verbose|。省略时为 -1。
• vertical: (布尔值) |:vertical|。
• split: (字符串) 拆分修饰符字符串，当没有拆分修饰符时为空字符串。如果有拆分修饰符，则可以是以下之一：
• “aboveleft”：|:aboveleft|。
• “belowright”：|:belowright|。
• “topleft”：|:左上|。
• “botright”：|:右下|。



