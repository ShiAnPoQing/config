==============================================================================
Lua module: vim.lsp.semantic_tokens                      *lsp-semantic_tokens*

force_refresh({bufnr})               *vim.lsp.semantic_tokens.force_refresh()*
    强制刷新所有语义标记

    只有在缓冲区当前处于语义标记高亮状态时才会生效（已为它调用过 |vim.lsp.semantic_tokens.start()|）

    参数: ~
      • {bufnr}  (`integer?`) 按缓冲区过滤。如果为 nil 则针对所有缓冲区，当前
                缓冲区如果为 0

                                        *vim.lsp.semantic_tokens.get_at_pos()*
get_at_pos({bufnr}, {row}, {col})
    返回给定位置的语义标记。如果不带参数调用，则返回光标下的标记。

    参数: ~
      • {bufnr}  (`integer?`) 缓冲区编号（默认为当前缓冲区，0）
      • {row}    (`integer?`) 位置行（默认为光标位置）
      • {col}    (`integer?`) 位置列（默认为光标位置）

    返回值: ~
        (`table?`) 位置处的标记列表。每个标记具有以下字段：
        • line (integer) 行号，从 0 开始
        • start_col (integer) 起始列，从 0 开始
        • end_col (integer) 结束列，从 0 开始
        • type (string) 标记类型字符串，例如 "variable"
        • modifiers (table) 标记修饰符集合。例如，{ static = true,
          readonly = true }
        • client_id (integer)

                                   *vim.lsp.semantic_tokens.highlight_token()*
highlight_token({token}, {bufnr}, {client_id}, {hl_group}, {opts})
    高亮显示语义标记。

    为语义标记应用带有给定高亮组的 extmark。当适当的时候，标记将被语义标记引擎删除；例如，当 LSP 发送更新的标记时。此函数旨在用于 |LspTokenUpdate| 回调中。

    参数: ~
      • {token}      (`table`) 语义标记，在 |LspTokenUpdate| 中作为 `args.data.token` 找到
      • {bufnr}      (`integer`) 要高亮的缓冲区，或 `0` 表示当前缓冲区
      • {client_id}  (`integer`) |vim.lsp.Client| 的 ID
      • {hl_group}   (`string`) 高亮组名称
      • {opts}       (`table?`) 可选参数：
                     • {priority}? (`integer`, 默认:
                       `vim.hl.priorities.semantic_tokens + 3`) 应用的 extmark 的优先级。

start({bufnr}, {client_id}, {opts})          *vim.lsp.semantic_tokens.start()*
    为给定缓冲区和客户端启动语义标记高亮引擎。客户端必须已经附加到缓冲区。

    注意：这目前由 |vim.lsp.buf_attach_client()| 自动调用。要选择退出支持它的服务器的语义高亮，您可以在 |LspAttach| 回调或配置的 `on_attach` 回调中从客户端的 {server_capabilities} 中删除 semanticTokensProvider 表：>lua
        client.server_capabilities.semanticTokensProvider = nil
<

    参数: ~
      • {bufnr}      (`integer`) 缓冲区编号，或 `0` 表示当前缓冲区
      • {client_id}  (`integer`) |vim.lsp.Client| 的 ID
      • {opts}       (`table?`) 可选关键字参数
                     • debounce (integer, 默认: 200): 以毫秒为单位对服务器的标记请求进行防抖

stop({bufnr}, {client_id})                    *vim.lsp.semantic_tokens.stop()*
    为给定缓冲区和客户端停止语义标记高亮引擎。

    注意：这由作为 `start()` 的一部分设置的 |LspDetach| 自动命令自动调用，因此您应该只需要此函数来手动解除语义标记引擎而不完全从缓冲区分离 LSP 客户端。

    参数: ~
      • {bufnr}      (`integer`) 缓冲区编号，或 `0` 表示当前缓冲区
      • {client_id}  (`integer`) |vim.lsp.Client| 的 ID

 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
