Marks					*mark-motions* *E20* *E78*

跳转到标记可以通过两种方式完成：
1. 使用 `（反引号）：	  光标被定位到指定位置
			  并且该移动是 |exclusive|（排他性）的。
2. 使用 '（单引号）： 光标被定位到指定位置所在行的第一个非空白字符
			  并且该移动是行方式的。

						*mark-view*
3. 除上述之外，如果 'jumpoptions' 包含 "view"，它们还会尝试恢复标记视图。
这是设置标记时光标位置与窗口顶行（窗口中显示的第一个缓冲区行）之间的行数。

						*m* *mark* *Mark*
m{a-zA-Z}		在光标位置设置标记 {a-zA-Z}（不移动
			光标，这不是一个移动命令）。

						*m'* *m`*
m'  或  m`		设置上一个上下文标记。
                        可以用 "''" 或 "``" 命令跳转到

						*m[* *m]*
m[  或  m]		设置 |'[| 或 |']| 标记。
                        用于当一个操作符需要通过多个命令模拟时。（不移动光标，这不是一个移动命令）。

						*m<* *m>*
m<  或  m>		设置 |'<| 或 |'>| 标记。用于更改
			`gv` 命令选择的内容。（不移动光标，这不是一个移动命令）。
			注意无法设置可视模式，只能设置起始和结束位置。

						*:ma* *:mark* *E191*
:[range]ma[rk] {a-zA-Z'}
			在 [range] 的最后一行，列 0 处设置标记 {a-zA-Z'}。
			默认是光标所在行。

						*:k*
:[range]k{a-zA-Z'}	与 :mark 相同，但可以省略标记名之前的空格。

						*'* *'a* *`* *`a*
'{a-z}  `{a-z}		跳转到当前缓冲区中的标记 {a-z}。

						*'A* *'0* *`A* *`0*
'{A-Z0-9}  `{A-Z0-9}	跳转到设置该标记的文件中的标记 {A-Z0-9}（如果在其他文件中则不是移动命令）。

						*g'* *g'a* *g`* *g`a*
g'{mark}  g`{mark}
			跳转到 {mark}，但在当前缓冲区内跳转时不更改跳转列表。
			例如：>
				g`"
<			跳转到文件中的最后已知位置。
			另见 |:keepjumps|。

						*:marks*
:marks			列出所有当前标记（不是移动命令）。
			|'( |、|')|、|'{| 和 |'}| 标记不会被列出。
			第一列编号为零。
						*E283*
:marks {arg}		列出 {arg} 中提到的标记（不是移动命令）。
			例如：>
				:marks aB
<			列出标记 'a' 和 'B'。

							*:delm* *:delmarks*
:delm[arks] {marks}	删除指定的标记。可以删除的标记包括 A-Z 和 0-9。不能删除 ' 标记。
			可以通过给出标记名列表或用范围（用短横线分隔）来指定。
                        空格会被忽略。
                        例如：>
			   :delmarks a	      删除标记 a
			   :delmarks a b 1    删除标记 a、b 和 1
			   :delmarks Aa       删除标记 A 和 a
			   :delmarks p-z      删除 p 到 z 范围内的标记
			   :delmarks ^.[]     删除标记 ^ . [ ]
			   :delmarks \"	      删除标记 "
<

:delm[arks]!		删除当前缓冲区的所有标记，但不包括标记 A-Z 或 0-9。
                        也会清除 |changelist|。

标记是不可见的。
它只是文件中被记住的位置。
不要将标记与命名寄存器混淆，它们完全无关。

'a - 'z		小写标记，仅在一个文件内有效
'A - 'Z		大写标记，也称为文件标记，在文件之间有效
'0 - '9		编号标记，从 |shada| 文件中设置

小写标记 'a 到 'z 只要文件还在缓冲区列表中就会被记住。
如果你将文件从缓冲区列表中移除，所有标记都会丢失。
如果你删除了包含标记的行，该标记会被删除。

小写标记可以与操作符结合使用。
例如："d't"
删除从光标位置到标记 't' 的行。
提示：用标记 't' 表示顶部，'b' 表示底部，等等。
小写标记在使用撤销和重做时会被恢复。

大写标记 'A 到 'Z 包含文件名。你可以用它们在文件之间跳转。
只有当标记在当前文件中时，才能将大写标记与操作符一起使用。
即使你插入/删除行或暂时编辑了另一个文件，标记的行号也会保持正确。
当 'shada' 选项非空时，大写标记会保存在 .shada 文件中。见 |shada-file-marks|。

编号标记 '0 到 '9 完全不同。它们不能被直接设置。
它们只在使用 shada 文件 |shada-file| 时存在。
基本上 '0 是你上次退出 Vim 时光标的位置，'1 是倒数第二次的位置，依此类推。用 'shada' 的 "r" 标志可以指定不存储编号标记的文件。见 |shada-file-marks|。


							*'[* *`[*
'[  `[			跳转到上次更改或复制文本的第一个字符。

							*']* *`]*
']  `]			跳转到上次更改或复制文本的最后一个字符。

执行操作符后，光标会被放在被操作文本的开头。
执行粘贴命令（"p" 或 "P"）后，光标有时会放在第一个插入的行，有时会放在最后一个插入的字符上。
上述四个命令会将光标放在任一端。
例如：
复制 10 行后你想跳到最后一行："10Y']"。
用 "p" 命令插入多行后你想跳到最下面插入的行："p']"。这也适用于插入的文本。

注意：删除文本后，起始和结束位置是相同的，除非使用块可视模式。
如果当前文件还没有更改，这些命令不起作用。

							*'<* *`<*
'<  `<			跳转到当前缓冲区中上次选择的可视区域的第一行或字符。
                        对于块模式，也可能是第一行的最后一个字符（以便能够定义块）。

							*'>* *`>*
'>  `>			跳转到当前缓冲区中上次选择的可视区域的最后一行或字符。
                        对于块模式，也可能是最后一行的第一个字符（以便能够定义块）。
                        注意 'selection' 选项适用，位置可能正好在可视区域之后。

							*''* *``*
''  ``			跳转到最近一次跳转前的位置，或上次执行 "m'" 或 "m`" 命令的位置。当使用 |:keepjumps| 命令修饰符时不会设置。
			另见 |restore-position|。

							*'quote* *`quote*
'"  `"			跳转到上次退出当前缓冲区时的光标位置。默认为第一行的第一个字符。见 |last-position-jump| 了解如何为每个打开的文件使用此功能。
			每个缓冲区只记住一个位置，而不是每个窗口。只要缓冲区在窗口中可见，位置就不会改变。运行 |:wshada| 时也会重置标记。

							*'^* *`^*
'^  `^			跳转到上次退出插入模式时光标所在的位置。
                        由 |gi| 命令使用。当使用 |:keepjumps| 命令修饰符时不会设置。

							*'.* *`.*
'.  `.			跳转到上次更改的位置。该位置在更改开始处或附近。
			有时一个命令会被执行为多个更改，
			那么位置可能在命令更改内容的末尾附近。例如插入一个单词时，
			位置会在最后一个字符上。
			要跳转到更早的更改，使用 |g;|。

							*'(* *`(*
'(  `(			跳转到当前句子的开头，类似于 |(| 命令。

							*')* *`)*
')  `)			跳转到当前句子的结尾，类似于 |)| 命令。

							*'{* *`{*
'{  `{			跳转到当前段落的开头，类似于 |{| 命令。

							*'}* *`}*
'}  `}			跳转到当前段落的结尾，类似于 |}| 命令。

这些命令本身不是标记，但会跳转到标记：

							*]'*
]'			[count] 次跳转到光标下方带有小写标记的下一行，
                        跳到该行的第一个非空白字符。

							*]`*
]`			[count] 次跳转到光标后的小写标记。

							*['*
['			[count] 次跳转到光标上方带有小写标记的前一行，跳到该行的第一个非空白字符。

							*[`*
[`			[count] 次跳转到光标前的小写标记。


:loc[kmarks] {command}				*:loc* *:lock* *:lockmarks*
			执行 {command} 时不调整标记。当以某种方式更改文本且更改完成后行数保持不变时，这很有用。
			警告：当行数发生变化时，更改下方的标记会保持其行号，因此会移动到另一行文本。
			以下项目不会因删除/插入行而调整：
			- 小写字母标记 'a - 'z
			- 大写字母标记 'A - 'Z
			- 编号标记 '0 - '9
			- 上次插入位置 '^
			- 上次更改位置 '.
			- 上次影响的文本区域 '[ 和 ']
			- 可视区域 '< 和 '>
			- 已放置标志的行号
			- quickfix 位置的行号
			- |jumplist| 中的位置
			- |tagstack| 中的位置
			以下项目仍会被调整：
			- 上一个上下文标记 ''
			- 光标位置
			- 窗口在缓冲区上的视图
			- 折叠
			- diff

:kee[pmarks] {command}				*:kee* *:keep* *:keepmarks*
			目前只对过滤命令 |:range!| 有效：
			- 过滤后行数等于或大于之前时，所有标记都保留在相同行号。
			- 行数减少时，消失行中的标记会被删除。
			无论哪种情况，过滤文本下方的标记都会调整其行号，因此会像往常一样跟随文本。
			当 'cpoptions' 缺少 'R' 标志时，这与使用 ":keepmarks" 效果相同。

							*:keepj* *:keepjumps*
:keepj[umps] {command}
			在 {command} 中移动不会更改 |''|、|'.| 和 |'^| 标记、|jumplist| 或 |changelist|。
			当自动更改或插入文本且用户不希望跳转到该位置时很有用。例如，在第一行更新 "Last change" 时间戳时：>

				:let lnum = line(".")
				:keepjumps normal gg
				:call SetLastChange()
				:keepjumps exe "normal " .. lnum .. "G"
<
			注意，":keepjumps" 必须用于每个命令。
			当调用函数时，该函数中的命令仍可能更改跳转列表。此外，对于
			`:keepjumps exe 'command '`，"command" 不会保持跳转。应改用：`:exe 'keepjumps command'`

vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
