==============================================================================
Lua 模块：vim.treesitter                               *lua-treesitter-core*

foldexpr({lnum})                                   *vim.treesitter.foldexpr()*
    返回当前缓冲区中 {lnum} 的折叠级别。可以直接设置
    到 'foldexpr'： >lua
        vim.wo.foldexpr = 'v:lua.vim.treesitter.foldexpr()'
<

    属性： ~
        自：0.9.0

    参数： ~
      • {lnum}  (`integer?`) 要计算折叠级别的行号

    返回： ~
        (`string`)

                                     *vim.treesitter.get_captures_at_cursor()*
get_captures_at_cursor({winnr})
    返回光标下的高亮捕获名称列表

    参数： ~
      • {winnr}  (`integer?`) |window-ID| 或 0 表示当前窗口（默认）

    返回： ~
        (`string[]`) 捕获名称列表

                                        *vim.treesitter.get_captures_at_pos()*
get_captures_at_pos({bufnr}, {row}, {col})
    返回给定位置的高亮捕获列表

    每个捕获由一个表表示，该表包含捕获名称作为字符串、
    捕获的语言、元数据表（`priority`、`conceal` 等；
    如果没有定义则为空）和捕获的 id。

    参数： ~
      • {bufnr}  (`integer`) 缓冲区号（0 表示当前缓冲区）
      • {row}    (`integer`) 位置行
      • {col}    (`integer`) 位置列

    返回： ~
        (`{capture: string, lang: string, metadata: vim.treesitter.query.TSMetadata, id: integer}[]`)

get_node({opts})                                   *vim.treesitter.get_node()*
    返回给定位置的最小命名节点

    注意：在未解析的树上调用这可能产生无效节点。如果
    树不知道是否被解析，例如，通过活动的高亮器，首先
    通过 >lua
        vim.treesitter.get_parser(bufnr):parse(range)
< 解析树

    参数： ~
      • {opts}  (`table?`) 可选关键字参数：
                • {bufnr} (`integer?`) 缓冲区号（nil 或 0 表示当前
                  缓冲区）
                • {pos} (`[integer, integer]?`) 0 索引的（行、列）元组。
                  默认为当前窗口中的光标位置。如果 {bufnr} 不是
                  当前缓冲区，则需要
                • {lang} (`string?`) 解析器语言。（默认：从缓冲区
                  文件类型）
                • {ignore_injections} (`boolean?`) 忽略注入的语言
                  （默认 true）
                • {include_anonymous} (`boolean?`) 包括匿名节点
                  （默认 false）

    返回： ~
        (`TSNode?`) 给定位置的节点

get_node_range({node_or_range})              *vim.treesitter.get_node_range()*
    返回节点的范围或解包的范围表

    参数： ~
      • {node_or_range}  (`TSNode|Range4`) 节点或位置表

    返回（多个）： ~
        (`integer`) start_row
        (`integer`) start_col
        (`integer`) end_row
        (`integer`) end_col

                                              *vim.treesitter.get_node_text()*
get_node_text({node}, {source}, {opts})
    获取给定节点对应的文本

    参数： ~
      • {node}    (`TSNode`)
      • {source}  (`integer|string`) 从中提取 {node} 的缓冲区或字符串
      • {opts}    (`table?`) 可选参数。
                  • metadata (table) 特定捕获的元数据。这
                    在使用 |vim.treesitter.query.add_directive()| 时
                    将设置为 `metadata[capture_id]`。

    返回： ~
        (`string`)

get_parser({bufnr}, {lang}, {opts})              *vim.treesitter.get_parser()*
    返回特定缓冲区的解析器并将其附加到缓冲区

    如果需要，这将创建解析器。

    如果无法创建解析器，将抛出错误。设置 `opts.error = false`
    来抑制此错误并返回 nil（和错误消息）。警告：
    此行为将在 Nvim 0.12 中成为默认行为，并且该选项将
    被删除。

    参数： ~
      • {bufnr}  (`integer?`) 解析器应该绑定到的缓冲区（默认：
                当前缓冲区）
      • {lang}   (`string?`) 此解析器的语言（默认：从缓冲区
                文件类型）
      • {opts}   (`table?`) 传递给创建的语言树的选项

    返回（多个）： ~
        (`vim.treesitter.LanguageTree?`) 用于解析的对象
        (`string?`) 错误消息（如果适用）

get_range({node}, {source}, {metadata})           *vim.treesitter.get_range()*
    获取 |TSNode| 的范围。也可以提供 {source} 和 {metadata} 来
    获取应用了指令的范围。

    参数： ~
      • {node}      (`TSNode`)
      • {source}    (`integer|string?`) 从中提取 {node} 的缓冲区或字符串
      • {metadata}  (`vim.treesitter.query.TSMetadata?`)

    返回： ~
        (`table`) 具有以下字段的表：
        • {[1]} (`integer`) 开始行
        • {[2]} (`integer`) 开始列
        • {[3]} (`integer`) 开始字节
        • {[4]} (`integer`) 结束行
        • {[5]} (`integer`) 结束列
        • {[6]} (`integer`) 结束字节

                                          *vim.treesitter.get_string_parser()*
get_string_parser({str}, {lang}, {opts})
    返回字符串解析器

    参数： ~
      • {str}   (`string`) 要解析的文本
      • {lang}  (`string`) 此字符串的语言
      • {opts}  (`table?`) 传递给创建的语言树的选项

    返回： ~
        (`vim.treesitter.LanguageTree`) 用于解析的对象

inspect_tree({opts})                           *vim.treesitter.inspect_tree()*
    打开一个窗口，显示语言树中节点的文本表示。

    在窗口中，按 "a" 切换匿名节点的显示，"I" 切换
    每个节点的源语言显示，"o" 切换查询编辑器，按
    <Enter> 跳转到源缓冲区中光标下的节点。折叠也
    有效（试试 |zo|、|zc| 等）。

    也可以用 `:InspectTree` 显示。                      *:InspectTree*

    属性： ~
        自：0.9.0

    参数： ~
      • {opts}  (`table?`) 可选选项表，具有以下可能的
               键：
               • lang (string|nil)：源缓冲区的语言。如果
                 省略，从源缓冲区的文件类型检测。
               • bufnr (integer|nil)：要绘制树的缓冲区。如果
                 省略，创建新缓冲区。
               • winid (integer|nil)：显示树缓冲区的窗口 id。
                 如果省略，用 {command} 创建新窗口。
               • command (string|nil)：创建窗口的 Vimscript
                 命令。默认值为 "60vnew"。仅在 {winid} 为
                 nil 时使用。
               • title (string|fun(bufnr:integer):string|nil)：
                 窗口的标题。如果是函数，它接受源缓冲区的
                 缓冲区号作为其唯一参数，并应返回一个字符串。

is_ancestor({dest}, {source})                   *vim.treesitter.is_ancestor()*
    确定一个节点是否是另一个节点的祖先

    参数： ~
      • {dest}    (`TSNode`) 可能的祖先
      • {source}  (`TSNode`) 可能的后代

    返回： ~
        (`boolean`) 如果 {dest} 是 {source} 的祖先则为 true

                                           *vim.treesitter.is_in_node_range()*
is_in_node_range({node}, {line}, {col})
    确定（行、列）位置是否在节点范围内

    参数： ~
      • {node}  (`TSNode`) 定义范围
      • {line}  (`integer`) 行（从零开始）
      • {col}   (`integer`) 列（从零开始）

    返回： ~
        (`boolean`) 如果位置在节点范围内则为 true

node_contains({node}, {range})                *vim.treesitter.node_contains()*
    确定节点是否包含范围

    参数： ~
      • {node}   (`TSNode`)
      • {range}  (`table`)

    返回： ~
        (`boolean`) 如果 {node} 包含 {range} 则为 true

start({bufnr}, {lang})                                *vim.treesitter.start()*
    开始缓冲区的 treesitter 高亮

    可以在 ftplugin 或 FileType 自动命令中使用。

    注意：默认情况下，禁用正则表达式语法高亮，这可能
    是某些插件所需的。在这种情况下，在调用 `start` 后
    添加 `vim.bo.syntax = 'on'`。

    注意：默认情况下，高亮器异步解析代码，使用 3ms 的
    段时。

    示例： >lua
        vim.api.nvim_create_autocmd( 'FileType', { pattern = 'tex',
            callback = function(args)
                vim.treesitter.start(args.buf, 'latex')
                vim.bo[args.buf].syntax = 'on'  -- 仅在需要额外旧语法时
            end
        })
<

    参数： ~
      • {bufnr}  (`integer?`) 要高亮的缓冲区（默认：当前
                缓冲区）
      • {lang}   (`string?`) 解析器的语言（默认：从缓冲区
                文件类型）

stop({bufnr})                                          *vim.treesitter.stop()*
    停止缓冲区的 treesitter 高亮

    参数： ~
      • {bufnr}  (`integer?`) 要停止高亮的缓冲区（默认：当前
                缓冲区）

 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
