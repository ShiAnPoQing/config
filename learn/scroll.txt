Scrolling						*scrolling*

这些命令移动窗口的内容。如果光标位置被移出窗口，光标会被移到窗口内（窗口上下会有 'scrolloff' 屏幕行数）。一页是窗口中的行数减去二。 这些命令的助记符可能有点令人困惑。请记住，这些命令指的是在缓冲区中移动窗口（你所看到的缓冲区部分）向上或向下。当窗口在缓冲区中向上移动时，窗口中的文本会在屏幕上向下移动。

参见用户手册的 |03.7| 节以获得介绍。

                                      输入 |gO| 查看目录。

==============================================================================
1. 向下滚动					*scroll-down*

以下命令将编辑窗口（你所看到的缓冲区部分）向下移动（这意味着可以看到缓冲区中更靠下的行）：

							*CTRL-E*
CTRL-E			将窗口在缓冲区中向下滚动 [count] 行。
			文本在屏幕上向上移动。
			助记符：额外行。

							*CTRL-D*
CTRL-D			将窗口在缓冲区中向下滚动。行数取自 'scroll' 选项（默认：半屏）。如果给定 [count]，则首先将 'scroll' 选项设为 [count]。光标在文件中也向下移动相同的行数（如果可能；当行换行以及到达文件末尾时可能会有差异）。当光标在缓冲区的最后一行时不会发生任何操作，并会发出蜂鸣声。另见 'startofline' 选项。

<S-Down>	或				*<S-Down>* *<kPageDown>*
<PageDown>	或				*<PageDown>* *CTRL-F*
<S-CR>	或					*<S-CR>* *<S-NL>*
<S-+>	或					*SHIFT-+* *<S-Plus>*
CTRL-F			将窗口在缓冲区中向前（向下）滚动 [count] 页。另见 'startofline' 选项。当只有一个窗口时，可能会使用 'window' 选项。

							*z+*
z+			无 [count] 时：重绘，将窗口下方的那一行放到窗口顶部。将光标放在该行的第一个非空白字符上。
			有 [count] 时：与 "z<CR>" 相同。

==============================================================================
2. 向上滚动					*scroll-up*

以下命令将编辑窗口（你所看到的缓冲区部分）向上移动（这意味着可以看到缓冲区中更靠上的行）：

							*CTRL-Y*
CTRL-Y			将窗口在缓冲区中向上滚动 [count] 行。
			文本在屏幕上向下移动。
			注意：在使用 MS-Windows 键绑定时，CTRL-Y 被重新映射为重做。

							*CTRL-U*
CTRL-U			将窗口在缓冲区中向上滚动。行数取自 'scroll' 选项（默认：半屏）。如果给定 [count]，则首先将 'scroll' 选项设为 [count]。光标在文件中也向上移动相同的行数（如果可能；当行换行以及到达文件开头时可能会有差异）。当光标在缓冲区的第一行时不会发生任何操作，并会发出蜂鸣声。另见 'startofline' 选项。

<S-Up>		或					*<S-Up>* *<kPageUp>*
<PageUp>	或					*<PageUp>* *CTRL-B*
<S-->		或				*<S-Minus>* *SHIFT-MINUS*
CTRL-B			将窗口在缓冲区中向后（向上）滚动 [count] 页。另见 'startofline' 选项。当只有一个窗口时，可能会使用 'window' 选项。

							*z^*
z^			无 [count] 时：重绘，将窗口上方的那一行放到窗口底部。将光标放在该行的第一个非空白字符上。
			有 [count] 时：首先滚动文本，将 [count] 行放到窗口底部，然后重绘，将现在在窗口顶部的那一行放到窗口底部。将光标放在该行的第一个非空白字符上。

==============================================================================
3. 相对于光标滚动				*scroll-cursor*

以下命令在保持光标在同一行的情况下重新定位编辑窗口（你所看到的缓冲区部分）。注意，'scrolloff' 选项可能会导致光标上下显示上下文行。

							*z<CR>*
z<CR>			重绘，将第 [count] 行放到窗口顶部（默认为光标行）。将光标放在该行的第一个非空白字符上。

							*zt*
zt			类似于 "z<CR>"，但光标保持在同一列。

							*zN<CR>*
z{height}<CR>		重绘，使窗口高度为 {height} 行。当屏幕刷新很慢时，这对于将行数设得很少很有用。不能将高度设得超过物理屏幕高度。

							*z.*
z.			重绘，将第 [count] 行放到窗口中间（默认为光标行）。将光标放在该行的第一个非空白字符上。

							*zz*
zz			类似于 "z."，但光标保持在同一列。
			注意：如果大写锁定开启，此命令变为 "ZZ"：写入缓冲区并退出！

							*z-*
z-			重绘，将第 [count] 行放到窗口底部（默认为光标行）。将光标放在该行的第一个非空白字符上。

							*zb*
zb			类似于 "z-"，但光标保持在同一列。

==============================================================================
4. 水平滚动				*scroll-horizontal*

对于以下四个命令，光标会跟随屏幕。如果光标所在的字符被移出屏幕，光标会被移到屏幕上最近的字符。'sidescroll' 的值不会被使用。

z<Right>    或						*zl* *z<Right>*
zl			将视图在文本上向右移动 [count] 个字符，因此文本向左滚动 [count] 个字符。仅当 'wrap' 关闭时有效。

z<Left>      或						*zh* *z<Left>*
zh			将视图在文本上向左移动 [count] 个字符，因此文本向右滚动 [count] 个字符。仅当 'wrap' 关闭时有效。

							*zL*
zL			将视图在文本上向右移动半个屏幕宽度，因此文本向左滚动半个屏幕宽度。仅当 'wrap' 关闭时有效。

							*zH*
zH			将视图在文本上向左移动半个屏幕宽度，因此文本向右滚动半个屏幕宽度。仅当 'wrap' 关闭时有效。

对于以下两个命令，光标在文本中不会移动，只是文本在屏幕上滚动。

							*zs*
zs			水平滚动文本，使光标位于屏幕的起始（左侧）。仅当 'wrap' 关闭时有效。

							*ze*
ze			水平滚动文本，使光标位于屏幕的末尾（右侧）。仅当 'wrap' 关闭时有效。



==============================================================================
5. 同步滚动				*scroll-binding*

有时，希望将两个或多个窗口绑定在一起，这样当一个窗口滚动时，其他窗口也会同步滚动。在 Vim 中，可以通过设置（窗口专有的）'scrollbind' 选项来实现。当设置了 'scrollbind' 的窗口被滚动时，所有其他设置了 'scrollbind' 的窗口也会尽可能地滚动相同的量。'scrollbind' 的行为可以通过 'scrollopt' 选项进行修改。

当使用滚动条或鼠标滚轮时，只有在滚动有焦点（光标所在）的窗口时才会发生绑定。你可以利用这一点暂时避免滚动绑定，而无需重置选项。

当窗口同时设置了 'diff' 选项时，滚动绑定会利用两个缓冲区之间的差异来精确同步位置。否则会使用以下方法。

							*scrollbind-relative*
每个 'scrollbind' 窗口会记录其“相对偏移量”，可以理解为当前窗口的垂直滚动位置与其他窗口的垂直滚动位置之间的差值。当某个 'scrollbind' 窗口被要求垂直滚动超过其文本的起始或结束限制时，该窗口不再滚动，但会记住希望超出的距离。窗口会保留此信息，以便无论何时被要求滚动超过缓冲区限制时，都能保持相同的相对偏移量。

然而，如果一个 'scrollbind' 窗口的相对偏移量已经超出了其缓冲区限制，并且获得了光标焦点，则其他 'scrollbind' 窗口必须跳转到一个当前窗口的相对偏移量有效的位置。可以通过清除 'scrollopt' 选项中的 "jump" 标志来改变此行为。

						*syncbind* *:syncbind* *:sync*
:syncbind		强制所有 'scrollbind' 窗口具有相同的相对偏移量。也就是说，当任意一个 'scrollbind' 窗口滚动到其缓冲区顶部时，所有 'scrollbind' 窗口也会滚动到各自缓冲区的顶部。

							*scrollbind-quickadj*
'Scrollbind' 标志在使用键盘命令垂直滚动窗口时有效，在使用有焦点窗口的垂直滚动条或鼠标滚轮时也有效。然而，在没有焦点的窗口中使用垂直滚动条或鼠标滚轮时，'scrollbind' 会被忽略。
这允许快速调整 'scrollbind' 窗口的相对偏移量。

==============================================================================
6. 使用鼠标滚轮滚动				*scroll-mouse-wheel*

当你的鼠标有滚轮时，它应该可以在 Nvim 的 GUI 和任何支持鼠标的终端中工作。默认情况下只支持垂直滚轮，但某些 GUI 也支持水平滚轮。

注意，只有设置了 'nowrap' 时才支持水平滚动。此外，除非 'guioptions' 中设置了 "h" 标志，否则如果光标行即将被滚出屏幕，光标会移动到可见的最长行（类似于水平滚动条的工作方式）。

你可以通过 'mousescroll' 选项控制滚动的行数/列数。你也可以通过映射按键来修改默认行为。例如，在普通模式下每次滚动一页：>
   :map <ScrollWheelUp> <C-B>
   :map <ScrollWheelDown> <C-F>
滚动按键也可以与 Shift、Ctrl 和 Alt 等修饰键组合使用。

使用鼠标滚动时，当前鼠标下的窗口会被滚动。这允许你滚动非活动窗口。注意，当滚动按键被映射到键盘按键时，无论当前光标位置如何，都会影响活动窗口。

 vim:tw=78:ts=8:noet:ft=help:norl:
