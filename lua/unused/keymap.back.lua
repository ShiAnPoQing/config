--    -- ["<F8>"] = {
--    -- function()
--    -- require("test").expand()
--    -- end,
--    -- "n",
--    -- },
--    -- ["<S-Tab>"] = {
--    -- function()
--    -- if vim.snippet.active({ direction = -1 }) then
--    -- vim.snippet.jump(-1)
--    -- else
--    -- vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<S-Tab>", true, true, true), "nt", true)
--    -- end
--    -- end,
--    -- { "i", "s" },
--    -- },
--    -- ["<Tab>"] = {
--    -- {
--    -- function()
--    -- local luasnip = require("luasnip")
--    -- local expand = luasnip.isExpandable()
--
--    -- if not expand then
--    -- if vim.snippet.active({ direction = 1 }) then
--    -- vim.snippet.jump(1)
--    -- else
--    -- vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<Tab>", true, true, true), "nt", true)
--    -- end
--    -- else
--    -- expand()
--    -- end
--    -- end,
--    -- { "i", "s" },
--    -- },
--    -- {
--    -- function()
--    -- local luasnip = require("luasnip")
--    -- local expand = luasnip.isExpandable()
--
--    -- if not expand then
--    -- if vim.snippet.active({ direction = 1 }) then
--    -- vim.snippet.jump(1)
--    -- else
--    -- vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<Tab>", true, true, true), "nt", true)
--    -- end
--    -- else
--    -- expand()
--    -- end
--    -- end,
--    -- { "x" },
--    -- },
--    -- },
--    -- jump the middle of cursor to top
--    ["<space>an"] = {
--      function()
--        local count = vim.v.count1
--        base.JumpToMiddle(count, "up")
--        R.Record(function()
--          base.JumpToMiddle(count, "up")
--        end)
--      end,
--      "n",
--    },
--    -- jump the middle of cursor to bottom
--    ["<space><space>an"] = {
--      function()
--        local count = vim.v.count1
--        base.JumpToMiddle(count, "down")
--        R.Record(function()
--          base.JumpToMiddle(count, "down")
--        end)
--      end,
--      "n",
--    },
--    -- reset base cursor move
--    ["m<BS>"] = {
--      function()
--        require("change-movesize").ChangeMoveSize_reset()
--      end,
--      { "n" },
--    },
--    -- toggle comment
--    ["<C-\\>"] = {
--      {
--        function()
--          local C = require("comment")
--          local count = vim.v.count1
--          C.toggleComment("n", count)
--          R.Record(function()
--            C.toggleComment("n", count)
--          end)
--        end,
--        "n",
--      },
--      {
--        function()
--          local C = require("comment")
--          local count = vim.v.count1
--          C.toggleComment("v", count)
--          R.Record(function()
--            C.toggleComment("v", count)
--          end)
--        end,
--        "x",
--      },
--      {
--        function()
--          local C = require("comment")
--          local count = vim.v.count1
--          C.toggleComment("n", count)
--          R.Record(function()
--            C.toggleComment("n", count)
--          end)
--        end,
--        "i",
--      },
--    },
--    [";tm"] = {
--      {
--        function()
--          local T = require("text-align")
--          T.textAlign({
--            align = "middle",
--            mode = "n",
--          })
--          R.Record(function()
--            T.textAlign({
--              align = "middle",
--              mode = "n",
--            })
--          end)
--        end,
--        "n",
--      },
--      {
--        function()
--          local T = require("text-align")
--          T.textAlign({
--            align = "middle",
--            mode = "v",
--          })
--          R.Record(function()
--            T.textAlign({
--              align = "middle",
--              mode = "v",
--            })
--          end)
--        end,
--        "x",
--      },
--    },
--    [";tl"] = {
--      {
--        function()
--          local T = require("text-align")
--          T.textAlign({
--            align = "right",
--            mode = "n",
--          })
--          R.Record(function()
--            T.textAlign({
--              align = "right",
--              mode = "n",
--            })
--          end)
--        end,
--        "n",
--      },
--      {
--        function()
--          local T = require("text-align")
--          T.textAlign({
--            align = "right",
--            mode = "v",
--          })
--          R.Record(function()
--            T.textAlign({
--              align = "right",
--              mode = "v",
--            })
--          end)
--        end,
--        "x",
--      },
--    },
--    [";th"] = {
--      {
--        function()
--          local T = require("text-align")
--          T.textAlign({
--            align = "left",
--            mode = "n",
--          })
--          R.Record(function()
--            T.textAlign({
--              align = "left",
--              mode = "n",
--            })
--          end)
--        end,
--        "n",
--      },
--      {
--        function()
--          local T = require("text-align")
--          T.textAlign({
--            align = "left",
--            mode = "v",
--          })
--          R.Record(function()
--            T.textAlign({
--              align = "left",
--              mode = "v",
--            })
--          end)
--        end,
--        "x",
--      },
--    },
--    [";ig"] = {
--      function()
--        require("switch-function").switch("ignorecase")
--      end,
--      { "n" },
--    },
--    ["<F9>"] = {
--      function()
--        base.expand()
--      end,
--      { "i" },
--    },
--
--    -- add new line below cursor line, and cursor jump new line
--    ["<M-b>"] = {
--      function()
--        local count = vim.v.count1
--        base.AddNewLine(count, "down")
--        R.Record(function()
--          base.AddNewLine(count, "down")
--        end)
--      end,
--      "n",
--    },
--    -- add new line above cursor line, and cursor jump new line
--    ["<C-b>"] = {
--      {
--        function()
--          local count = vim.v.count1
--          base.AddNewLine(count, "up")
--          R.Record(function()
--            base.AddNewLine(count, "up")
--          end)
--        end,
--        "n",
--      },
--      {
--        function()
--          local count = vim.v.count1
--          base.AddNewLine(count, "up")
--          R.Record(function()
--            base.AddNewLine(count, "up")
--          end)
--        end,
--        "i",
--      },
--    },
--    --???????
--    ["<C-[>"] = { "<C-O>", "n" },
--    ["<space><space>w"] = { "0i", { "n" } },
--    ["<space><space>e"] = { "$a", { "n" } },
--
--    ["Y"] = { "y$", { "n" } },
--    ["Q"] = {
--      { "gwap", { "n" } },
--      { "gw",   { "x" } },
--    },
--    -- yank/paste/del A register text
--    ["<space>y"] = { '"ay', { "n", "x" } },
--    ["<space>p"] = { '"ap', { "n", "x" } },
--    ["<space>P"] = { '"aP', { "n" } },
--    ["<space>d"] = { '"ad', { "n", "x" } },
--
--    -- yank/paste/del Outer register text
--    ["<space><space>y"] = { '"+y', { "n", "x" } },
--    ["<space><space>p"] = { '"+p', { "n", "x" } },
--    ["<space><space>P"] = { '"+P', { "n", "x" } },
--    ["<space><space>d"] = { '"+d', { "n", "x" } },
--
--    -- goto last cursor position
--    ["<space>["] = { "<C-o>", "n" },
--    -- goto tag in cursor text
--    ["<space>]"] = { "<C-]>", "n" },
--
--    ["<C-F11>"] = { "<C-v>", { "i" } },
--    -- del cursor left all text
--    ["<C-u>"] = { "<C-G>u<C-u>", { "i" } },
--    -- del cursor right all text
--    ["<M-u>"] = { "<C-o>d$", { "i" } },
--
--    -- del cursor left all text(without space)
--    ["<C-space><C-u>"] = { "<C-o>d^", { "i" } },
--    -- del cursor right all text(without space)
--    ["<M-space><M-u>"] = { "<C-o>v$ged", { "i" } },
--    --??????? cannot listen this key combination
--    ["<C-BS>"] = { "<Left><C-o>diw", { "i" } },
--    -- ["<C-BS>"] = {
--    -- function()
--    -- print("nihao")
--    -- end,
--    -- { "i" },
--    -- },
--    -- del left single letter (The opposite of BS)
--    ["<M-BS>"] = { "<Del>", { "i" } },
--    -- Delete the text where the cursor is located
--    ["<M-Del>"] = { "<C-o>diw", { "i" } },
--
--    --???? 非粘贴模式
--    ["<M-p>"] = {
--      { '<C-G>u<C-R>"', { "i" } },
--      { "<C-W>p",       "n" },
--    },
--    ["<M-S-p>"] = {
--      "<C-w>P",
--      "n",
--    },
--
--    -- 粘贴模式
--    ["<C-v>"] = {
--      { '<C-G>u<C-R>"',  { "i" } },
--      { '<C-R>"',        { "c" }, { silent = false } },
--      { "<C-\\><C-N>pi", "t" },
--    },
--
--    --map('c', '<C-v>', '<C-R>\'', Opts)
--    ["<M-space><M-p>"] = {
--      { "<C-G>u<C-R><C-o>a", { "i" } },
--      { "<C-R>a",            { "c" }, { silent = false } },
--    },
--
--    -- Map('c', '<C-space><C-v>', '<C-G>u<C-R><C-o>a', Opts)
--    ["<M-space><M-v>"] = { "<C-G>u<C-R>'", { "i" } },
--
--    -- 粘贴模式
--    ["<M-space><M-space><M-p>"] = {
--      { "<C-G>u<C-R><C-O>+", { "i" } },
--      { "<C-R>+",            "c",    { silent = false } },
--    },
--
--    --map('c', '<C-space><C-space><C-v>', '<C-G>u<C-R><C-o>*', Opts)
--    -- 非粘贴模式
--    ["<M-space><M-space><M-v>"] = { "<C-G>u<C-R>*", { "i" } },
--
--    ["<M-->"] = { "J", "x" },
--
--    --????
--    ["<space>r"] = { "gR", "n" },
--    --["<space><CR>"] = {'i<CR><Esc>l', 'n'},
--    --???
--    ["<space>u"] = { "U", "n" },
--    ["U"] = { "<C-R>", "n" },
--    --???
--    ["<C-.>"] = { "<C-T>", "i" },
--    --???
--    ["<C-,>"] = { "<C-D>", "i" },
--    ["<C-space><C-,>"] = { "0<C-D>", "i" },
--    ["<C-space><C-.>"] = { "^<C-D>", "i" },
--
--    -- insert mode: save file
--    ["<C-S>"] = { "<C-O>:w<CR>", "i" },
--    -- insert mode use d operator
--    ["<M-d><M-i>"] = { "<C-O>db", "i" },
--    ["<M-d><M-o>"] = { "<C-O>de", "i" },
--    ["<M-d><M-S-i>"] = { "<C-O>dB", "i" },
--    ["<M-d><M-S-o>"] = { "<C-O>dE", "i" },
--    ["<M-d><M-space><M-i>"] = { "<C-O>dge", "i" },
--    ["<M-d><M-space><M-o>"] = { "<C-O>dw", "i" },
--    ["<M-d><M-space><M-S-i>"] = { "<C-O>dgE", "i" },
--    ["<M-d><M-space><M-S-o>"] = { "<C-O>dW", "i" },
--    ["<M-d><M-space><M-h>"] = { "<C-O>d^", "i" },
--    ["<M-d><M-space><M-l>"] = { "<C-O>dg_", "i" },
--    ["<M-d><M-space><M-space><M-h>"] = { "<C-O>d0", "i" },
--    ["<M-d><M-space><M-space><M-l>"] = { "<C-O>d$", "i" },
--    ["<M-d><M-d>"] = { "<C-o>dd", "i" },
--    ["<M-d><M-S-G>"] = { "<C-o>dG", "i" },
--    ["<M-d><M-g><M-g>"] = { "<C-o>dgg", "i" },
--
--    -- insert mode use gg/G
--    ["<M-S-g>"] = { "<C-o>G", "i" },
--    ["<M-g><M-g>"] = { "<C-o>gg", "i" },
--
--    -- resize window
--    ["<M-down>"] = { ":resize +3<CR>", { "n" } },
--    ["<M-up>"] = { ":resize -3<CR>", { "n" } },
--    ["<M-right>"] = { ":vertical resize -3<CR>", { "n" } },
--    ["<M-left>"] = { ":vertical resize +3<CR>", { "n" }, { silent = true } },
--
--    ["<S-ScrollWheelDown>"] = {
--      { "zs",      { "n" } },
--      { "<C-o>zs", { "i" } },
--    },
--    ["<S-ScrollWheelUp>"] = {
--      { "ze",      { "n" } },
--      { "<C-o>ze", { "i" } },
--    },
--    ["<M-ScrollWheelDown>"] = {
--      { ":vertical resize +5<CR>",      "n" },
--      { "<C-o>:vertical resize +5<CR>", "i" },
--    },
--
--    ["<M-ScrollWheelUp>"] = {
--      { ":vertical resize -5<CR>",      "n" },
--      { "<C-o>:vertical resize -5<CR>", "i" },
--    },
--
--    -- buffer
--    ["<Tab>h"] = { "gT", "n" },
--    ["<Tab>l"] = { "gt", "n" },
--
--    -- ["<space><Tab>"] = { "g<tab>", "n" },
--
--    -- ["<Tab><Tab>l"] = { ":+tabmove<CR>", "n" },
--    -- ["<Tab><Tab>h"] = { ":-tabmove<CR>", "n" },
--
--    -- ["<Tab>n"] = { ":tabnew<CR>", "n" },
--
--    ["<space><space>vs"] = { ":vs<CR>", "n" },
--    ["<space><space>vn"] = { ":vnew<CR>", "n" },
--    ["<space><space>sn"] = { ":sp<CR>", "n" },
--
--    ["<space><space><space><space>v"] = { ":bro vs<CR>", "n" },
--
--
--    ["<space>c"] = { ":close<CR>", "n" },
--    ["<space><space>c"] = { ":close!<CR>", "n" },
--
--    ["<space>q"] = { ":q<CR>", "n" },
--    ["<space><space>q"] = { ":q!<CR>", "n" },
--    ["<space><space><space>q"] = { ":qa!<CR>", "n" },
--    --? split current file top-bottom
--    ["<M-S-V"] = {
--      ":split<cr>",
--      "n",
--    },
--
--    ["<M-space><M-m>"] = { "<C-o>gM", { "i" } },
--    ["<M-space><M-n>"] = { "<C-o>gM", { "i" } },
--    ["<space><space>h"] = { "0", { "n", "x", "o" } },
--    ["<space><space>l"] = { "$", { "n", "x", "o" } },
--    ["<space><space>j"] = { "+", { "n", "x", "o" } },
--    ["<space><space>k"] = { "-", { "n", "x", "o" } },
--
--    -- normal mode view move: cursor word position at screen right
--    ["<M-1><M-1><M-l>"] = { "<C-o>zs", { "i" } },
--    -- normal mode view move: cursor word position at screen left
--    ["<M-1><M-1><M-h>"] = { "<C-o>ze", { "i" } },
--    -- normal mode view move: cursor line position at screen top col
--    ["<M-1><M-1><M-k>"] = { "<C-o>zb", { "i" } },
--    -- normal mode view move: cursor line position at screen bottom col
--    ["<M-1><M-1><M-j>"] = { "<C-o>zt", { "i" } },
--    -- normal mode view move: cursor line position at screen center col
--    ["<M-1><M-1><M-n>"] = { "<C-o>zz", { "i" } },
--
--    ["<C-space><C-v>"] = { '<C-\\><C-N>"api', "t", { silent = false, noremap = true } },
--    ["<C-space><C-space><C-v>"] = { '<C-\\><C-N>"+pi', "t", { silent = false, noremap = true } },
--    ["<M-`><M-h>"] = { "<home>", "t" },
--    ["<M-`><M-l>"] = { "<end>", "t" },
--    ["<Esc>"] = { "<C-\\><C-N>", "t" },
--    -- normal mode into insert mode ea
--    ["<space><M-i>"] = {
--      { "gea", { "n" } },
--    },
--    -- normal mode into insert mode Ea
--    ["<space><M-S-i>"] = {
--      { "gEa", { "n" } },
--    },
--    -- normal mode into insert mode: wi
--    ["<space><M-o>"] = {
--      { "wi", { "n" } },
--    },
--    -- normal mode into insert mode: Wi
--    ["<space><M-S-o>"] = {
--      { "Wi", { "n" } },
--    },
--    -- normal mode into insert mode: ei
--    ["<M-o>"] = {
--      { "<Esc>ea",   { "i" } },
--      { "<S-right>", { "c" } },
--      { "ea",        { "n" } },
--    },
--    -- normal mode into insert mode: Ei
--    ["<M-S-o>"] = {
--      { "<Esc>Ea", { "i" } },
--      { "Ea",      { "n" } },
--    },
--    -- normal mode into insert mode: bi
--    ["<M-i>"] = {
--      { "<Esc>bi",  { "i" } },
--      { "<S-left>", { "c" } },
--      { "bi",       { "n" } },
--    },
--    -- normal mode into insert mode: Bi
--    ["<M-S-i>"] = {
--      { "<Esc>Bi", { "i" } },
--      { "Bi",      { "n" } },
--    },
--
--    -- insert mode move: exclusive words like e,
--    ["<M-space><M-i>"] = {
--      { "<Esc>gea", { "i" } },
--    },
--    -- insert mode move: exclusive words like E,
--    ["<M-space><M-S-i>"] = {
--      { "<Esc>gEa", { "i" } },
--    },
--    -- insert mode move: exclusive words like w,
--    ["<M-space><M-o>"] = {
--      { "<S-right>", { "i" } },
--    },
--    -- insert mode move: exclusive words like W,
--    ["<M-space><M-S-o>"] = {
--      { "<Esc>Wi", { "i" } },
--    },
--    -- insert mode move: Home(ignore space),
--    ["<M-space><M-h>"] = {
--      { "<C-o>I", { "i" } },
--      { "<C-W>H", "n" },
--    },
--    -- insert mode move: Home,
--    ["<M-space><M-space><M-h>"] = { "<Home>", { "i", "c" }, { silent = false } },
--    -- insert mode move: End,
--    ["<M-space><M-l>"] = {
--      { "<C-o>A", { "i" } },
--      { "<C-W>L", "n" },
--    },
--    -- insert mode move: End,
--    ["<M-space><M-space><M-l>"] = { "<End>", { "i", "c" }, { silent = false } },
--    -- insert mode move: Up End,
--    ["<M-space><M-k>"] = {
--      { "<Up><End>", { "i" } },
--      { "<C-W>K",    "n" },
--    },
--    -- insert mode move: Up Home,
--    ["<M-space><M-space><M-k>"] = { "<Up><Home>", { "i" } },
--    -- insert mode move: Down End
--    ["<M-space><M-j>"] = {
--      { "<Down><End>", { "i" } },
--      { "<C-W>J",      "n" },
--    },
--    -- insert mode move: Down Home,
--    ["<M-space><M-space><M-j>"] = { "<Down><Home>", { "i" } },
--
--    -- repeat latest f
--    ["<M-f>"] = { ";", { "n" } },
--    -- repeat latest F
--    ["<M-S-f>"] = { ",", { "n" } },
--    -- gh: normal mode into select mode
--    -- normal mode into select block mode
--    ["<space>gh"] = { "g<C-h>", { "n" } },
--    -- select mode delete select text
--    ["<BS>"] = { "<C-g>s", "s" },

-- vnoremap("<A-j>", ":m '>+1<CR>gv=gv")
-- vnoremap("<A-k>", ":m '<-2<CR>gv=gv")

-- set("n", "<leader>x", "<cmd>.lua<CR>", { desc = "Execute the current line" })
-- set("n", "<leader><leader>x", "<cmd>source %<CR>", { desc = "Execute the current file" })

-- Toggle hlsearch if it's on, otherwise just do "enter"
-- set("n", "<CR>", function()
-- if vim.v.hlsearch == 1 then
-- vim.cmd.nohl()
-- return ""
-- else
-- return k "<CR>"
-- end
-- end, { expr = true })

-- Normally these are not good mappings, but I have left/right on my thumb
-- cluster, so navigating tabs is quite easy this way.
-- set("n", "<left>", "gT")
-- set("n", "<right>", "gt")

-- There are builtin keymaps for this now, but I like that it shows
-- the float when I navigate to the error - so I override them.
-- set("n", "]d", fn(vim.diagnostic.jump, { count = 1, float = true }))
-- set("n", "[d", fn(vim.diagnostic.jump, { count = -1, float = true }))

-- ["<S-Tab>"] = {
-- function()
-- if vim.snippet.active({ direction = -1 }) then
-- vim.snippet.jump(-1)
-- else
-- vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<S-Tab>", true, true, true), "nt", true)
-- end
-- end,
-- { "i", "s" },
-- },
-- ["<Tab>"] = {
-- {
-- function()
-- local luasnip = require("luasnip")
-- local expand = luasnip.isExpandable()

-- if not expand then
-- if vim.snippet.active({ direction = 1 }) then
-- vim.snippet.jump(1)
-- else
-- vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<Tab>", true, true, true), "nt", true)
-- end
-- else
-- expand()
-- end
-- end,
-- { "i", "s" },
-- },
-- {
-- function()
-- local luasnip = require("luasnip")
-- local expand = luasnip.isExpandable()

-- if not expand then
-- if vim.snippet.active({ direction = 1 }) then
-- vim.snippet.jump(1)
-- else
-- vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<Tab>", true, true, true), "nt", true)
-- end
-- else
-- expand()
-- end
-- end,
-- { "x" },
-- },
-- },
-- ["<space><Tab>"] = { "g<tab>", "n" },
-- ["<Tab><Tab>l"] = { ":+tabmove<CR>", "n" },
-- ["<Tab><Tab>h"] = { ":-tabmove<CR>", "n" },
-- ["<Tab>1"] = { ":tabn 1<CR>", "n" },
-- ["<Tab>2"] = { ":tabn 2<CR>", "n" },
-- ["<Tab>3"] = { ":tabn 3<CR>", "n" },
-- ["<Tab>4"] = { ":tabn 4<CR>", "n" },
-- ["<Tab>5"] = { ":tabn 5<CR>", "n" },
-- ["<Tab>6"] = { ":tabn 6<CR>", "n" },
-- ["<Tab>7"] = { ":tabn 7<CR>", "n" },
-- ["<Tab>8"] = { ":tabn 8<CR>", "n" },
-- ["<Tab>9"] = { ":tabn 9<CR>", "n" },
-- ["<Tab>10"] = { ":tabn 10<CR>", "n" },
-- ["<Tab>n"] = { ":tabnew<CR>", "n" },
