-- return {
--   "folke/snacks.nvim",
--   priority = 1000,
--   lazy = false,
--   ---@type snacks.Config
--   opts = {
--     bigfile = { enabled = true },
--     dashboard = {
--       enabled = true,
--     },
--     explorer = { enabled = true },
--     indent = { enabled = true },
--     input = { enabled = true },
--     picker = { enabled = true },
--     notifier = { enabled = true },
--     quickfile = { enabled = true },
--     scope = { enabled = false },
--     scroll = { enabled = true },
--     statuscolumn = {
--       enabled = false,
--       left = { "mark", "sign" }, -- priority of signs on the left (high to low)
--       right = { "fold", "git" }, -- priority of signs on the right (high to low)
--       folds = {
--         open = false,            -- show open fold icons
--         git_hl = false,          -- use Git Signs hl for fold icons
--       },
--       git = {
--         -- patterns to match Git signs
--         patterns = { "GitSign", "MiniDiffSign" },
--       },
--       refresh = 50, -- refresh at most every 50ms
--
--     },
--     words = { enabled = true },
--     animate = { enabled = false }
--   },
--   init = function()
--     vim.g.snacks_animate = false
--     vim.api.nvim_create_autocmd("User", {
--       pattern = "VeryLazy",
--       callback = function()
--         local Snacks = require("snacks")
--         -- Setup some globals for debugging (lazy-loaded)
--         _G.dd = function(...)
--           Snacks.debug.inspect(...)
--         end
--         _G.bt = function()
--           Snacks.debug.backtrace()
--         end
--         vim.print = _G.dd -- Override print to use snacks for `:=` command
--
--         -- Create some toggle mappings
--         Snacks.toggle.option("spell", { name = "Spelling" }):map("<leader>us")
--         Snacks.toggle.option("wrap", { name = "Wrap" }):map("<leader>uw")
--         Snacks.toggle.option("relativenumber", { name = "Relative Number" }):map("<leader>uL")
--         Snacks.toggle.diagnostics():map("<leader>ud")
--         Snacks.toggle.line_number():map("<leader>ul")
--         Snacks.toggle.option("conceallevel", { off = 0, on = vim.o.conceallevel > 0 and vim.o.conceallevel or 2 }):map(
--           "<leader>uc")
--         Snacks.toggle.treesitter():map("<leader>uT")
--         Snacks.toggle.option("background", { off = "light", on = "dark", name = "Dark Background" }):map("<leader>ub")
--         Snacks.toggle.inlay_hints():map("<leader>uh")
--         Snacks.toggle.indent():map("<leader>ug")
--         Snacks.toggle.dim():map("<leader>uD")
--       end,
--     })
--   end,
--   keys = {
--     -- Top Pickers & Explorer
--     { "<leader><space>", function() Snacks.picker.smart() end,           desc = "Smart Find Files" },
--     { "<leader>,",       function() Snacks.picker.buffers() end,         desc = "Buffers" },
--     { "<leader>/",       function() Snacks.picker.grep() end,            desc = "Grep" },
--     { "<leader>:",       function() Snacks.picker.command_history() end, desc = "Command History" },
--     { "<leader>n",       function() Snacks.picker.notifications() end,   desc = "Notification History" },
--     { "<leader>b",       function() Snacks.explorer() end,               desc = "File Explorer" },
--     -- find
--     -- { "<leader>fb", function() Snacks.picker.buffers() end, desc = "Buffers" },
--     -- { "<leader>fc", function() Snacks.picker.files({ cwd = vim.fn.stdpath("config") }) end, desc = "Find Config File" },
--     { "<space>ff",       function() Snacks.picker.files() end,           desc = "Find Files" },
--     -- { "<leader>fg", function() Snacks.picker.git_files() end, desc = "Find Git Files" },
--     -- { "<leader>fp", function() Snacks.picker.projects() end, desc = "Projects" },
--     -- { "<leader>fr", function() Snacks.picker.recent() end, desc = "Recent" },
--     -- git
--   }
-- }
return {}
